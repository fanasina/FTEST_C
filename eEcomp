# 0 "test/is_good.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "test/is_good.c"
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 52 "/usr/include/stdio.h" 3 4
typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 77 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 178 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 205 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 293 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 308 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 403 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 431 "/usr/include/stdio.h" 2 3 4



extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 786 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));
# 867 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4

# 2 "test/is_good.c" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 144 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 654 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 828 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 848 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1013 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4

# 3 "test/is_good.c" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdbool.h" 1 3 4
# 4 "test/is_good.c" 2



# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 255 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 309 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 339 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 358 "/usr/include/unistd.h" 3 4
extern int close (int __fd);




extern void closefrom (int __lowfd) __attribute__ ((__nothrow__ , __leaf__));







extern ssize_t read (int __fd, void *__buf, size_t __nbytes)
    __attribute__ ((__access__ (__write_only__, 2, 3)));





extern ssize_t write (int __fd, const void *__buf, size_t __n)
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 389 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset)
    __attribute__ ((__access__ (__write_only__, 2, 3)));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset)
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 437 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;
# 545 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__))
    __attribute__ ((__access__ (__write_only__, 1)));




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 564 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 619 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,


    _SC_MINSIGSTKSZ,


    _SC_SIGSTKSZ

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 631 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__write_only__, 2, 1)));
# 722 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;
# 778 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));
# 799 "/usr/include/unistd.h" 3 4
extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)))
     __attribute__ ((__access__ (__write_only__, 2, 3)));



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)))
     __attribute__ ((__access__ (__write_only__, 2, 3)));





extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)))
     __attribute__ ((__access__ (__write_only__, 3, 4)));



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4








extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4


# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4

# 904 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__read_only__, 1, 2)));



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__read_only__, 1, 2)));




extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 1002 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 1026 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1049 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1070 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1114 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1150 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1159 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 1198 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 1218 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 1219 "/usr/include/unistd.h" 2 3 4


# 8 "test/is_good.c" 2




# 1 "./src/ftest/ftest.h" 1





# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 173 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 407 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 458 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
# 489 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 539 "/usr/include/string.h" 3 4

# 7 "./src/ftest/ftest.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 8 "./src/ftest/ftest.h" 2

# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4


# 98 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4

# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 138 "/usr/include/sched.h" 3 4

# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 116 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 132 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 440 "/usr/include/time.h" 3 4

# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 2 3 4
# 34 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL





};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 441 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 750 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) __asm__ ("" "__sigsetjmp") __attribute__ ((__nothrow__))


                     __attribute__ ((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 946 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__access__ (__none__, 2)));




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));
# 1346 "/usr/include/pthread.h" 3 4

# 10 "./src/ftest/ftest.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4




# 1 "/usr/include/linux/ioctl.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 2 3 4
# 6 "/usr/include/linux/ioctl.h" 2 3 4
# 6 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 2 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 2 3 4


struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 30 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4





extern int ioctl (int __fd, unsigned long int __request, ...) __attribute__ ((__nothrow__ , __leaf__));
# 53 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4

# 12 "./src/ftest/ftest.h" 2

# 1 "./src/tools_t/tools_t.h" 1
# 40 "./src/tools_t/tools_t.h"

# 40 "./src/tools_t/tools_t.h"
void gotoxy(int x, int y);
# 95 "./src/tools_t/tools_t.h"
int COMPARE_N_TYPE_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_CHAR(char* dst, const char* src, size_t size); char MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); char MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); char* TYPE_CHAR_TO_STR(char var);
int COMPARE_N_TYPE_U_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_U_CHAR(unsigned char* dst, const unsigned char* src, size_t size); unsigned char MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); unsigned char MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); char* TYPE_U_CHAR_TO_STR(unsigned char var);
int COMPARE_N_TYPE_INT(const void *,const void*); void COPY_ARRAY_TYPE_INT(int* dst, const int* src, size_t size); int MAX_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_INT(const int *array, size_t size); int MIN_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_INT(const int *array, size_t size); char* TYPE_INT_TO_STR(int var);
int COMPARE_N_TYPE_U_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_INT(unsigned int* dst, const unsigned int* src, size_t size); unsigned int MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); unsigned int MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); char* TYPE_U_INT_TO_STR(unsigned int var);
int COMPARE_N_TYPE_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_L_INT(long int* dst, const long int* src, size_t size); long int MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); long int MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); char* TYPE_L_INT_TO_STR(long int var);
int COMPARE_N_TYPE_U_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_L_INT(unsigned long int* dst, const unsigned long int* src, size_t size); unsigned long int MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); unsigned long int MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); char* TYPE_U_L_INT_TO_STR(unsigned long int var);
int COMPARE_N_TYPE_SIZE_T(const void *,const void*); void COPY_ARRAY_TYPE_SIZE_T(size_t* dst, const size_t* src, size_t size); size_t MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); char* TYPE_SIZE_T_TO_STR(size_t var);
int COMPARE_N_TYPE_FLOAT(const void *,const void*); void COPY_ARRAY_TYPE_FLOAT(float* dst, const float* src, size_t size); float MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); float MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); char* TYPE_FLOAT_TO_STR(float var);
int COMPARE_N_TYPE_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_DOUBLE(double* dst, const double* src, size_t size); double MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); double MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); char* TYPE_DOUBLE_TO_STR(double var);
int COMPARE_N_TYPE_L_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_L_DOUBLE(long double* dst, const long double* src, size_t size); long double MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); long double MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); char* TYPE_L_DOUBLE_TO_STR(long double var);
int COMPARE_N_TYPE_STRING(const void *,const void*); void COPY_ARRAY_TYPE_STRING(char** dst, const char** src, size_t size); char* MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); char* MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); char* TYPE_STRING_TO_STR(char* var);





double diff_timespec_seconds(struct timespec time_stop, struct timespec time_start);

double diff_timespec_milliseconds(struct timespec time_stop, struct timespec time_start);

long diff_timespec_nanoseconds(struct timespec time_stop, struct timespec time_start);
# 14 "./src/ftest/ftest.h" 2
# 51 "./src/ftest/ftest.h"
extern FILE **f_ou_th;
extern 
# 52 "./src/ftest/ftest.h" 3 4
      _Bool 
# 52 "./src/ftest/ftest.h"
           unicolour;
extern 
# 53 "./src/ftest/ftest.h" 3 4
      _Bool 
# 53 "./src/ftest/ftest.h"
           ordered;
# 159 "./src/ftest/ftest.h"
struct func {
  char *name;
  void (*run)(void);
  struct func *next;
};


extern 
# 166 "./src/ftest/ftest.h" 3 4
      _Bool 
# 166 "./src/ftest/ftest.h"
           is_parallel_nb;

long int id_of_thread_executed(void);

void parse_options(int argc, char **argv);

void run_all_tests();
void execute_all(struct func *fun);
void append_func(void (*run)(void), char *name);






void run_all_tests_parallel(size_t parallel );





void run_all_tests_args(int argc, char **argv);


# 189 "./src/ftest/ftest.h" 3 4
_Bool 
# 189 "./src/ftest/ftest.h"
    expected_true_f(
# 189 "./src/ftest/ftest.h" 3 4
                    _Bool 
# 189 "./src/ftest/ftest.h"
                         val);

# 190 "./src/ftest/ftest.h" 3 4
_Bool 
# 190 "./src/ftest/ftest.h"
    expected_false_f(
# 190 "./src/ftest/ftest.h" 3 4
                     _Bool 
# 190 "./src/ftest/ftest.h"
                          val);


# 192 "./src/ftest/ftest.h" 3 4
_Bool 
# 192 "./src/ftest/ftest.h"
    expected_true_f_name(
# 192 "./src/ftest/ftest.h" 3 4
                         _Bool 
# 192 "./src/ftest/ftest.h"
                              val, const char *name);

# 193 "./src/ftest/ftest.h" 3 4
_Bool 
# 193 "./src/ftest/ftest.h"
    expected_false_f_name(
# 193 "./src/ftest/ftest.h" 3 4
                          _Bool 
# 193 "./src/ftest/ftest.h"
                               val, const char *name);
# 203 "./src/ftest/ftest.h"

# 203 "./src/ftest/ftest.h" 3 4
_Bool 
# 203 "./src/ftest/ftest.h"
expected_EQ_TYPE_CHAR(char var1, char var2); 
# 203 "./src/ftest/ftest.h" 3 4
_Bool 
# 203 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_CHAR(char var1, char var2, const char *name);

# 204 "./src/ftest/ftest.h" 3 4
_Bool 
# 204 "./src/ftest/ftest.h"
expected_EQ_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 204 "./src/ftest/ftest.h" 3 4
_Bool 
# 204 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 205 "./src/ftest/ftest.h" 3 4
_Bool 
# 205 "./src/ftest/ftest.h"
expected_EQ_TYPE_INT(int var1, int var2); 
# 205 "./src/ftest/ftest.h" 3 4
_Bool 
# 205 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_INT(int var1, int var2, const char *name);

# 206 "./src/ftest/ftest.h" 3 4
_Bool 
# 206 "./src/ftest/ftest.h"
expected_EQ_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 206 "./src/ftest/ftest.h" 3 4
_Bool 
# 206 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 207 "./src/ftest/ftest.h" 3 4
_Bool 
# 207 "./src/ftest/ftest.h"
expected_EQ_TYPE_L_INT(long int var1, long int var2); 
# 207 "./src/ftest/ftest.h" 3 4
_Bool 
# 207 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 208 "./src/ftest/ftest.h" 3 4
_Bool 
# 208 "./src/ftest/ftest.h"
expected_EQ_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 208 "./src/ftest/ftest.h" 3 4
_Bool 
# 208 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 209 "./src/ftest/ftest.h" 3 4
_Bool 
# 209 "./src/ftest/ftest.h"
expected_EQ_TYPE_SIZE_T(size_t var1, size_t var2); 
# 209 "./src/ftest/ftest.h" 3 4
_Bool 
# 209 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 210 "./src/ftest/ftest.h" 3 4
_Bool 
# 210 "./src/ftest/ftest.h"
expected_EQ_TYPE_FLOAT(float var1, float var2); 
# 210 "./src/ftest/ftest.h" 3 4
_Bool 
# 210 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 211 "./src/ftest/ftest.h" 3 4
_Bool 
# 211 "./src/ftest/ftest.h"
expected_EQ_TYPE_DOUBLE(double var1, double var2); 
# 211 "./src/ftest/ftest.h" 3 4
_Bool 
# 211 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 212 "./src/ftest/ftest.h" 3 4
_Bool 
# 212 "./src/ftest/ftest.h"
expected_EQ_TYPE_L_DOUBLE(long double var1, long double var2); 
# 212 "./src/ftest/ftest.h" 3 4
_Bool 
# 212 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 213 "./src/ftest/ftest.h" 3 4
_Bool 
# 213 "./src/ftest/ftest.h"
expected_EQ_TYPE_STRING(char* var1, char* var2); 
# 213 "./src/ftest/ftest.h" 3 4
_Bool 
# 213 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 222 "./src/ftest/ftest.h"

# 222 "./src/ftest/ftest.h" 3 4
_Bool 
# 222 "./src/ftest/ftest.h"
expected_LT_TYPE_CHAR(char var1, char var2); 
# 222 "./src/ftest/ftest.h" 3 4
_Bool 
# 222 "./src/ftest/ftest.h"
expected_LT_name_TYPE_CHAR(char var1, char var2, const char *name);

# 223 "./src/ftest/ftest.h" 3 4
_Bool 
# 223 "./src/ftest/ftest.h"
expected_LT_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 223 "./src/ftest/ftest.h" 3 4
_Bool 
# 223 "./src/ftest/ftest.h"
expected_LT_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 224 "./src/ftest/ftest.h" 3 4
_Bool 
# 224 "./src/ftest/ftest.h"
expected_LT_TYPE_INT(int var1, int var2); 
# 224 "./src/ftest/ftest.h" 3 4
_Bool 
# 224 "./src/ftest/ftest.h"
expected_LT_name_TYPE_INT(int var1, int var2, const char *name);

# 225 "./src/ftest/ftest.h" 3 4
_Bool 
# 225 "./src/ftest/ftest.h"
expected_LT_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 225 "./src/ftest/ftest.h" 3 4
_Bool 
# 225 "./src/ftest/ftest.h"
expected_LT_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 226 "./src/ftest/ftest.h" 3 4
_Bool 
# 226 "./src/ftest/ftest.h"
expected_LT_TYPE_L_INT(long int var1, long int var2); 
# 226 "./src/ftest/ftest.h" 3 4
_Bool 
# 226 "./src/ftest/ftest.h"
expected_LT_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 227 "./src/ftest/ftest.h" 3 4
_Bool 
# 227 "./src/ftest/ftest.h"
expected_LT_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 227 "./src/ftest/ftest.h" 3 4
_Bool 
# 227 "./src/ftest/ftest.h"
expected_LT_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 228 "./src/ftest/ftest.h" 3 4
_Bool 
# 228 "./src/ftest/ftest.h"
expected_LT_TYPE_SIZE_T(size_t var1, size_t var2); 
# 228 "./src/ftest/ftest.h" 3 4
_Bool 
# 228 "./src/ftest/ftest.h"
expected_LT_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 229 "./src/ftest/ftest.h" 3 4
_Bool 
# 229 "./src/ftest/ftest.h"
expected_LT_TYPE_FLOAT(float var1, float var2); 
# 229 "./src/ftest/ftest.h" 3 4
_Bool 
# 229 "./src/ftest/ftest.h"
expected_LT_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 230 "./src/ftest/ftest.h" 3 4
_Bool 
# 230 "./src/ftest/ftest.h"
expected_LT_TYPE_DOUBLE(double var1, double var2); 
# 230 "./src/ftest/ftest.h" 3 4
_Bool 
# 230 "./src/ftest/ftest.h"
expected_LT_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 231 "./src/ftest/ftest.h" 3 4
_Bool 
# 231 "./src/ftest/ftest.h"
expected_LT_TYPE_L_DOUBLE(long double var1, long double var2); 
# 231 "./src/ftest/ftest.h" 3 4
_Bool 
# 231 "./src/ftest/ftest.h"
expected_LT_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 232 "./src/ftest/ftest.h" 3 4
_Bool 
# 232 "./src/ftest/ftest.h"
expected_LT_TYPE_STRING(char* var1, char* var2); 
# 232 "./src/ftest/ftest.h" 3 4
_Bool 
# 232 "./src/ftest/ftest.h"
expected_LT_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 241 "./src/ftest/ftest.h"

# 241 "./src/ftest/ftest.h" 3 4
_Bool 
# 241 "./src/ftest/ftest.h"
expected_GT_TYPE_CHAR(char var1, char var2); 
# 241 "./src/ftest/ftest.h" 3 4
_Bool 
# 241 "./src/ftest/ftest.h"
expected_GT_name_TYPE_CHAR(char var1, char var2, const char *name);

# 242 "./src/ftest/ftest.h" 3 4
_Bool 
# 242 "./src/ftest/ftest.h"
expected_GT_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 242 "./src/ftest/ftest.h" 3 4
_Bool 
# 242 "./src/ftest/ftest.h"
expected_GT_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 243 "./src/ftest/ftest.h" 3 4
_Bool 
# 243 "./src/ftest/ftest.h"
expected_GT_TYPE_INT(int var1, int var2); 
# 243 "./src/ftest/ftest.h" 3 4
_Bool 
# 243 "./src/ftest/ftest.h"
expected_GT_name_TYPE_INT(int var1, int var2, const char *name);

# 244 "./src/ftest/ftest.h" 3 4
_Bool 
# 244 "./src/ftest/ftest.h"
expected_GT_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 244 "./src/ftest/ftest.h" 3 4
_Bool 
# 244 "./src/ftest/ftest.h"
expected_GT_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 245 "./src/ftest/ftest.h" 3 4
_Bool 
# 245 "./src/ftest/ftest.h"
expected_GT_TYPE_L_INT(long int var1, long int var2); 
# 245 "./src/ftest/ftest.h" 3 4
_Bool 
# 245 "./src/ftest/ftest.h"
expected_GT_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 246 "./src/ftest/ftest.h" 3 4
_Bool 
# 246 "./src/ftest/ftest.h"
expected_GT_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 246 "./src/ftest/ftest.h" 3 4
_Bool 
# 246 "./src/ftest/ftest.h"
expected_GT_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 247 "./src/ftest/ftest.h" 3 4
_Bool 
# 247 "./src/ftest/ftest.h"
expected_GT_TYPE_SIZE_T(size_t var1, size_t var2); 
# 247 "./src/ftest/ftest.h" 3 4
_Bool 
# 247 "./src/ftest/ftest.h"
expected_GT_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 248 "./src/ftest/ftest.h" 3 4
_Bool 
# 248 "./src/ftest/ftest.h"
expected_GT_TYPE_FLOAT(float var1, float var2); 
# 248 "./src/ftest/ftest.h" 3 4
_Bool 
# 248 "./src/ftest/ftest.h"
expected_GT_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 249 "./src/ftest/ftest.h" 3 4
_Bool 
# 249 "./src/ftest/ftest.h"
expected_GT_TYPE_DOUBLE(double var1, double var2); 
# 249 "./src/ftest/ftest.h" 3 4
_Bool 
# 249 "./src/ftest/ftest.h"
expected_GT_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 250 "./src/ftest/ftest.h" 3 4
_Bool 
# 250 "./src/ftest/ftest.h"
expected_GT_TYPE_L_DOUBLE(long double var1, long double var2); 
# 250 "./src/ftest/ftest.h" 3 4
_Bool 
# 250 "./src/ftest/ftest.h"
expected_GT_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 251 "./src/ftest/ftest.h" 3 4
_Bool 
# 251 "./src/ftest/ftest.h"
expected_GT_TYPE_STRING(char* var1, char* var2); 
# 251 "./src/ftest/ftest.h" 3 4
_Bool 
# 251 "./src/ftest/ftest.h"
expected_GT_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 260 "./src/ftest/ftest.h"

# 260 "./src/ftest/ftest.h" 3 4
_Bool 
# 260 "./src/ftest/ftest.h"
expected_LE_TYPE_CHAR(char var1, char var2); 
# 260 "./src/ftest/ftest.h" 3 4
_Bool 
# 260 "./src/ftest/ftest.h"
expected_LE_name_TYPE_CHAR(char var1, char var2, const char *name);

# 261 "./src/ftest/ftest.h" 3 4
_Bool 
# 261 "./src/ftest/ftest.h"
expected_LE_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 261 "./src/ftest/ftest.h" 3 4
_Bool 
# 261 "./src/ftest/ftest.h"
expected_LE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 262 "./src/ftest/ftest.h" 3 4
_Bool 
# 262 "./src/ftest/ftest.h"
expected_LE_TYPE_INT(int var1, int var2); 
# 262 "./src/ftest/ftest.h" 3 4
_Bool 
# 262 "./src/ftest/ftest.h"
expected_LE_name_TYPE_INT(int var1, int var2, const char *name);

# 263 "./src/ftest/ftest.h" 3 4
_Bool 
# 263 "./src/ftest/ftest.h"
expected_LE_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 263 "./src/ftest/ftest.h" 3 4
_Bool 
# 263 "./src/ftest/ftest.h"
expected_LE_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 264 "./src/ftest/ftest.h" 3 4
_Bool 
# 264 "./src/ftest/ftest.h"
expected_LE_TYPE_L_INT(long int var1, long int var2); 
# 264 "./src/ftest/ftest.h" 3 4
_Bool 
# 264 "./src/ftest/ftest.h"
expected_LE_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 265 "./src/ftest/ftest.h" 3 4
_Bool 
# 265 "./src/ftest/ftest.h"
expected_LE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 265 "./src/ftest/ftest.h" 3 4
_Bool 
# 265 "./src/ftest/ftest.h"
expected_LE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 266 "./src/ftest/ftest.h" 3 4
_Bool 
# 266 "./src/ftest/ftest.h"
expected_LE_TYPE_SIZE_T(size_t var1, size_t var2); 
# 266 "./src/ftest/ftest.h" 3 4
_Bool 
# 266 "./src/ftest/ftest.h"
expected_LE_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 267 "./src/ftest/ftest.h" 3 4
_Bool 
# 267 "./src/ftest/ftest.h"
expected_LE_TYPE_FLOAT(float var1, float var2); 
# 267 "./src/ftest/ftest.h" 3 4
_Bool 
# 267 "./src/ftest/ftest.h"
expected_LE_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 268 "./src/ftest/ftest.h" 3 4
_Bool 
# 268 "./src/ftest/ftest.h"
expected_LE_TYPE_DOUBLE(double var1, double var2); 
# 268 "./src/ftest/ftest.h" 3 4
_Bool 
# 268 "./src/ftest/ftest.h"
expected_LE_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 269 "./src/ftest/ftest.h" 3 4
_Bool 
# 269 "./src/ftest/ftest.h"
expected_LE_TYPE_L_DOUBLE(long double var1, long double var2); 
# 269 "./src/ftest/ftest.h" 3 4
_Bool 
# 269 "./src/ftest/ftest.h"
expected_LE_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 270 "./src/ftest/ftest.h" 3 4
_Bool 
# 270 "./src/ftest/ftest.h"
expected_LE_TYPE_STRING(char* var1, char* var2); 
# 270 "./src/ftest/ftest.h" 3 4
_Bool 
# 270 "./src/ftest/ftest.h"
expected_LE_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 279 "./src/ftest/ftest.h"

# 279 "./src/ftest/ftest.h" 3 4
_Bool 
# 279 "./src/ftest/ftest.h"
expected_GE_TYPE_CHAR(char var1, char var2); 
# 279 "./src/ftest/ftest.h" 3 4
_Bool 
# 279 "./src/ftest/ftest.h"
expected_GE_name_TYPE_CHAR(char var1, char var2, const char *name);

# 280 "./src/ftest/ftest.h" 3 4
_Bool 
# 280 "./src/ftest/ftest.h"
expected_GE_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 280 "./src/ftest/ftest.h" 3 4
_Bool 
# 280 "./src/ftest/ftest.h"
expected_GE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 281 "./src/ftest/ftest.h" 3 4
_Bool 
# 281 "./src/ftest/ftest.h"
expected_GE_TYPE_INT(int var1, int var2); 
# 281 "./src/ftest/ftest.h" 3 4
_Bool 
# 281 "./src/ftest/ftest.h"
expected_GE_name_TYPE_INT(int var1, int var2, const char *name);

# 282 "./src/ftest/ftest.h" 3 4
_Bool 
# 282 "./src/ftest/ftest.h"
expected_GE_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 282 "./src/ftest/ftest.h" 3 4
_Bool 
# 282 "./src/ftest/ftest.h"
expected_GE_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 283 "./src/ftest/ftest.h" 3 4
_Bool 
# 283 "./src/ftest/ftest.h"
expected_GE_TYPE_L_INT(long int var1, long int var2); 
# 283 "./src/ftest/ftest.h" 3 4
_Bool 
# 283 "./src/ftest/ftest.h"
expected_GE_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 284 "./src/ftest/ftest.h" 3 4
_Bool 
# 284 "./src/ftest/ftest.h"
expected_GE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 284 "./src/ftest/ftest.h" 3 4
_Bool 
# 284 "./src/ftest/ftest.h"
expected_GE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 285 "./src/ftest/ftest.h" 3 4
_Bool 
# 285 "./src/ftest/ftest.h"
expected_GE_TYPE_SIZE_T(size_t var1, size_t var2); 
# 285 "./src/ftest/ftest.h" 3 4
_Bool 
# 285 "./src/ftest/ftest.h"
expected_GE_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 286 "./src/ftest/ftest.h" 3 4
_Bool 
# 286 "./src/ftest/ftest.h"
expected_GE_TYPE_FLOAT(float var1, float var2); 
# 286 "./src/ftest/ftest.h" 3 4
_Bool 
# 286 "./src/ftest/ftest.h"
expected_GE_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 287 "./src/ftest/ftest.h" 3 4
_Bool 
# 287 "./src/ftest/ftest.h"
expected_GE_TYPE_DOUBLE(double var1, double var2); 
# 287 "./src/ftest/ftest.h" 3 4
_Bool 
# 287 "./src/ftest/ftest.h"
expected_GE_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 288 "./src/ftest/ftest.h" 3 4
_Bool 
# 288 "./src/ftest/ftest.h"
expected_GE_TYPE_L_DOUBLE(long double var1, long double var2); 
# 288 "./src/ftest/ftest.h" 3 4
_Bool 
# 288 "./src/ftest/ftest.h"
expected_GE_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 289 "./src/ftest/ftest.h" 3 4
_Bool 
# 289 "./src/ftest/ftest.h"
expected_GE_TYPE_STRING(char* var1, char* var2); 
# 289 "./src/ftest/ftest.h" 3 4
_Bool 
# 289 "./src/ftest/ftest.h"
expected_GE_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 298 "./src/ftest/ftest.h"

# 298 "./src/ftest/ftest.h" 3 4
_Bool 
# 298 "./src/ftest/ftest.h"
expected_NE_TYPE_CHAR(char var1, char var2); 
# 298 "./src/ftest/ftest.h" 3 4
_Bool 
# 298 "./src/ftest/ftest.h"
expected_NE_name_TYPE_CHAR(char var1, char var2, const char *name);

# 299 "./src/ftest/ftest.h" 3 4
_Bool 
# 299 "./src/ftest/ftest.h"
expected_NE_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 299 "./src/ftest/ftest.h" 3 4
_Bool 
# 299 "./src/ftest/ftest.h"
expected_NE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 300 "./src/ftest/ftest.h" 3 4
_Bool 
# 300 "./src/ftest/ftest.h"
expected_NE_TYPE_INT(int var1, int var2); 
# 300 "./src/ftest/ftest.h" 3 4
_Bool 
# 300 "./src/ftest/ftest.h"
expected_NE_name_TYPE_INT(int var1, int var2, const char *name);

# 301 "./src/ftest/ftest.h" 3 4
_Bool 
# 301 "./src/ftest/ftest.h"
expected_NE_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 301 "./src/ftest/ftest.h" 3 4
_Bool 
# 301 "./src/ftest/ftest.h"
expected_NE_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 302 "./src/ftest/ftest.h" 3 4
_Bool 
# 302 "./src/ftest/ftest.h"
expected_NE_TYPE_L_INT(long int var1, long int var2); 
# 302 "./src/ftest/ftest.h" 3 4
_Bool 
# 302 "./src/ftest/ftest.h"
expected_NE_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 303 "./src/ftest/ftest.h" 3 4
_Bool 
# 303 "./src/ftest/ftest.h"
expected_NE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 303 "./src/ftest/ftest.h" 3 4
_Bool 
# 303 "./src/ftest/ftest.h"
expected_NE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 304 "./src/ftest/ftest.h" 3 4
_Bool 
# 304 "./src/ftest/ftest.h"
expected_NE_TYPE_SIZE_T(size_t var1, size_t var2); 
# 304 "./src/ftest/ftest.h" 3 4
_Bool 
# 304 "./src/ftest/ftest.h"
expected_NE_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 305 "./src/ftest/ftest.h" 3 4
_Bool 
# 305 "./src/ftest/ftest.h"
expected_NE_TYPE_FLOAT(float var1, float var2); 
# 305 "./src/ftest/ftest.h" 3 4
_Bool 
# 305 "./src/ftest/ftest.h"
expected_NE_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 306 "./src/ftest/ftest.h" 3 4
_Bool 
# 306 "./src/ftest/ftest.h"
expected_NE_TYPE_DOUBLE(double var1, double var2); 
# 306 "./src/ftest/ftest.h" 3 4
_Bool 
# 306 "./src/ftest/ftest.h"
expected_NE_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 307 "./src/ftest/ftest.h" 3 4
_Bool 
# 307 "./src/ftest/ftest.h"
expected_NE_TYPE_L_DOUBLE(long double var1, long double var2); 
# 307 "./src/ftest/ftest.h" 3 4
_Bool 
# 307 "./src/ftest/ftest.h"
expected_NE_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 308 "./src/ftest/ftest.h" 3 4
_Bool 
# 308 "./src/ftest/ftest.h"
expected_NE_TYPE_STRING(char* var1, char* var2); 
# 308 "./src/ftest/ftest.h" 3 4
_Bool 
# 308 "./src/ftest/ftest.h"
expected_NE_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 13 "test/is_good.c" 2
# 1 "./src/fmock/fmock.h" 1
# 11 "./src/fmock/fmock.h"
struct func_mock_info_struct{
  long id;
  char *str_namefunc;
  char *str_conditions;
  int expect_call;
  long init_times_left;
  long times_left;
  struct func_mock_info_struct *next;
};

int parse_count_args_(char *input);
void append_fmock_to_global(struct func_mock_info_struct **f_mock_global, struct func_mock_info_struct *f_mock);
# 14 "test/is_good.c" 2

# 1 "./src/permutation_t/permutation_t.h" 1




# 1 "./src/set_theoric_t/set_theoric_t.h" 1
# 17 "./src/set_theoric_t/set_theoric_t.h"
struct SET_THEORIC_TYPE_U_CHAR{ unsigned char id; unsigned char *set; }; typedef struct SET_THEORIC_TYPE_U_CHAR SET_THEORIC_TYPE_U_CHAR; SET_THEORIC_TYPE_U_CHAR * CREATE_SET_THEORIC_TYPE_U_CHAR(size_t id ); 
# 17 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 17 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_U_CHAR(SET_THEORIC_TYPE_U_CHAR *st);
struct SET_THEORIC_TYPE_U_INT{ unsigned int id; unsigned int *set; }; typedef struct SET_THEORIC_TYPE_U_INT SET_THEORIC_TYPE_U_INT; SET_THEORIC_TYPE_U_INT * CREATE_SET_THEORIC_TYPE_U_INT(size_t id ); 
# 18 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 18 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_U_INT(SET_THEORIC_TYPE_U_INT *st);
struct SET_THEORIC_TYPE_U_L_INT{ unsigned long int id; unsigned long int *set; }; typedef struct SET_THEORIC_TYPE_U_L_INT SET_THEORIC_TYPE_U_L_INT; SET_THEORIC_TYPE_U_L_INT * CREATE_SET_THEORIC_TYPE_U_L_INT(size_t id ); 
# 19 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 19 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_U_L_INT(SET_THEORIC_TYPE_U_L_INT *st);
struct SET_THEORIC_TYPE_SIZE_T{ size_t id; size_t *set; }; typedef struct SET_THEORIC_TYPE_SIZE_T SET_THEORIC_TYPE_SIZE_T; SET_THEORIC_TYPE_SIZE_T * CREATE_SET_THEORIC_TYPE_SIZE_T(size_t id ); 
# 20 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 20 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_SIZE_T(SET_THEORIC_TYPE_SIZE_T *st);
# 6 "./src/permutation_t/permutation_t.h" 2
# 23 "./src/permutation_t/permutation_t.h"
struct PERMUTATION_TYPE_SIZE_T{ size_t size; size_t * perm; }; typedef struct PERMUTATION_TYPE_SIZE_T PERMUTATION_TYPE_SIZE_T; PERMUTATION_TYPE_SIZE_T * CREATE_PERMUTATION_TYPE_SIZE_T(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_SIZE_T(const PERMUTATION_TYPE_SIZE_T *p );
struct PERMUTATION_TYPE_CHAR{ size_t size; char * perm; }; typedef struct PERMUTATION_TYPE_CHAR PERMUTATION_TYPE_CHAR; PERMUTATION_TYPE_CHAR * CREATE_PERMUTATION_TYPE_CHAR(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_CHAR(const PERMUTATION_TYPE_CHAR *p );
struct PERMUTATION_TYPE_U_CHAR{ size_t size; unsigned char * perm; }; typedef struct PERMUTATION_TYPE_U_CHAR PERMUTATION_TYPE_U_CHAR; PERMUTATION_TYPE_U_CHAR * CREATE_PERMUTATION_TYPE_U_CHAR(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_CHAR(const PERMUTATION_TYPE_U_CHAR *p );
struct PERMUTATION_TYPE_INT{ size_t size; int * perm; }; typedef struct PERMUTATION_TYPE_INT PERMUTATION_TYPE_INT; PERMUTATION_TYPE_INT * CREATE_PERMUTATION_TYPE_INT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_INT(const PERMUTATION_TYPE_INT *p );
struct PERMUTATION_TYPE_U_INT{ size_t size; unsigned int * perm; }; typedef struct PERMUTATION_TYPE_U_INT PERMUTATION_TYPE_U_INT; PERMUTATION_TYPE_U_INT * CREATE_PERMUTATION_TYPE_U_INT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_INT(const PERMUTATION_TYPE_U_INT *p );
struct PERMUTATION_TYPE_L_INT{ size_t size; long int * perm; }; typedef struct PERMUTATION_TYPE_L_INT PERMUTATION_TYPE_L_INT; PERMUTATION_TYPE_L_INT * CREATE_PERMUTATION_TYPE_L_INT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_L_INT(const PERMUTATION_TYPE_L_INT *p );
struct PERMUTATION_TYPE_U_L_INT{ size_t size; unsigned long int * perm; }; typedef struct PERMUTATION_TYPE_U_L_INT PERMUTATION_TYPE_U_L_INT; PERMUTATION_TYPE_U_L_INT * CREATE_PERMUTATION_TYPE_U_L_INT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_L_INT(const PERMUTATION_TYPE_U_L_INT *p );
struct PERMUTATION_TYPE_FLOAT{ size_t size; float * perm; }; typedef struct PERMUTATION_TYPE_FLOAT PERMUTATION_TYPE_FLOAT; PERMUTATION_TYPE_FLOAT * CREATE_PERMUTATION_TYPE_FLOAT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_FLOAT(const PERMUTATION_TYPE_FLOAT *p );
struct PERMUTATION_TYPE_DOUBLE{ size_t size; double * perm; }; typedef struct PERMUTATION_TYPE_DOUBLE PERMUTATION_TYPE_DOUBLE; PERMUTATION_TYPE_DOUBLE * CREATE_PERMUTATION_TYPE_DOUBLE(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_DOUBLE(const PERMUTATION_TYPE_DOUBLE *p );
struct PERMUTATION_TYPE_L_DOUBLE{ size_t size; long double * perm; }; typedef struct PERMUTATION_TYPE_L_DOUBLE PERMUTATION_TYPE_L_DOUBLE; PERMUTATION_TYPE_L_DOUBLE * CREATE_PERMUTATION_TYPE_L_DOUBLE(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_L_DOUBLE(const PERMUTATION_TYPE_L_DOUBLE *p );
struct PERMUTATION_TYPE_STRING{ size_t size; char* * perm; }; typedef struct PERMUTATION_TYPE_STRING PERMUTATION_TYPE_STRING; PERMUTATION_TYPE_STRING * CREATE_PERMUTATION_TYPE_STRING(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_STRING(const PERMUTATION_TYPE_STRING *p );





# 38 "./src/permutation_t/permutation_t.h" 3 4
_Bool 
# 38 "./src/permutation_t/permutation_t.h"
IS_PERMUTATION_SET_THEORIC_TYPE_U_CHAR(const PERMUTATION_TYPE_U_CHAR *p);

# 39 "./src/permutation_t/permutation_t.h" 3 4
_Bool 
# 39 "./src/permutation_t/permutation_t.h"
IS_PERMUTATION_SET_THEORIC_TYPE_U_INT(const PERMUTATION_TYPE_U_INT *p);

# 40 "./src/permutation_t/permutation_t.h" 3 4
_Bool 
# 40 "./src/permutation_t/permutation_t.h"
IS_PERMUTATION_SET_THEORIC_TYPE_U_L_INT(const PERMUTATION_TYPE_U_L_INT *p);

# 41 "./src/permutation_t/permutation_t.h" 3 4
_Bool 
# 41 "./src/permutation_t/permutation_t.h"
IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(const PERMUTATION_TYPE_SIZE_T *p);
# 16 "test/is_good.c" 2

void TEST_size_permutation2____0(void); __attribute__((constructor)) void append_test_size_permutation20(void){ append_func(TEST_size_permutation2____0,"TEST(size_permutation2): test N° 0|"); } void TEST_size_permutation2____0(void){
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 18 "test/is_good.c" 3 4
 stdout
# 18 "test/is_good.c"
 ,"another size_permutation2 again\n"); } else{ fprintf(f_ou_th[id_thread], "another size_permutation2 again\n"); } } else{ fprintf(
# 18 "test/is_good.c" 3 4
 stdout
# 18 "test/is_good.c"
 , "another size_permutation2 again\n"); } } else{ fprintf(
# 18 "test/is_good.c" 3 4
 stdout
# 18 "test/is_good.c"
 , "another size_permutation2 again\n"); } }while(0);
  do{ if(is_parallel_nb==0){ if(expected_true_f(
# 19 "test/is_good.c" 3 4
 0
# 19 "test/is_good.c"
 )){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 19, __func__, "0", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 19, __func__, "0", "false", "true"); } } else{ fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 19, __func__, "0", "false", "true"); } } else{ fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 19, __func__, "0", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } } else{ if(expected_true_f_name(
# 19 "test/is_good.c" 3 4
 0
# 19 "test/is_good.c"
 , __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 19, __func__, "0", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 19, __func__, "0", "false", "true"); } } else{ fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 19, __func__, "0", "false", "true"); } } else{ fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 19, __func__, "0", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 19 "test/is_good.c" 3 4
 stdout
# 19 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
}

void TEST_size_permutation____1(void); __attribute__((constructor)) void append_test_size_permutation1(void){ append_func(TEST_size_permutation____1,"TEST(size_permutation): test N° 1|"); } void TEST_size_permutation____1(void)
{
  PERMUTATION_TYPE_CHAR *p = CREATE_PERMUTATION_TYPE_CHAR(3);

  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 26 "test/is_good.c" 3 4
 stdout
# 26 "test/is_good.c"
 ," size = %lu \n",p->size); } else{ fprintf(f_ou_th[id_thread], " size = %lu \n",p->size); } } else{ fprintf(
# 26 "test/is_good.c" 3 4
 stdout
# 26 "test/is_good.c"
 , " size = %lu \n",p->size); } } else{ fprintf(
# 26 "test/is_good.c" 3 4
 stdout
# 26 "test/is_good.c"
 , " size = %lu \n",p->size); } }while(0);
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_L_INT(p->size, 3)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 27, __func__, "p->size","==","3","p->size", TYPE_L_INT_TO_STR(p->size), "3", TYPE_L_INT_TO_STR(3)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 27, __func__, "p->size","==","3","p->size", TYPE_L_INT_TO_STR(p->size), "3", TYPE_L_INT_TO_STR(3)); } } else{ fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 27, __func__, "p->size","==","3","p->size", TYPE_L_INT_TO_STR(p->size), "3", TYPE_L_INT_TO_STR(3)); } } else{ fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 27, __func__, "p->size","==","3","p->size", TYPE_L_INT_TO_STR(p->size), "3", TYPE_L_INT_TO_STR(3)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }else { if(expected_EQ_name_TYPE_L_INT(p->size, 3, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 27, __func__, "p->size","==","3","p->size", TYPE_L_INT_TO_STR(p->size), "3", TYPE_L_INT_TO_STR(3)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 27, __func__, "p->size","==","3","p->size", TYPE_L_INT_TO_STR(p->size), "3", TYPE_L_INT_TO_STR(3)); } } else{ fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 27, __func__, "p->size","==","3","p->size", TYPE_L_INT_TO_STR(p->size), "3", TYPE_L_INT_TO_STR(3)); } } else{ fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 27, __func__, "p->size","==","3","p->size", TYPE_L_INT_TO_STR(p->size), "3", TYPE_L_INT_TO_STR(3)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 27 "test/is_good.c" 3 4
 stdout
# 27 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }}while(0);;
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 28 "test/is_good.c" 3 4
 stdout
# 28 "test/is_good.c"
 ,"test size_permutation2\n"); } else{ fprintf(f_ou_th[id_thread], "test size_permutation2\n"); } } else{ fprintf(
# 28 "test/is_good.c" 3 4
 stdout
# 28 "test/is_good.c"
 , "test size_permutation2\n"); } } else{ fprintf(
# 28 "test/is_good.c" 3 4
 stdout
# 28 "test/is_good.c"
 , "test size_permutation2\n"); } }while(0);
}


void TEST_size_permutation2____2(void); __attribute__((constructor)) void append_test_size_permutation22(void){ append_func(TEST_size_permutation2____2,"TEST(size_permutation2): test N° 2|"); } void TEST_size_permutation2____2(void){
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 33 "test/is_good.c" 3 4
 stdout
# 33 "test/is_good.c"
 ,"another size_permutation2 again false\n"); } else{ fprintf(f_ou_th[id_thread], "another size_permutation2 again false\n"); } } else{ fprintf(
# 33 "test/is_good.c" 3 4
 stdout
# 33 "test/is_good.c"
 , "another size_permutation2 again false\n"); } } else{ fprintf(
# 33 "test/is_good.c" 3 4
 stdout
# 33 "test/is_good.c"
 , "another size_permutation2 again false\n"); } }while(0);
  
# 34 "test/is_good.c" 3 4
 _Bool 
# 34 "test/is_good.c"
      val_bool = 
# 34 "test/is_good.c" 3 4
                 0
# 34 "test/is_good.c"
                      ;
  do{ if(is_parallel_nb==0){ if(expected_true_f(val_bool)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 35, __func__, "val_bool", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 35, __func__, "val_bool", "false", "true"); } } else{ fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 35, __func__, "val_bool", "false", "true"); } } else{ fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 35, __func__, "val_bool", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } } else{ if(expected_true_f_name(val_bool, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 35, __func__, "val_bool", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 35, __func__, "val_bool", "false", "true"); } } else{ fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 35, __func__, "val_bool", "false", "true"); } } else{ fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 35, __func__, "val_bool", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 35 "test/is_good.c" 3 4
 stdout
# 35 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
}
void TEST_size_permutation2____3(void); __attribute__((constructor)) void append_test_size_permutation23(void){ append_func(TEST_size_permutation2____3,"TEST(size_permutation2): test N° 3|"); } void TEST_size_permutation2____3(void)
{
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 39 "test/is_good.c" 3 4
 stdout
# 39 "test/is_good.c"
 ,"test size_permutation2\n"); } else{ fprintf(f_ou_th[id_thread], "test size_permutation2\n"); } } else{ fprintf(
# 39 "test/is_good.c" 3 4
 stdout
# 39 "test/is_good.c"
 , "test size_permutation2\n"); } } else{ fprintf(
# 39 "test/is_good.c" 3 4
 stdout
# 39 "test/is_good.c"
 , "test size_permutation2\n"); } }while(0);
  
# 40 "test/is_good.c" 3 4
 _Bool 
# 40 "test/is_good.c"
      val_bool = 
# 40 "test/is_good.c" 3 4
                 1
# 40 "test/is_good.c"
                     ;
  do{ if(is_parallel_nb==0){ if(expected_false_f(val_bool)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 41, __func__, "val_bool", "true", "false"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 41, __func__, "val_bool", "true", "false"); } } else{ fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 41, __func__, "val_bool", "true", "false"); } } else{ fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 41, __func__, "val_bool", "true", "false"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } } else{ if(expected_false_f_name(val_bool, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 41, __func__, "val_bool", "true", "false"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 41, __func__, "val_bool", "true", "false"); } } else{ fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 41, __func__, "val_bool", "true", "false"); } } else{ fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 41, __func__, "val_bool", "true", "false"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 41 "test/is_good.c" 3 4
 stdout
# 41 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;







}
void TEST_float_equal____4(void); __attribute__((constructor)) void append_test_float_equal4(void){ append_func(TEST_float_equal____4,"TEST(float_equal): test N° 4|"); } void TEST_float_equal____4(void){
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 51 "test/is_good.c" 3 4
 stdout
# 51 "test/is_good.c"
 ,"another size_permutation2 float\n"); } else{ fprintf(f_ou_th[id_thread], "another size_permutation2 float\n"); } } else{ fprintf(
# 51 "test/is_good.c" 3 4
 stdout
# 51 "test/is_good.c"
 , "another size_permutation2 float\n"); } } else{ fprintf(
# 51 "test/is_good.c" 3 4
 stdout
# 51 "test/is_good.c"
 , "another size_permutation2 float\n"); } }while(0);
  do{ if(is_parallel_nb==0){ if(expected_true_f(
# 52 "test/is_good.c" 3 4
 1
# 52 "test/is_good.c"
 )){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 52, __func__, "1", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 52, __func__, "1", "false", "true"); } } else{ fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 52, __func__, "1", "false", "true"); } } else{ fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 52, __func__, "1", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } } else{ if(expected_true_f_name(
# 52 "test/is_good.c" 3 4
 1
# 52 "test/is_good.c"
 , __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 52, __func__, "1", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 52, __func__, "1", "false", "true"); } } else{ fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 52, __func__, "1", "false", "true"); } } else{ fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 52, __func__, "1", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 52 "test/is_good.c" 3 4
 stdout
# 52 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
  float a = 1.00001f;
  float b = 1.00001f;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_FLOAT(a, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 55, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 55, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 55, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 55, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }else { if(expected_EQ_name_TYPE_FLOAT(a, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 55, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 55, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 55, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 55, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 55 "test/is_good.c" 3 4
 stdout
# 55 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
  b=1.0000101f;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_FLOAT(a, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 57, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 57, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 57, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 57, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }else { if(expected_EQ_name_TYPE_FLOAT(a, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 57, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 57, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 57, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 57, __func__, "a","==","b","a", TYPE_FLOAT_TO_STR(a), "b", TYPE_FLOAT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 57 "test/is_good.c" 3 4
 stdout
# 57 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_FLOAT(1.0000102f, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 58, __func__, "1.0000102f","==","b","1.0000102f", TYPE_FLOAT_TO_STR(1.0000102f), "b", TYPE_FLOAT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 58, __func__, "1.0000102f","==","b","1.0000102f", TYPE_FLOAT_TO_STR(1.0000102f), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 58, __func__, "1.0000102f","==","b","1.0000102f", TYPE_FLOAT_TO_STR(1.0000102f), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 58, __func__, "1.0000102f","==","b","1.0000102f", TYPE_FLOAT_TO_STR(1.0000102f), "b", TYPE_FLOAT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }else { if(expected_EQ_name_TYPE_FLOAT(1.0000102f, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 58, __func__, "1.0000102f","==","b","1.0000102f", TYPE_FLOAT_TO_STR(1.0000102f), "b", TYPE_FLOAT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 58, __func__, "1.0000102f","==","b","1.0000102f", TYPE_FLOAT_TO_STR(1.0000102f), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 58, __func__, "1.0000102f","==","b","1.0000102f", TYPE_FLOAT_TO_STR(1.0000102f), "b", TYPE_FLOAT_TO_STR(b)); } } else{ fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 58, __func__, "1.0000102f","==","b","1.0000102f", TYPE_FLOAT_TO_STR(1.0000102f), "b", TYPE_FLOAT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 58 "test/is_good.c" 3 4
 stdout
# 58 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
}
void TEST_double_equal____5(void); __attribute__((constructor)) void append_test_double_equal5(void){ append_func(TEST_double_equal____5,"TEST(double_equal): test N° 5|"); } void TEST_double_equal____5(void){
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 61 "test/is_good.c" 3 4
 stdout
# 61 "test/is_good.c"
 ,"another size_permutation2 double\n"); } else{ fprintf(f_ou_th[id_thread], "another size_permutation2 double\n"); } } else{ fprintf(
# 61 "test/is_good.c" 3 4
 stdout
# 61 "test/is_good.c"
 , "another size_permutation2 double\n"); } } else{ fprintf(
# 61 "test/is_good.c" 3 4
 stdout
# 61 "test/is_good.c"
 , "another size_permutation2 double\n"); } }while(0);
  do{ if(is_parallel_nb==0){ if(expected_true_f(
# 62 "test/is_good.c" 3 4
 1
# 62 "test/is_good.c"
 )){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 62, __func__, "1", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 62, __func__, "1", "false", "true"); } } else{ fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 62, __func__, "1", "false", "true"); } } else{ fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 62, __func__, "1", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } } else{ if(expected_true_f_name(
# 62 "test/is_good.c" 3 4
 1
# 62 "test/is_good.c"
 , __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 62, __func__, "1", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 62, __func__, "1", "false", "true"); } } else{ fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 62, __func__, "1", "false", "true"); } } else{ fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 62, __func__, "1", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 62 "test/is_good.c" 3 4
 stdout
# 62 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
  double a = 1.00000001;
  double b = 1.00000001;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_DOUBLE(a, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 65, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 65, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 65, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 65, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }else { if(expected_EQ_name_TYPE_DOUBLE(a, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 65, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 65, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 65, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 65, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 65 "test/is_good.c" 3 4
 stdout
# 65 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
  b=1.00000001000000001;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_DOUBLE(a, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 67, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 67, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 67, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 67, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }else { if(expected_EQ_name_TYPE_DOUBLE(a, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 67, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 67, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 67, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 67, __func__, "a","==","b","a", TYPE_DOUBLE_TO_STR(a), "b", TYPE_DOUBLE_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 67 "test/is_good.c" 3 4
 stdout
# 67 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_DOUBLE(1.0000000100000002, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 68, __func__, "1.0000000100000002","==","b","1.0000000100000002", TYPE_DOUBLE_TO_STR(1.0000000100000002), "b", TYPE_DOUBLE_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 68, __func__, "1.0000000100000002","==","b","1.0000000100000002", TYPE_DOUBLE_TO_STR(1.0000000100000002), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 68, __func__, "1.0000000100000002","==","b","1.0000000100000002", TYPE_DOUBLE_TO_STR(1.0000000100000002), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 68, __func__, "1.0000000100000002","==","b","1.0000000100000002", TYPE_DOUBLE_TO_STR(1.0000000100000002), "b", TYPE_DOUBLE_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }else { if(expected_EQ_name_TYPE_DOUBLE(1.0000000100000002, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 68, __func__, "1.0000000100000002","==","b","1.0000000100000002", TYPE_DOUBLE_TO_STR(1.0000000100000002), "b", TYPE_DOUBLE_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 68, __func__, "1.0000000100000002","==","b","1.0000000100000002", TYPE_DOUBLE_TO_STR(1.0000000100000002), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 68, __func__, "1.0000000100000002","==","b","1.0000000100000002", TYPE_DOUBLE_TO_STR(1.0000000100000002), "b", TYPE_DOUBLE_TO_STR(b)); } } else{ fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 68, __func__, "1.0000000100000002","==","b","1.0000000100000002", TYPE_DOUBLE_TO_STR(1.0000000100000002), "b", TYPE_DOUBLE_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 68 "test/is_good.c" 3 4
 stdout
# 68 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
}

void TEST_____6(void); __attribute__((constructor)) void append_test_6(void){ append_func(TEST_____6,"TEST(): test N° 6|"); } void TEST_____6(void){
  unsigned char c = 'a';

  do { if (0) fprintf(
# 74 "test/is_good.c" 3 4
 stderr
# 74 "test/is_good.c"
 , "%s:%d:%s(): " "another size_permutation2, a = %c\n", "test/is_good.c", 74, __func__, c); } while (0);
  do{ if(is_parallel_nb==0){ if(expected_false_f(
# 75 "test/is_good.c" 3 4
 1
# 75 "test/is_good.c"
 )){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 75, __func__, "1", "true", "false"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 75, __func__, "1", "true", "false"); } } else{ fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 75, __func__, "1", "true", "false"); } } else{ fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 75, __func__, "1", "true", "false"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } } else{ if(expected_false_f_name(
# 75 "test/is_good.c" 3 4
 1
# 75 "test/is_good.c"
 , __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 75, __func__, "1", "true", "false"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 75, __func__, "1", "true", "false"); } } else{ fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 75, __func__, "1", "true", "false"); } } else{ fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 75, __func__, "1", "true", "false"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 75 "test/is_good.c" 3 4
 stdout
# 75 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
  do{ if(is_parallel_nb==0){ if(expected_true_f(
# 76 "test/is_good.c" 3 4
 1
# 76 "test/is_good.c"
 )){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 76, __func__, "1", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 76, __func__, "1", "false", "true"); } } else{ fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 76, __func__, "1", "false", "true"); } } else{ fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 76, __func__, "1", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } } else{ if(expected_true_f_name(
# 76 "test/is_good.c" 3 4
 1
# 76 "test/is_good.c"
 , __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 76, __func__, "1", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 76, __func__, "1", "false", "true"); } } else{ fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 76, __func__, "1", "false", "true"); } } else{ fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 76, __func__, "1", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 76 "test/is_good.c" 3 4
 stdout
# 76 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
  do{ if(is_parallel_nb==0){ if(expected_true_f(
# 77 "test/is_good.c" 3 4
 1
# 77 "test/is_good.c"
 )){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 77, __func__, "1", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 77, __func__, "1", "false", "true"); } } else{ fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 77, __func__, "1", "false", "true"); } } else{ fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 77, __func__, "1", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } } else{ if(expected_true_f_name(
# 77 "test/is_good.c" 3 4
 1
# 77 "test/is_good.c"
 , __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 77, __func__, "1", "false", "true"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 77, __func__, "1", "false", "true"); } } else{ fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 77, __func__, "1", "false", "true"); } } else{ fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nValue of: %s\nActual: %s\nExpected: %s\n\n", "test/is_good.c", 77, __func__, "1", "false", "true"); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 77 "test/is_good.c" 3 4
 stdout
# 77 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
}

void TEST_____7(void); __attribute__((constructor)) void append_test_7(void){ append_func(TEST_____7,"TEST(): test N° 7|"); } void TEST_____7(void){
  sleep(3);
  int a = 5;
  long b = 5;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_L_INT(a, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 84, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 84, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 84, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 84, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }else { if(expected_EQ_name_TYPE_L_INT(a, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 84, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 84, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 84, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 84, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 84 "test/is_good.c" 3 4
 stdout
# 84 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;
  a=4;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_L_INT(a, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 86, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 86, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 86, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 86, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }else { if(expected_EQ_name_TYPE_L_INT(a, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 86, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 86, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 86, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 86, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 86 "test/is_good.c" 3 4
 stdout
# 86 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(1) return; } }}while(0);;

}

void TEST_expect____8(void); __attribute__((constructor)) void append_test_expect8(void){ append_func(TEST_expect____8,"TEST(expect): test N° 8|"); } void TEST_expect____8(void){
  sleep(2);
  int a = 5;
  int b = 6;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_L_INT(a, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 94, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 94, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 94, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 94, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }else { if(expected_EQ_name_TYPE_L_INT(a, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 94, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 94, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 94, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 94, __func__, "a","==","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 94 "test/is_good.c" 3 4
 stdout
# 94 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }}while(0);;

  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 96 "test/is_good.c" 3 4
 stdout
# 96 "test/is_good.c"
 , "\033[0;32m" "===== SKIP" "on skip eq string\n" "\033[0m" ); else fprintf(
# 96 "test/is_good.c" 3 4
 stdout
# 96 "test/is_good.c"
 , "===== SKIP" "on skip eq string\n" ); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== SKIP" "on skip eq string\n" "\033[0m" ); else fprintf(f_ou_th[id_thread], "===== SKIP" "on skip eq string\n" ); } } else{ if(!unicolour) fprintf(
# 96 "test/is_good.c" 3 4
 stdout
# 96 "test/is_good.c"
 , "\033[0;32m" "===== SKIP" "on skip eq string\n" "\033[0m" ); else fprintf(
# 96 "test/is_good.c" 3 4
 stdout
# 96 "test/is_good.c"
 , "===== SKIP" "on skip eq string\n" ); } } else{ if(!unicolour) fprintf(
# 96 "test/is_good.c" 3 4
 stdout
# 96 "test/is_good.c"
 , "\033[0;32m" "===== SKIP" "on skip eq string\n" "\033[0m" ); else fprintf(
# 96 "test/is_good.c" 3 4
 stdout
# 96 "test/is_good.c"
 , "===== SKIP" "on skip eq string\n" ); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 96 "test/is_good.c" 3 4
 stdout
# 96 "test/is_good.c"
 , "%s:%d:%s(): " "%s\n\n", "test/is_good.c", 96, __func__, " Skiped"); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "%s\n\n", "test/is_good.c", 96, __func__, " Skiped"); } } else{ fprintf(
# 96 "test/is_good.c" 3 4
 stdout
# 96 "test/is_good.c"
 , "%s:%d:%s(): " "%s\n\n", "test/is_good.c", 96, __func__, " Skiped"); } } else{ fprintf(
# 96 "test/is_good.c" 3 4
 stdout
# 96 "test/is_good.c"
 , "%s:%d:%s(): " "%s\n\n", "test/is_good.c", 96, __func__, " Skiped"); } }while(0); return;;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_STRING("hello", "hello")){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 97, __func__, "\"hello\"","==","\"hello\"","\"hello\"", TYPE_STRING_TO_STR("hello"), "\"hello\"", TYPE_STRING_TO_STR("hello")); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 97, __func__, "\"hello\"","==","\"hello\"","\"hello\"", TYPE_STRING_TO_STR("hello"), "\"hello\"", TYPE_STRING_TO_STR("hello")); } } else{ fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 97, __func__, "\"hello\"","==","\"hello\"","\"hello\"", TYPE_STRING_TO_STR("hello"), "\"hello\"", TYPE_STRING_TO_STR("hello")); } } else{ fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 97, __func__, "\"hello\"","==","\"hello\"","\"hello\"", TYPE_STRING_TO_STR("hello"), "\"hello\"", TYPE_STRING_TO_STR("hello")); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }else { if(expected_EQ_name_TYPE_STRING("hello", "hello", __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 97, __func__, "\"hello\"","==","\"hello\"","\"hello\"", TYPE_STRING_TO_STR("hello"), "\"hello\"", TYPE_STRING_TO_STR("hello")); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 97, __func__, "\"hello\"","==","\"hello\"","\"hello\"", TYPE_STRING_TO_STR("hello"), "\"hello\"", TYPE_STRING_TO_STR("hello")); } } else{ fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 97, __func__, "\"hello\"","==","\"hello\"","\"hello\"", TYPE_STRING_TO_STR("hello"), "\"hello\"", TYPE_STRING_TO_STR("hello")); } } else{ fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 97, __func__, "\"hello\"","==","\"hello\"","\"hello\"", TYPE_STRING_TO_STR("hello"), "\"hello\"", TYPE_STRING_TO_STR("hello")); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 97 "test/is_good.c" 3 4
 stdout
# 97 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }}while(0);;
  float f1 = 1.00019999, f2=1.00019999;
  do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_FLOAT(f1, f2)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 99, __func__, "f1","==","f2","f1", TYPE_FLOAT_TO_STR(f1), "f2", TYPE_FLOAT_TO_STR(f2)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 99, __func__, "f1","==","f2","f1", TYPE_FLOAT_TO_STR(f1), "f2", TYPE_FLOAT_TO_STR(f2)); } } else{ fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 99, __func__, "f1","==","f2","f1", TYPE_FLOAT_TO_STR(f1), "f2", TYPE_FLOAT_TO_STR(f2)); } } else{ fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 99, __func__, "f1","==","f2","f1", TYPE_FLOAT_TO_STR(f1), "f2", TYPE_FLOAT_TO_STR(f2)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }else { if(expected_EQ_name_TYPE_FLOAT(f1, f2, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 99, __func__, "f1","==","f2","f1", TYPE_FLOAT_TO_STR(f1), "f2", TYPE_FLOAT_TO_STR(f2)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 99, __func__, "f1","==","f2","f1", TYPE_FLOAT_TO_STR(f1), "f2", TYPE_FLOAT_TO_STR(f2)); } } else{ fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 99, __func__, "f1","==","f2","f1", TYPE_FLOAT_TO_STR(f1), "f2", TYPE_FLOAT_TO_STR(f2)); } } else{ fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 99, __func__, "f1","==","f2","f1", TYPE_FLOAT_TO_STR(f1), "f2", TYPE_FLOAT_TO_STR(f2)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 99 "test/is_good.c" 3 4
 stdout
# 99 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }}while(0);;

}

void TEST_____9(void); __attribute__((constructor)) void append_test_9(void){ append_func(TEST_____9,"TEST(): test N° 9|"); } void TEST_____9(void){
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 104 "test/is_good.c" 3 4
 stdout
# 104 "test/is_good.c"
 ,"no test, only print\n"); } else{ fprintf(f_ou_th[id_thread], "no test, only print\n"); } } else{ fprintf(
# 104 "test/is_good.c" 3 4
 stdout
# 104 "test/is_good.c"
 , "no test, only print\n"); } } else{ fprintf(
# 104 "test/is_good.c" 3 4
 stdout
# 104 "test/is_good.c"
 , "no test, only print\n"); } }while(0);
}

void TEST_____10(void); __attribute__((constructor)) void append_test_10(void){ append_func(TEST_____10,"TEST(): test N° 10|"); } void TEST_____10(void){
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 108 "test/is_good.c" 3 4
 stdout
# 108 "test/is_good.c"
 ,"no test, only print\n"); } else{ fprintf(f_ou_th[id_thread], "no test, only print\n"); } } else{ fprintf(
# 108 "test/is_good.c" 3 4
 stdout
# 108 "test/is_good.c"
 , "no test, only print\n"); } } else{ fprintf(
# 108 "test/is_good.c" 3 4
 stdout
# 108 "test/is_good.c"
 , "no test, only print\n"); } }while(0);
}

void TEST_____11(void); __attribute__((constructor)) void append_test_11(void){ append_func(TEST_____11,"TEST(): test N° 11|"); } void TEST_____11(void){
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 112 "test/is_good.c" 3 4
 stdout
# 112 "test/is_good.c"
 ,"no test, only print\n"); } else{ fprintf(f_ou_th[id_thread], "no test, only print\n"); } } else{ fprintf(
# 112 "test/is_good.c" 3 4
 stdout
# 112 "test/is_good.c"
 , "no test, only print\n"); } } else{ fprintf(
# 112 "test/is_good.c" 3 4
 stdout
# 112 "test/is_good.c"
 , "no test, only print\n"); } }while(0);
}


void TEST_____12(void); __attribute__((constructor)) void append_test_12(void){ append_func(TEST_____12,"TEST(): test N° 12|"); } void TEST_____12(void){

  PERMUTATION_TYPE_CHAR *p_char = CREATE_PERMUTATION_TYPE_CHAR(6);
  p_char->perm[0]='B';
  p_char->perm[1]='A';
  p_char->perm[2]='Y';
  p_char->perm[3]='C';
  p_char->perm[4]='D';
  p_char->perm[5]='Z';

  PERMUTATION_TYPE_SIZE_T *tr_p_char = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_CHAR(p_char);

  for(int i = 0; i < tr_p_char->size; ++i) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 128 "test/is_good.c" 3 4
                                          stdout
# 128 "test/is_good.c"
                                          ," [%d ]%ld ,",i,tr_p_char->perm[i]); } else{ fprintf(f_ou_th[id_thread], " [%d ]%ld ,",i,tr_p_char->perm[i]); } } else{ fprintf(
# 128 "test/is_good.c" 3 4
                                          stdout
# 128 "test/is_good.c"
                                          , " [%d ]%ld ,",i,tr_p_char->perm[i]); } } else{ fprintf(
# 128 "test/is_good.c" 3 4
                                          stdout
# 128 "test/is_good.c"
                                          , " [%d ]%ld ,",i,tr_p_char->perm[i]); } }while(0);
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 129 "test/is_good.c" 3 4
 stdout
# 129 "test/is_good.c"
 ,"p_char == %s\n",p_char->perm); } else{ fprintf(f_ou_th[id_thread], "p_char == %s\n",p_char->perm); } } else{ fprintf(
# 129 "test/is_good.c" 3 4
 stdout
# 129 "test/is_good.c"
 , "p_char == %s\n",p_char->perm); } } else{ fprintf(
# 129 "test/is_good.c" 3 4
 stdout
# 129 "test/is_good.c"
 , "p_char == %s\n",p_char->perm); } }while(0);
}

void TEST_lessThan____13(void); __attribute__((constructor)) void append_test_lessThan13(void){ append_func(TEST_lessThan____13,"TEST(lessThan): test N° 13|"); } void TEST_lessThan____13(void){
  long int a=1,b=2;
  do{ if(is_parallel_nb == 0){ if(expected_LT_TYPE_L_INT(a, b)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 134, __func__, "a","<","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 134, __func__, "a","<","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 134, __func__, "a","<","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 134, __func__, "a","<","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }else { if(expected_LT_name_TYPE_L_INT(a, b, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 134, __func__, "a","<","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 134, __func__, "a","<","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 134, __func__, "a","<","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } } else{ fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 134, __func__, "a","<","b","a", TYPE_L_INT_TO_STR(a), "b", TYPE_L_INT_TO_STR(b)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 134 "test/is_good.c" 3 4
 stdout
# 134 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }}while(0);;
  do{ if(is_parallel_nb == 0){ if(expected_LT_TYPE_L_INT(b, a)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 135, __func__, "b","<","a","b", TYPE_L_INT_TO_STR(b), "a", TYPE_L_INT_TO_STR(a)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 135, __func__, "b","<","a","b", TYPE_L_INT_TO_STR(b), "a", TYPE_L_INT_TO_STR(a)); } } else{ fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 135, __func__, "b","<","a","b", TYPE_L_INT_TO_STR(b), "a", TYPE_L_INT_TO_STR(a)); } } else{ fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 135, __func__, "b","<","a","b", TYPE_L_INT_TO_STR(b), "a", TYPE_L_INT_TO_STR(a)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }else { if(expected_LT_name_TYPE_L_INT(b, a, __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 135, __func__, "b","<","a","b", TYPE_L_INT_TO_STR(b), "a", TYPE_L_INT_TO_STR(a)); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 135, __func__, "b","<","a","b", TYPE_L_INT_TO_STR(b), "a", TYPE_L_INT_TO_STR(a)); } } else{ fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 135, __func__, "b","<","a","b", TYPE_L_INT_TO_STR(b), "a", TYPE_L_INT_TO_STR(a)); } } else{ fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 135, __func__, "b","<","a","b", TYPE_L_INT_TO_STR(b), "a", TYPE_L_INT_TO_STR(a)); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 135 "test/is_good.c" 3 4
 stdout
# 135 "test/is_good.c"
 , "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }}while(0);;

}

void TEST_sleep____14(void); __attribute__((constructor)) void append_test_sleep14(void){ append_func(TEST_sleep____14,"TEST(sleep): test N° 14|"); } void TEST_sleep____14(void){sleep(2);}
void TEST_sleep____15(void); __attribute__((constructor)) void append_test_sleep15(void){ append_func(TEST_sleep____15,"TEST(sleep): test N° 15|"); } void TEST_sleep____15(void){sleep(2);}
void TEST_sleep____16(void); __attribute__((constructor)) void append_test_sleep16(void){ append_func(TEST_sleep____16,"TEST(sleep): test N° 16|"); } void TEST_sleep____16(void){sleep(2);}
void TEST_sleep____17(void); __attribute__((constructor)) void append_test_sleep17(void){ append_func(TEST_sleep____17,"TEST(sleep): test N° 17|"); } void TEST_sleep____17(void){sleep(1);}
void TEST_sleep____18(void); __attribute__((constructor)) void append_test_sleep18(void){ append_func(TEST_sleep____18,"TEST(sleep): test N° 18|"); } void TEST_sleep____18(void){sleep(1);}
void TEST_sleep____19(void); __attribute__((constructor)) void append_test_sleep19(void){ append_func(TEST_sleep____19,"TEST(sleep): test N° 19|"); } void TEST_sleep____19(void){sleep(1);}
void TEST_sleep____20(void); __attribute__((constructor)) void append_test_sleep20(void){ append_func(TEST_sleep____20,"TEST(sleep): test N° 20|"); } void TEST_sleep____20(void){sleep(1);}
void TEST_sleep____21(void); __attribute__((constructor)) void append_test_sleep21(void){ append_func(TEST_sleep____21,"TEST(sleep): test N° 21|"); } void TEST_sleep____21(void){sleep(1);}
void TEST_sleep____22(void); __attribute__((constructor)) void append_test_sleep22(void){ append_func(TEST_sleep____22,"TEST(sleep): test N° 22|"); } void TEST_sleep____22(void){sleep(1);}
void TEST_sleep____23(void); __attribute__((constructor)) void append_test_sleep23(void){ append_func(TEST_sleep____23,"TEST(sleep): test N° 23|"); } void TEST_sleep____23(void){sleep(1);}
void TEST_sleep____24(void); __attribute__((constructor)) void append_test_sleep24(void){ append_func(TEST_sleep____24,"TEST(sleep): test N° 24|"); } void TEST_sleep____24(void){sleep(1);}
void TEST_sleep____25(void); __attribute__((constructor)) void append_test_sleep25(void){ append_func(TEST_sleep____25,"TEST(sleep): test N° 25|"); } void TEST_sleep____25(void){sleep(1);}
void TEST_sleep____26(void); __attribute__((constructor)) void append_test_sleep26(void){ append_func(TEST_sleep____26,"TEST(sleep): test N° 26|"); } void TEST_sleep____26(void){sleep(1);}
void TEST_sleep____27(void); __attribute__((constructor)) void append_test_sleep27(void){ append_func(TEST_sleep____27,"TEST(sleep): test N° 27|"); } void TEST_sleep____27(void){sleep(1);}
void TEST_sleep____28(void); __attribute__((constructor)) void append_test_sleep28(void){ append_func(TEST_sleep____28,"TEST(sleep): test N° 28|"); } void TEST_sleep____28(void){sleep(1);}
void TEST_sleep____29(void); __attribute__((constructor)) void append_test_sleep29(void){ append_func(TEST_sleep____29,"TEST(sleep): test N° 29|"); } void TEST_sleep____29(void){sleep(1);}
void TEST_sleep____30(void); __attribute__((constructor)) void append_test_sleep30(void){ append_func(TEST_sleep____30,"TEST(sleep): test N° 30|"); } void TEST_sleep____30(void){sleep(1);}
void TEST_sleep____31(void); __attribute__((constructor)) void append_test_sleep31(void){ append_func(TEST_sleep____31,"TEST(sleep): test N° 31|"); } void TEST_sleep____31(void){sleep(1);}
void TEST_sleep____32(void); __attribute__((constructor)) void append_test_sleep32(void){ append_func(TEST_sleep____32,"TEST(sleep): test N° 32|"); } void TEST_sleep____32(void){sleep(1);}

void TEST_sleep____33(void); __attribute__((constructor)) void append_test_sleep33(void){ append_func(TEST_sleep____33,"TEST(sleep): test N° 33|"); } void TEST_sleep____33(void){sleep(1);}
void TEST_sleep____34(void); __attribute__((constructor)) void append_test_sleep34(void){ append_func(TEST_sleep____34,"TEST(sleep): test N° 34|"); } void TEST_sleep____34(void){sleep(1);}
void TEST_sleep____35(void); __attribute__((constructor)) void append_test_sleep35(void){ append_func(TEST_sleep____35,"TEST(sleep): test N° 35|"); } void TEST_sleep____35(void){sleep(1);}
void TEST_sleep____36(void); __attribute__((constructor)) void append_test_sleep36(void){ append_func(TEST_sleep____36,"TEST(sleep): test N° 36|"); } void TEST_sleep____36(void){sleep(1);}
void TEST_sleep____37(void); __attribute__((constructor)) void append_test_sleep37(void){ append_func(TEST_sleep____37,"TEST(sleep): test N° 37|"); } void TEST_sleep____37(void){sleep(1);}
void TEST_sleep____38(void); __attribute__((constructor)) void append_test_sleep38(void){ append_func(TEST_sleep____38,"TEST(sleep): test N° 38|"); } void TEST_sleep____38(void){sleep(1);}
void TEST_sleep____39(void); __attribute__((constructor)) void append_test_sleep39(void){ append_func(TEST_sleep____39,"TEST(sleep): test N° 39|"); } void TEST_sleep____39(void){sleep(1);}
void TEST_sleep____40(void); __attribute__((constructor)) void append_test_sleep40(void){ append_func(TEST_sleep____40,"TEST(sleep): test N° 40|"); } void TEST_sleep____40(void){sleep(1);}
void TEST_sleep____41(void); __attribute__((constructor)) void append_test_sleep41(void){ append_func(TEST_sleep____41,"TEST(sleep): test N° 41|"); } void TEST_sleep____41(void){sleep(1);}
void TEST_sleep____42(void); __attribute__((constructor)) void append_test_sleep42(void){ append_func(TEST_sleep____42,"TEST(sleep): test N° 42|"); } void TEST_sleep____42(void){sleep(1);}
void TEST_sleep____43(void); __attribute__((constructor)) void append_test_sleep43(void){ append_func(TEST_sleep____43,"TEST(sleep): test N° 43|"); } void TEST_sleep____43(void){sleep(1);}
void TEST_sleep____44(void); __attribute__((constructor)) void append_test_sleep44(void){ append_func(TEST_sleep____44,"TEST(sleep): test N° 44|"); } void TEST_sleep____44(void){sleep(1);}


struct list_mock_return_f_mock{ int (*run) (); int (*call_mock_condition) () ; struct func_mock_info_struct *info_mock; struct list_mock_return_f_mock *next; } list_mo_f_mock; __attribute__((constructor)) void init_list_m_f_mock(void){ list_mo_f_mock.info_mock = malloc(sizeof(struct func_mock_info_struct)); (list_mo_f_mock.info_mock)->times_left = -1; (list_mo_f_mock.info_mock)->init_times_left = -1; list_mo_f_mock.next = 
# 173 "test/is_good.c" 3 4
((void *)0)
# 173 "test/is_good.c"
; } int f_mock () { struct list_mock_return_f_mock *tmp_mock = &list_mo_f_mock; while(tmp_mock->next && (tmp_mock->info_mock)->times_left == 0) tmp_mock = tmp_mock->next ; do{ if(is_parallel_nb == 0){ if(expected_EQ_TYPE_INT(1, tmp_mock->call_mock_condition ())){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 173, __func__, "1","==","tmp_mock->call_mock_condition ()","1", TYPE_INT_TO_STR(1), "tmp_mock->call_mock_condition ()", TYPE_INT_TO_STR(tmp_mock->call_mock_condition ())); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 173, __func__, "1","==","tmp_mock->call_mock_condition ()","1", TYPE_INT_TO_STR(1), "tmp_mock->call_mock_condition ()", TYPE_INT_TO_STR(tmp_mock->call_mock_condition ())); } } else{ fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 173, __func__, "1","==","tmp_mock->call_mock_condition ()","1", TYPE_INT_TO_STR(1), "tmp_mock->call_mock_condition ()", TYPE_INT_TO_STR(tmp_mock->call_mock_condition ())); } } else{ fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 173, __func__, "1","==","tmp_mock->call_mock_condition ()","1", TYPE_INT_TO_STR(1), "tmp_mock->call_mock_condition ()", TYPE_INT_TO_STR(tmp_mock->call_mock_condition ())); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }else { if(expected_EQ_name_TYPE_INT(1, tmp_mock->call_mock_condition (), __func__)){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test passed from %s \n\n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test passed from %s \n\n",__func__); } } else{ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;32m" "----------" "\033[0m" " 1 test passed from %s \n\n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test passed from %s \n\n",__func__); } }while(0); } else{ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 173, __func__, "1","==","tmp_mock->call_mock_condition ()","1", TYPE_INT_TO_STR(1), "tmp_mock->call_mock_condition ()", TYPE_INT_TO_STR(tmp_mock->call_mock_condition ())); } else{ fprintf(f_ou_th[id_thread], "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 173, __func__, "1","==","tmp_mock->call_mock_condition ()","1", TYPE_INT_TO_STR(1), "tmp_mock->call_mock_condition ()", TYPE_INT_TO_STR(tmp_mock->call_mock_condition ())); } } else{ fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 173, __func__, "1","==","tmp_mock->call_mock_condition ()","1", TYPE_INT_TO_STR(1), "tmp_mock->call_mock_condition ()", TYPE_INT_TO_STR(tmp_mock->call_mock_condition ())); } } else{ fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "%s:%d:%s(): " "Failure\nExpected: (%s) %s (%s) :\n Value of %s: %s \n Value of %s: %s\n\n", "test/is_good.c", 173, __func__, "1","==","tmp_mock->call_mock_condition ()","1", TYPE_INT_TO_STR(1), "tmp_mock->call_mock_condition ()", TYPE_INT_TO_STR(tmp_mock->call_mock_condition ())); } }while(0); do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test failed from %s \n",__func__); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(f_ou_th[id_thread], "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test failed from %s \n",__func__); } } else{ if(!unicolour) fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "\033[0;31m" "----------" "\033[0m" " 1 test failed from %s \n",__func__); else fprintf(
# 173 "test/is_good.c" 3 4
stdout
# 173 "test/is_good.c"
, "----------" " 1 test failed from %s \n",__func__); } }while(0); if(0) return; } }}while(0);; if (((tmp_mock->info_mock)->times_left <= -8) || ((tmp_mock->info_mock)->times_left > 0)){ --((tmp_mock->info_mock)->times_left); if(1 == tmp_mock->call_mock_condition ()){ return tmp_mock->run (); } else return (int)0; } }

int run_f_mock_ID_175 (); int f_mock_cond_175 () {do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 175 "test/is_good.c" 3 4
stdout
# 175 "test/is_good.c"
,"cond:%d\n",1); } else{ fprintf(f_ou_th[id_thread], "cond:%d\n",1); } } else{ fprintf(
# 175 "test/is_good.c" 3 4
stdout
# 175 "test/is_good.c"
, "cond:%d\n",1); } } else{ fprintf(
# 175 "test/is_good.c" 3 4
stdout
# 175 "test/is_good.c"
, "cond:%d\n",1); } }while(0); return 1;} __attribute__((constructor)) void append_list_f_mock175(void){ struct list_mock_return_f_mock *tmp_mock = &list_mo_f_mock; if((tmp_mock->info_mock)->times_left == -1){ FILL_MOCK_INFO(tmp_mock); } else{ while(tmp_mock->next) tmp_mock = tmp_mock->next; tmp_mock->next = malloc(sizeof(list_mo_f_mock)); (tmp_mock->next)->info_mock = malloc(sizeof(struct func_mock_info_struct)); FILL_MOCK_INFO(tmp_mock->next); } } int run_f_mock_ID_175 () {return 12;}
int run_f_mock_ID_176 (); int f_mock_cond_176 () {do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 176 "test/is_good.c" 3 4
stdout
# 176 "test/is_good.c"
,"cond:%d\n",1); } else{ fprintf(f_ou_th[id_thread], "cond:%d\n",1); } } else{ fprintf(
# 176 "test/is_good.c" 3 4
stdout
# 176 "test/is_good.c"
, "cond:%d\n",1); } } else{ fprintf(
# 176 "test/is_good.c" 3 4
stdout
# 176 "test/is_good.c"
, "cond:%d\n",1); } }while(0); return 1;} __attribute__((constructor)) void append_list_f_mock176(void){ struct list_mock_return_f_mock *tmp_mock = &list_mo_f_mock; if((tmp_mock->info_mock)->times_left == -1){ FILL_MOCK_INFO(tmp_mock); } else{ while(tmp_mock->next) tmp_mock = tmp_mock->next; tmp_mock->next = malloc(sizeof(list_mo_f_mock)); (tmp_mock->next)->info_mock = malloc(sizeof(struct func_mock_info_struct)); FILL_MOCK_INFO(tmp_mock->next); } } int run_f_mock_ID_176 () {return 10;}

int run_f_mock_ID_178 (); int f_mock_cond_178 () {do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 178 "test/is_good.c" 3 4
stdout
# 178 "test/is_good.c"
,"cond:%d\n",0); } else{ fprintf(f_ou_th[id_thread], "cond:%d\n",0); } } else{ fprintf(
# 178 "test/is_good.c" 3 4
stdout
# 178 "test/is_good.c"
, "cond:%d\n",0); } } else{ fprintf(
# 178 "test/is_good.c" 3 4
stdout
# 178 "test/is_good.c"
, "cond:%d\n",0); } }while(0); return 0;} __attribute__((constructor)) void append_list_f_mock178(void){ struct list_mock_return_f_mock *tmp_mock = &list_mo_f_mock; if((tmp_mock->info_mock)->times_left == -1){ FILL_MOCK_INFO(tmp_mock); } else{ while(tmp_mock->next) tmp_mock = tmp_mock->next; tmp_mock->next = malloc(sizeof(list_mo_f_mock)); (tmp_mock->next)->info_mock = malloc(sizeof(struct func_mock_info_struct)); FILL_MOCK_INFO(tmp_mock->next); } } int run_f_mock_ID_178 () {return 18;}
int run_f_mock_ID_179 (); int f_mock_cond_179 () {do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 179 "test/is_good.c" 3 4
stdout
# 179 "test/is_good.c"
,"cond:%d\n",1); } else{ fprintf(f_ou_th[id_thread], "cond:%d\n",1); } } else{ fprintf(
# 179 "test/is_good.c" 3 4
stdout
# 179 "test/is_good.c"
, "cond:%d\n",1); } } else{ fprintf(
# 179 "test/is_good.c" 3 4
stdout
# 179 "test/is_good.c"
, "cond:%d\n",1); } }while(0); return 1;} __attribute__((constructor)) void append_list_f_mock179(void){ struct list_mock_return_f_mock *tmp_mock = &list_mo_f_mock; if((tmp_mock->info_mock)->times_left == -1){ FILL_MOCK_INFO(tmp_mock); } else{ while(tmp_mock->next) tmp_mock = tmp_mock->next; tmp_mock->next = malloc(sizeof(list_mo_f_mock)); (tmp_mock->next)->info_mock = malloc(sizeof(struct func_mock_info_struct)); FILL_MOCK_INFO(tmp_mock->next); } } int run_f_mock_ID_179 () {return -18;}

void TEST_mock____45(void); __attribute__((constructor)) void append_test_mock45(void){ append_func(TEST_mock____45,"TEST(mock): test N° 45|"); } void TEST_mock____45(void){
  for(int i = 0; i<8; ++i)
    do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ fprintf(
# 183 "test/is_good.c" 3 4
   stdout
# 183 "test/is_good.c"
   ,"call %d: ret:%d\n",i,f_mock()); } else{ fprintf(f_ou_th[id_thread], "call %d: ret:%d\n",i,f_mock()); } } else{ fprintf(
# 183 "test/is_good.c" 3 4
   stdout
# 183 "test/is_good.c"
   , "call %d: ret:%d\n",i,f_mock()); } } else{ fprintf(
# 183 "test/is_good.c" 3 4
   stdout
# 183 "test/is_good.c"
   , "call %d: ret:%d\n",i,f_mock()); } }while(0);
}




int main(int argc, char **argv){




  run_all_tests_args(argc, argv);






  return 0;
}
# 0 "src/ftest/ftest.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "src/ftest/ftest.c"
# 1 "./src/ftest/ftest.h" 1



# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 52 "/usr/include/stdio.h" 3 4
typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 77 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 178 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 205 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 293 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 308 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 403 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 431 "/usr/include/stdio.h" 2 3 4



extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 786 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));
# 867 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4

# 5 "./src/ftest/ftest.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 144 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 654 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 828 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 848 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1013 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4

# 6 "./src/ftest/ftest.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 173 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 407 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 458 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
# 489 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 539 "/usr/include/string.h" 3 4

# 7 "./src/ftest/ftest.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 8 "./src/ftest/ftest.h" 2

# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4


# 98 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4

# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 138 "/usr/include/sched.h" 3 4

# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 116 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 132 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 440 "/usr/include/time.h" 3 4

# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 2 3 4
# 34 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL





};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 441 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 750 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) __asm__ ("" "__sigsetjmp") __attribute__ ((__nothrow__))


                     __attribute__ ((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 946 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__access__ (__none__, 2)));




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));
# 1346 "/usr/include/pthread.h" 3 4

# 10 "./src/ftest/ftest.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4




# 1 "/usr/include/linux/ioctl.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 2 3 4
# 6 "/usr/include/linux/ioctl.h" 2 3 4
# 6 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 2 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 2 3 4


struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 30 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4





extern int ioctl (int __fd, unsigned long int __request, ...) __attribute__ ((__nothrow__ , __leaf__));
# 53 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4

# 12 "./src/ftest/ftest.h" 2

# 1 "./src/tools_t/tools_t.h" 1






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdbool.h" 1 3 4
# 8 "./src/tools_t/tools_t.h" 2
# 40 "./src/tools_t/tools_t.h"

# 40 "./src/tools_t/tools_t.h"
void gotoxy(int x, int y);
# 95 "./src/tools_t/tools_t.h"
int COMPARE_N_TYPE_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_CHAR(char* dst, const char* src, size_t size); char MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); char MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); char* TYPE_CHAR_TO_STR(char var);
int COMPARE_N_TYPE_U_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_U_CHAR(unsigned char* dst, const unsigned char* src, size_t size); unsigned char MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); unsigned char MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); char* TYPE_U_CHAR_TO_STR(unsigned char var);
int COMPARE_N_TYPE_INT(const void *,const void*); void COPY_ARRAY_TYPE_INT(int* dst, const int* src, size_t size); int MAX_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_INT(const int *array, size_t size); int MIN_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_INT(const int *array, size_t size); char* TYPE_INT_TO_STR(int var);
int COMPARE_N_TYPE_U_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_INT(unsigned int* dst, const unsigned int* src, size_t size); unsigned int MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); unsigned int MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); char* TYPE_U_INT_TO_STR(unsigned int var);
int COMPARE_N_TYPE_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_L_INT(long int* dst, const long int* src, size_t size); long int MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); long int MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); char* TYPE_L_INT_TO_STR(long int var);
int COMPARE_N_TYPE_U_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_L_INT(unsigned long int* dst, const unsigned long int* src, size_t size); unsigned long int MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); unsigned long int MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); char* TYPE_U_L_INT_TO_STR(unsigned long int var);
int COMPARE_N_TYPE_SIZE_T(const void *,const void*); void COPY_ARRAY_TYPE_SIZE_T(size_t* dst, const size_t* src, size_t size); size_t MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); char* TYPE_SIZE_T_TO_STR(size_t var);
int COMPARE_N_TYPE_FLOAT(const void *,const void*); void COPY_ARRAY_TYPE_FLOAT(float* dst, const float* src, size_t size); float MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); float MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); char* TYPE_FLOAT_TO_STR(float var);
int COMPARE_N_TYPE_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_DOUBLE(double* dst, const double* src, size_t size); double MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); double MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); char* TYPE_DOUBLE_TO_STR(double var);
int COMPARE_N_TYPE_L_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_L_DOUBLE(long double* dst, const long double* src, size_t size); long double MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); long double MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); char* TYPE_L_DOUBLE_TO_STR(long double var);
int COMPARE_N_TYPE_STRING(const void *,const void*); void COPY_ARRAY_TYPE_STRING(char** dst, const char** src, size_t size); char* MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); char* MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); char* TYPE_STRING_TO_STR(char* var);





double diff_timespec_seconds(struct timespec time_stop, struct timespec time_start);

double diff_timespec_milliseconds(struct timespec time_stop, struct timespec time_start);

long diff_timespec_nanoseconds(struct timespec time_stop, struct timespec time_start);
# 14 "./src/ftest/ftest.h" 2
# 51 "./src/ftest/ftest.h"
extern FILE **f_ou_th;
extern 
# 52 "./src/ftest/ftest.h" 3 4
      _Bool 
# 52 "./src/ftest/ftest.h"
           unicolour;
extern 
# 53 "./src/ftest/ftest.h" 3 4
      _Bool 
# 53 "./src/ftest/ftest.h"
           ordered;
# 159 "./src/ftest/ftest.h"
struct func {
  char *name;
  void (*run)(void);
  struct func *next;
};


extern 
# 166 "./src/ftest/ftest.h" 3 4
      _Bool 
# 166 "./src/ftest/ftest.h"
           is_parallel_nb;

long int id_of_thread_executed(void);

void parse_options(int argc, char **argv);

void run_all_tests();
void execute_all(struct func *fun);
void append_func(void (*run)(void), char *name);






void run_all_tests_parallel(size_t parallel );





void run_all_tests_args(int argc, char **argv);


# 189 "./src/ftest/ftest.h" 3 4
_Bool 
# 189 "./src/ftest/ftest.h"
    expected_true_f(
# 189 "./src/ftest/ftest.h" 3 4
                    _Bool 
# 189 "./src/ftest/ftest.h"
                         val);

# 190 "./src/ftest/ftest.h" 3 4
_Bool 
# 190 "./src/ftest/ftest.h"
    expected_false_f(
# 190 "./src/ftest/ftest.h" 3 4
                     _Bool 
# 190 "./src/ftest/ftest.h"
                          val);


# 192 "./src/ftest/ftest.h" 3 4
_Bool 
# 192 "./src/ftest/ftest.h"
    expected_true_f_name(
# 192 "./src/ftest/ftest.h" 3 4
                         _Bool 
# 192 "./src/ftest/ftest.h"
                              val, const char *name);

# 193 "./src/ftest/ftest.h" 3 4
_Bool 
# 193 "./src/ftest/ftest.h"
    expected_false_f_name(
# 193 "./src/ftest/ftest.h" 3 4
                          _Bool 
# 193 "./src/ftest/ftest.h"
                               val, const char *name);
# 203 "./src/ftest/ftest.h"

# 203 "./src/ftest/ftest.h" 3 4
_Bool 
# 203 "./src/ftest/ftest.h"
expected_EQ_TYPE_CHAR(char var1, char var2); 
# 203 "./src/ftest/ftest.h" 3 4
_Bool 
# 203 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_CHAR(char var1, char var2, const char *name);

# 204 "./src/ftest/ftest.h" 3 4
_Bool 
# 204 "./src/ftest/ftest.h"
expected_EQ_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 204 "./src/ftest/ftest.h" 3 4
_Bool 
# 204 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 205 "./src/ftest/ftest.h" 3 4
_Bool 
# 205 "./src/ftest/ftest.h"
expected_EQ_TYPE_INT(int var1, int var2); 
# 205 "./src/ftest/ftest.h" 3 4
_Bool 
# 205 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_INT(int var1, int var2, const char *name);

# 206 "./src/ftest/ftest.h" 3 4
_Bool 
# 206 "./src/ftest/ftest.h"
expected_EQ_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 206 "./src/ftest/ftest.h" 3 4
_Bool 
# 206 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 207 "./src/ftest/ftest.h" 3 4
_Bool 
# 207 "./src/ftest/ftest.h"
expected_EQ_TYPE_L_INT(long int var1, long int var2); 
# 207 "./src/ftest/ftest.h" 3 4
_Bool 
# 207 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 208 "./src/ftest/ftest.h" 3 4
_Bool 
# 208 "./src/ftest/ftest.h"
expected_EQ_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 208 "./src/ftest/ftest.h" 3 4
_Bool 
# 208 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 209 "./src/ftest/ftest.h" 3 4
_Bool 
# 209 "./src/ftest/ftest.h"
expected_EQ_TYPE_SIZE_T(size_t var1, size_t var2); 
# 209 "./src/ftest/ftest.h" 3 4
_Bool 
# 209 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 210 "./src/ftest/ftest.h" 3 4
_Bool 
# 210 "./src/ftest/ftest.h"
expected_EQ_TYPE_FLOAT(float var1, float var2); 
# 210 "./src/ftest/ftest.h" 3 4
_Bool 
# 210 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 211 "./src/ftest/ftest.h" 3 4
_Bool 
# 211 "./src/ftest/ftest.h"
expected_EQ_TYPE_DOUBLE(double var1, double var2); 
# 211 "./src/ftest/ftest.h" 3 4
_Bool 
# 211 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 212 "./src/ftest/ftest.h" 3 4
_Bool 
# 212 "./src/ftest/ftest.h"
expected_EQ_TYPE_L_DOUBLE(long double var1, long double var2); 
# 212 "./src/ftest/ftest.h" 3 4
_Bool 
# 212 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 213 "./src/ftest/ftest.h" 3 4
_Bool 
# 213 "./src/ftest/ftest.h"
expected_EQ_TYPE_STRING(char* var1, char* var2); 
# 213 "./src/ftest/ftest.h" 3 4
_Bool 
# 213 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 222 "./src/ftest/ftest.h"

# 222 "./src/ftest/ftest.h" 3 4
_Bool 
# 222 "./src/ftest/ftest.h"
expected_LT_TYPE_CHAR(char var1, char var2); 
# 222 "./src/ftest/ftest.h" 3 4
_Bool 
# 222 "./src/ftest/ftest.h"
expected_LT_name_TYPE_CHAR(char var1, char var2, const char *name);

# 223 "./src/ftest/ftest.h" 3 4
_Bool 
# 223 "./src/ftest/ftest.h"
expected_LT_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 223 "./src/ftest/ftest.h" 3 4
_Bool 
# 223 "./src/ftest/ftest.h"
expected_LT_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 224 "./src/ftest/ftest.h" 3 4
_Bool 
# 224 "./src/ftest/ftest.h"
expected_LT_TYPE_INT(int var1, int var2); 
# 224 "./src/ftest/ftest.h" 3 4
_Bool 
# 224 "./src/ftest/ftest.h"
expected_LT_name_TYPE_INT(int var1, int var2, const char *name);

# 225 "./src/ftest/ftest.h" 3 4
_Bool 
# 225 "./src/ftest/ftest.h"
expected_LT_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 225 "./src/ftest/ftest.h" 3 4
_Bool 
# 225 "./src/ftest/ftest.h"
expected_LT_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 226 "./src/ftest/ftest.h" 3 4
_Bool 
# 226 "./src/ftest/ftest.h"
expected_LT_TYPE_L_INT(long int var1, long int var2); 
# 226 "./src/ftest/ftest.h" 3 4
_Bool 
# 226 "./src/ftest/ftest.h"
expected_LT_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 227 "./src/ftest/ftest.h" 3 4
_Bool 
# 227 "./src/ftest/ftest.h"
expected_LT_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 227 "./src/ftest/ftest.h" 3 4
_Bool 
# 227 "./src/ftest/ftest.h"
expected_LT_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 228 "./src/ftest/ftest.h" 3 4
_Bool 
# 228 "./src/ftest/ftest.h"
expected_LT_TYPE_SIZE_T(size_t var1, size_t var2); 
# 228 "./src/ftest/ftest.h" 3 4
_Bool 
# 228 "./src/ftest/ftest.h"
expected_LT_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 229 "./src/ftest/ftest.h" 3 4
_Bool 
# 229 "./src/ftest/ftest.h"
expected_LT_TYPE_FLOAT(float var1, float var2); 
# 229 "./src/ftest/ftest.h" 3 4
_Bool 
# 229 "./src/ftest/ftest.h"
expected_LT_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 230 "./src/ftest/ftest.h" 3 4
_Bool 
# 230 "./src/ftest/ftest.h"
expected_LT_TYPE_DOUBLE(double var1, double var2); 
# 230 "./src/ftest/ftest.h" 3 4
_Bool 
# 230 "./src/ftest/ftest.h"
expected_LT_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 231 "./src/ftest/ftest.h" 3 4
_Bool 
# 231 "./src/ftest/ftest.h"
expected_LT_TYPE_L_DOUBLE(long double var1, long double var2); 
# 231 "./src/ftest/ftest.h" 3 4
_Bool 
# 231 "./src/ftest/ftest.h"
expected_LT_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 232 "./src/ftest/ftest.h" 3 4
_Bool 
# 232 "./src/ftest/ftest.h"
expected_LT_TYPE_STRING(char* var1, char* var2); 
# 232 "./src/ftest/ftest.h" 3 4
_Bool 
# 232 "./src/ftest/ftest.h"
expected_LT_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 241 "./src/ftest/ftest.h"

# 241 "./src/ftest/ftest.h" 3 4
_Bool 
# 241 "./src/ftest/ftest.h"
expected_GT_TYPE_CHAR(char var1, char var2); 
# 241 "./src/ftest/ftest.h" 3 4
_Bool 
# 241 "./src/ftest/ftest.h"
expected_GT_name_TYPE_CHAR(char var1, char var2, const char *name);

# 242 "./src/ftest/ftest.h" 3 4
_Bool 
# 242 "./src/ftest/ftest.h"
expected_GT_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 242 "./src/ftest/ftest.h" 3 4
_Bool 
# 242 "./src/ftest/ftest.h"
expected_GT_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 243 "./src/ftest/ftest.h" 3 4
_Bool 
# 243 "./src/ftest/ftest.h"
expected_GT_TYPE_INT(int var1, int var2); 
# 243 "./src/ftest/ftest.h" 3 4
_Bool 
# 243 "./src/ftest/ftest.h"
expected_GT_name_TYPE_INT(int var1, int var2, const char *name);

# 244 "./src/ftest/ftest.h" 3 4
_Bool 
# 244 "./src/ftest/ftest.h"
expected_GT_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 244 "./src/ftest/ftest.h" 3 4
_Bool 
# 244 "./src/ftest/ftest.h"
expected_GT_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 245 "./src/ftest/ftest.h" 3 4
_Bool 
# 245 "./src/ftest/ftest.h"
expected_GT_TYPE_L_INT(long int var1, long int var2); 
# 245 "./src/ftest/ftest.h" 3 4
_Bool 
# 245 "./src/ftest/ftest.h"
expected_GT_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 246 "./src/ftest/ftest.h" 3 4
_Bool 
# 246 "./src/ftest/ftest.h"
expected_GT_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 246 "./src/ftest/ftest.h" 3 4
_Bool 
# 246 "./src/ftest/ftest.h"
expected_GT_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 247 "./src/ftest/ftest.h" 3 4
_Bool 
# 247 "./src/ftest/ftest.h"
expected_GT_TYPE_SIZE_T(size_t var1, size_t var2); 
# 247 "./src/ftest/ftest.h" 3 4
_Bool 
# 247 "./src/ftest/ftest.h"
expected_GT_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 248 "./src/ftest/ftest.h" 3 4
_Bool 
# 248 "./src/ftest/ftest.h"
expected_GT_TYPE_FLOAT(float var1, float var2); 
# 248 "./src/ftest/ftest.h" 3 4
_Bool 
# 248 "./src/ftest/ftest.h"
expected_GT_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 249 "./src/ftest/ftest.h" 3 4
_Bool 
# 249 "./src/ftest/ftest.h"
expected_GT_TYPE_DOUBLE(double var1, double var2); 
# 249 "./src/ftest/ftest.h" 3 4
_Bool 
# 249 "./src/ftest/ftest.h"
expected_GT_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 250 "./src/ftest/ftest.h" 3 4
_Bool 
# 250 "./src/ftest/ftest.h"
expected_GT_TYPE_L_DOUBLE(long double var1, long double var2); 
# 250 "./src/ftest/ftest.h" 3 4
_Bool 
# 250 "./src/ftest/ftest.h"
expected_GT_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 251 "./src/ftest/ftest.h" 3 4
_Bool 
# 251 "./src/ftest/ftest.h"
expected_GT_TYPE_STRING(char* var1, char* var2); 
# 251 "./src/ftest/ftest.h" 3 4
_Bool 
# 251 "./src/ftest/ftest.h"
expected_GT_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 260 "./src/ftest/ftest.h"

# 260 "./src/ftest/ftest.h" 3 4
_Bool 
# 260 "./src/ftest/ftest.h"
expected_LE_TYPE_CHAR(char var1, char var2); 
# 260 "./src/ftest/ftest.h" 3 4
_Bool 
# 260 "./src/ftest/ftest.h"
expected_LE_name_TYPE_CHAR(char var1, char var2, const char *name);

# 261 "./src/ftest/ftest.h" 3 4
_Bool 
# 261 "./src/ftest/ftest.h"
expected_LE_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 261 "./src/ftest/ftest.h" 3 4
_Bool 
# 261 "./src/ftest/ftest.h"
expected_LE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 262 "./src/ftest/ftest.h" 3 4
_Bool 
# 262 "./src/ftest/ftest.h"
expected_LE_TYPE_INT(int var1, int var2); 
# 262 "./src/ftest/ftest.h" 3 4
_Bool 
# 262 "./src/ftest/ftest.h"
expected_LE_name_TYPE_INT(int var1, int var2, const char *name);

# 263 "./src/ftest/ftest.h" 3 4
_Bool 
# 263 "./src/ftest/ftest.h"
expected_LE_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 263 "./src/ftest/ftest.h" 3 4
_Bool 
# 263 "./src/ftest/ftest.h"
expected_LE_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 264 "./src/ftest/ftest.h" 3 4
_Bool 
# 264 "./src/ftest/ftest.h"
expected_LE_TYPE_L_INT(long int var1, long int var2); 
# 264 "./src/ftest/ftest.h" 3 4
_Bool 
# 264 "./src/ftest/ftest.h"
expected_LE_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 265 "./src/ftest/ftest.h" 3 4
_Bool 
# 265 "./src/ftest/ftest.h"
expected_LE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 265 "./src/ftest/ftest.h" 3 4
_Bool 
# 265 "./src/ftest/ftest.h"
expected_LE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 266 "./src/ftest/ftest.h" 3 4
_Bool 
# 266 "./src/ftest/ftest.h"
expected_LE_TYPE_SIZE_T(size_t var1, size_t var2); 
# 266 "./src/ftest/ftest.h" 3 4
_Bool 
# 266 "./src/ftest/ftest.h"
expected_LE_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 267 "./src/ftest/ftest.h" 3 4
_Bool 
# 267 "./src/ftest/ftest.h"
expected_LE_TYPE_FLOAT(float var1, float var2); 
# 267 "./src/ftest/ftest.h" 3 4
_Bool 
# 267 "./src/ftest/ftest.h"
expected_LE_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 268 "./src/ftest/ftest.h" 3 4
_Bool 
# 268 "./src/ftest/ftest.h"
expected_LE_TYPE_DOUBLE(double var1, double var2); 
# 268 "./src/ftest/ftest.h" 3 4
_Bool 
# 268 "./src/ftest/ftest.h"
expected_LE_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 269 "./src/ftest/ftest.h" 3 4
_Bool 
# 269 "./src/ftest/ftest.h"
expected_LE_TYPE_L_DOUBLE(long double var1, long double var2); 
# 269 "./src/ftest/ftest.h" 3 4
_Bool 
# 269 "./src/ftest/ftest.h"
expected_LE_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 270 "./src/ftest/ftest.h" 3 4
_Bool 
# 270 "./src/ftest/ftest.h"
expected_LE_TYPE_STRING(char* var1, char* var2); 
# 270 "./src/ftest/ftest.h" 3 4
_Bool 
# 270 "./src/ftest/ftest.h"
expected_LE_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 279 "./src/ftest/ftest.h"

# 279 "./src/ftest/ftest.h" 3 4
_Bool 
# 279 "./src/ftest/ftest.h"
expected_GE_TYPE_CHAR(char var1, char var2); 
# 279 "./src/ftest/ftest.h" 3 4
_Bool 
# 279 "./src/ftest/ftest.h"
expected_GE_name_TYPE_CHAR(char var1, char var2, const char *name);

# 280 "./src/ftest/ftest.h" 3 4
_Bool 
# 280 "./src/ftest/ftest.h"
expected_GE_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 280 "./src/ftest/ftest.h" 3 4
_Bool 
# 280 "./src/ftest/ftest.h"
expected_GE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 281 "./src/ftest/ftest.h" 3 4
_Bool 
# 281 "./src/ftest/ftest.h"
expected_GE_TYPE_INT(int var1, int var2); 
# 281 "./src/ftest/ftest.h" 3 4
_Bool 
# 281 "./src/ftest/ftest.h"
expected_GE_name_TYPE_INT(int var1, int var2, const char *name);

# 282 "./src/ftest/ftest.h" 3 4
_Bool 
# 282 "./src/ftest/ftest.h"
expected_GE_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 282 "./src/ftest/ftest.h" 3 4
_Bool 
# 282 "./src/ftest/ftest.h"
expected_GE_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 283 "./src/ftest/ftest.h" 3 4
_Bool 
# 283 "./src/ftest/ftest.h"
expected_GE_TYPE_L_INT(long int var1, long int var2); 
# 283 "./src/ftest/ftest.h" 3 4
_Bool 
# 283 "./src/ftest/ftest.h"
expected_GE_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 284 "./src/ftest/ftest.h" 3 4
_Bool 
# 284 "./src/ftest/ftest.h"
expected_GE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 284 "./src/ftest/ftest.h" 3 4
_Bool 
# 284 "./src/ftest/ftest.h"
expected_GE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 285 "./src/ftest/ftest.h" 3 4
_Bool 
# 285 "./src/ftest/ftest.h"
expected_GE_TYPE_SIZE_T(size_t var1, size_t var2); 
# 285 "./src/ftest/ftest.h" 3 4
_Bool 
# 285 "./src/ftest/ftest.h"
expected_GE_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 286 "./src/ftest/ftest.h" 3 4
_Bool 
# 286 "./src/ftest/ftest.h"
expected_GE_TYPE_FLOAT(float var1, float var2); 
# 286 "./src/ftest/ftest.h" 3 4
_Bool 
# 286 "./src/ftest/ftest.h"
expected_GE_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 287 "./src/ftest/ftest.h" 3 4
_Bool 
# 287 "./src/ftest/ftest.h"
expected_GE_TYPE_DOUBLE(double var1, double var2); 
# 287 "./src/ftest/ftest.h" 3 4
_Bool 
# 287 "./src/ftest/ftest.h"
expected_GE_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 288 "./src/ftest/ftest.h" 3 4
_Bool 
# 288 "./src/ftest/ftest.h"
expected_GE_TYPE_L_DOUBLE(long double var1, long double var2); 
# 288 "./src/ftest/ftest.h" 3 4
_Bool 
# 288 "./src/ftest/ftest.h"
expected_GE_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 289 "./src/ftest/ftest.h" 3 4
_Bool 
# 289 "./src/ftest/ftest.h"
expected_GE_TYPE_STRING(char* var1, char* var2); 
# 289 "./src/ftest/ftest.h" 3 4
_Bool 
# 289 "./src/ftest/ftest.h"
expected_GE_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 298 "./src/ftest/ftest.h"

# 298 "./src/ftest/ftest.h" 3 4
_Bool 
# 298 "./src/ftest/ftest.h"
expected_NE_TYPE_CHAR(char var1, char var2); 
# 298 "./src/ftest/ftest.h" 3 4
_Bool 
# 298 "./src/ftest/ftest.h"
expected_NE_name_TYPE_CHAR(char var1, char var2, const char *name);

# 299 "./src/ftest/ftest.h" 3 4
_Bool 
# 299 "./src/ftest/ftest.h"
expected_NE_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 299 "./src/ftest/ftest.h" 3 4
_Bool 
# 299 "./src/ftest/ftest.h"
expected_NE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 300 "./src/ftest/ftest.h" 3 4
_Bool 
# 300 "./src/ftest/ftest.h"
expected_NE_TYPE_INT(int var1, int var2); 
# 300 "./src/ftest/ftest.h" 3 4
_Bool 
# 300 "./src/ftest/ftest.h"
expected_NE_name_TYPE_INT(int var1, int var2, const char *name);

# 301 "./src/ftest/ftest.h" 3 4
_Bool 
# 301 "./src/ftest/ftest.h"
expected_NE_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 301 "./src/ftest/ftest.h" 3 4
_Bool 
# 301 "./src/ftest/ftest.h"
expected_NE_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 302 "./src/ftest/ftest.h" 3 4
_Bool 
# 302 "./src/ftest/ftest.h"
expected_NE_TYPE_L_INT(long int var1, long int var2); 
# 302 "./src/ftest/ftest.h" 3 4
_Bool 
# 302 "./src/ftest/ftest.h"
expected_NE_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 303 "./src/ftest/ftest.h" 3 4
_Bool 
# 303 "./src/ftest/ftest.h"
expected_NE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 303 "./src/ftest/ftest.h" 3 4
_Bool 
# 303 "./src/ftest/ftest.h"
expected_NE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 304 "./src/ftest/ftest.h" 3 4
_Bool 
# 304 "./src/ftest/ftest.h"
expected_NE_TYPE_SIZE_T(size_t var1, size_t var2); 
# 304 "./src/ftest/ftest.h" 3 4
_Bool 
# 304 "./src/ftest/ftest.h"
expected_NE_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 305 "./src/ftest/ftest.h" 3 4
_Bool 
# 305 "./src/ftest/ftest.h"
expected_NE_TYPE_FLOAT(float var1, float var2); 
# 305 "./src/ftest/ftest.h" 3 4
_Bool 
# 305 "./src/ftest/ftest.h"
expected_NE_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 306 "./src/ftest/ftest.h" 3 4
_Bool 
# 306 "./src/ftest/ftest.h"
expected_NE_TYPE_DOUBLE(double var1, double var2); 
# 306 "./src/ftest/ftest.h" 3 4
_Bool 
# 306 "./src/ftest/ftest.h"
expected_NE_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 307 "./src/ftest/ftest.h" 3 4
_Bool 
# 307 "./src/ftest/ftest.h"
expected_NE_TYPE_L_DOUBLE(long double var1, long double var2); 
# 307 "./src/ftest/ftest.h" 3 4
_Bool 
# 307 "./src/ftest/ftest.h"
expected_NE_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 308 "./src/ftest/ftest.h" 3 4
_Bool 
# 308 "./src/ftest/ftest.h"
expected_NE_TYPE_STRING(char* var1, char* var2); 
# 308 "./src/ftest/ftest.h" 3 4
_Bool 
# 308 "./src/ftest/ftest.h"
expected_NE_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 2 "src/ftest/ftest.c" 2
# 78 "src/ftest/ftest.c"
struct failed_lists{
  char *name;
  struct failed_lists *next;
};
# 97 "src/ftest/ftest.c"

# 97 "src/ftest/ftest.c" 3 4
_Bool 
# 97 "src/ftest/ftest.c"
    some_thing_wrong = 0;


# 99 "src/ftest/ftest.c" 3 4
_Bool 
# 99 "src/ftest/ftest.c"
    help=0;

# 100 "src/ftest/ftest.c" 3 4
_Bool 
# 100 "src/ftest/ftest.c"
    ordered= 0;

# 101 "src/ftest/ftest.c" 3 4
_Bool 
# 101 "src/ftest/ftest.c"
    unicolour = 0;

# 102 "src/ftest/ftest.c" 3 4
_Bool 
# 102 "src/ftest/ftest.c"
    removelog = 0;
char *timeunit="ms";
char *savelog=
# 104 "src/ftest/ftest.c" 3 4
             ((void *)0)
# 104 "src/ftest/ftest.c"
                 ;
char *default_timeunit="ms";
char *default_savelog="log_all_tests";




# 110 "src/ftest/ftest.c" 3 4
_Bool 
# 110 "src/ftest/ftest.c"
    some_tests_selected=0;

size_t *array_TYPE_SIZE_T=
# 112 "src/ftest/ftest.c" 3 4
                         ((void *)0)
# 112 "src/ftest/ftest.c"
                             ;
char **array_TYPE_STRING=
# 113 "src/ftest/ftest.c" 3 4
                        ((void *)0)
# 113 "src/ftest/ftest.c"
                            ;

size_t cur_array_TYPE_SIZE_T=0;
size_t cur_array_TYPE_STRING=0;




size_t parallel_nb = 0;






# 127 "src/ftest/ftest.c" 3 4
_Bool 
# 127 "src/ftest/ftest.c"
    is_parallel_nb = 0;


# 129 "src/ftest/ftest.c" 3 4
_Bool 
# 129 "src/ftest/ftest.c"
    progress = 
# 129 "src/ftest/ftest.c" 3 4
               0
# 129 "src/ftest/ftest.c"
                    ;

FILE **f_ou_th;

size_t count_tests = 0;

size_t count_pass_global = 0;
size_t count_pass_local = 0;


size_t count_fail_global = 0;
size_t count_fail_local = 0;





size_t *count_pass_test = 
# 146 "src/ftest/ftest.c" 3 4
                         ((void *)0)
# 146 "src/ftest/ftest.c"
                             ;
size_t *count_fail_test = 
# 147 "src/ftest/ftest.c" 3 4
                         ((void *)0)
# 147 "src/ftest/ftest.c"
                             ;




size_t *count_pass_thread = 
# 152 "src/ftest/ftest.c" 3 4
                           ((void *)0)
# 152 "src/ftest/ftest.c"
                               ;
size_t *count_fail_thread = 
# 153 "src/ftest/ftest.c" 3 4
                           ((void *)0)
# 153 "src/ftest/ftest.c"
                               ;

size_t *id_thread_self = 
# 155 "src/ftest/ftest.c" 3 4
                        ((void *)0)
# 155 "src/ftest/ftest.c"
                            ;
char **log_name_file_thrd = 
# 156 "src/ftest/ftest.c" 3 4
                           ((void *)0)
# 156 "src/ftest/ftest.c"
                               ;





struct func *f_beging = 
# 162 "src/ftest/ftest.c" 3 4
                       ((void *)0)
# 162 "src/ftest/ftest.c"
                           ;



struct func *current_fn = 
# 166 "src/ftest/ftest.c" 3 4
                         ((void *)0)
# 166 "src/ftest/ftest.c"
                             ;




struct failed_lists *failed_l = 
# 171 "src/ftest/ftest.c" 3 4
                               ((void *)0)
# 171 "src/ftest/ftest.c"
                                   ;





struct failed_lists **thread_test_failed_l = 
# 177 "src/ftest/ftest.c" 3 4
                                            ((void *)0)
# 177 "src/ftest/ftest.c"
                                                ;




pthread_mutex_t mut_global_list_fail;



pthread_mutex_t mut_current_test;


pthread_mutex_t mut_count_pass_global;
pthread_mutex_t mut_count_fail_global;
pthread_mutex_t mut_count_pass_local;
pthread_mutex_t mut_count_fail_local;
# 201 "src/ftest/ftest.c"
void append_failed_list(struct failed_lists **fn_failed_list ,const char *name_failed){

  if(*fn_failed_list){

    struct failed_lists *tmp_failed_l = *fn_failed_list, *rec_tmp;

    while(tmp_failed_l){
      rec_tmp = tmp_failed_l;
      tmp_failed_l = tmp_failed_l->next;
    }
    tmp_failed_l = malloc(sizeof(struct failed_lists));
    tmp_failed_l->name = malloc(strlen(name_failed));
    strcpy(tmp_failed_l->name, name_failed);
    tmp_failed_l->next = 
# 214 "src/ftest/ftest.c" 3 4
                        ((void *)0)
# 214 "src/ftest/ftest.c"
                            ;
    rec_tmp->next = tmp_failed_l;

  }
  else{
    *fn_failed_list = malloc(sizeof(struct failed_lists));
    (*fn_failed_list)->name = malloc(strlen(name_failed));
    strcpy((*fn_failed_list)->name, name_failed);
    (*fn_failed_list)->next = 
# 222 "src/ftest/ftest.c" 3 4
                             ((void *)0)
# 222 "src/ftest/ftest.c"
                                 ;
  }

}




long int id_of_thread_executed(void){
  size_t id_from_self = pthread_self();
  for(size_t i=0; i<parallel_nb + 1; ++i){
    if(id_thread_self[i] == id_from_self)
      return i;
  }
  fprintf(
# 236 "src/ftest/ftest.c" 3 4
 stderr
# 236 "src/ftest/ftest.c"
 , "%s:%d:%s(): " "something wrong on %s\n", "src/ftest/ftest.c", 236, __func__, __func__);;
  return -1;
}
# 247 "src/ftest/ftest.c"
size_t extract_num__f(const char *name_f){
  size_t len = strlen(name_f);
  size_t val = 0, p = 1;
  for(long i= len-1; i>=0; --i){
    do { if (0) fprintf(
# 251 "src/ftest/ftest.c" 3 4
   stderr
# 251 "src/ftest/ftest.c"
   , "%s:%d:%s(): " " name_f(%s)[%ld] = %c\n", "src/ftest/ftest.c", 251, __func__, name_f,i,name_f[i]); } while (0);
    if(name_f[i]=='|') val = 0;
    if(name_f[i] >= '0' && name_f[i] <= '9'){
      val += p * (name_f[i]-'0');
      p *= 10;
    }
    else if( name_f[i] == ' ' || name_f[i] == '_' || name_f[i] == '=' ) break;
  }
  return val;
}



void usage(int argc, char **argv){
  printf("usage: %s [OPTIONS] [<ARGS>] \n\n  or : %s [OPTIONS]=[<ARGS>]\n\n",argv[0],argv[0]);
  printf("OPTIONS\n");
  printf("\t -h, --help \n\t\tprint help, options variables\n\n");
  printf("\t -p <NB>, --parallel <NB>, -p=<NB>, --parallel=<NB>\n\t\tby default the program ran in sequantial all test, \n\t\tif this option is set, the program run tests on NB threads.\n\t\tEach thread pull up one test out the list of all test not yet executed,\n\t\tand execute it, until the list is empty \n\n");
  printf("\t -t <unit>, --time <unit>, -t=<unit>, --time=<unit>  \n\t\tby default unit is millisecons ms, the other of unit are choices are second (or s), and nanosecond (or ns)\n\t\tex: -t ns or -t=nanosecond or --time=n to set nanosecond unit\n\n");
  printf("\t -u , --unicolour\n\t\tby default, the result is colored, if you choice this option, it prints with default color\n\n");
  printf("\t -o, --ordered\n\t\tthis option is usefull if you choose to use parallel tests,\n\t\tby default, each thread share the screen to print results,\n\t\tthis option create file to record log of each thread on file,\n\t\tand print on screen all results at the end of all tests\n\n");
  printf("\t -r , --remove\n\t\tif the option ordered is choosen if parallel tests,\n\t\tthis option remove the file logs of each thread after all tests.\n\n");
  printf("\t -s <file>, --savelog <file>, -s=file, --savelog=file\n\t\tthis option save the global ordered result in 'file',\n\t\tthis option active the option -o or --ordered. \n\n");


  printf("\t -n=<NUM1>,<NUM2> <NUM3>... ,--numtests=<NUM1>,<NUM2>...\n\t\tthis option allow to execute only the selected numbers of tests (in the order in file test)\n\t\tex: -n=0,6,3 8 to execute   the tests 0,3,6,8 (if the number is less than the count of all tests)\n\n");
  printf("\t -l=<NAME1>,<NAME2> <NAME3>... ,--listests=<NAME1>,<NAME2>...<NAMEn>\n\t\tthis option allow to execute only the selected name of tests. It allows empty name by using '-l=,'\n\t\tex:  -l=name0,,name2 : execute only (if they exist): TEST(name0),TEST(),TEST(name2)\n\n");

  if(array_TYPE_SIZE_T){
    for(int i=0; i< cur_array_TYPE_SIZE_T; ++i){
      do { if (0) fprintf(
# 281 "src/ftest/ftest.c" 3 4
     stderr
# 281 "src/ftest/ftest.c"
     , "%s:%d:%s(): " "array_TYPE_SIZE_T[%d]=%ld\n", "src/ftest/ftest.c", 281, __func__, i,array_TYPE_SIZE_T[i]); } while (0);
    }
  }
  if(array_TYPE_STRING) {
    for(int i=0; i< cur_array_TYPE_STRING; ++i){
      do { if (0) fprintf(
# 286 "src/ftest/ftest.c" 3 4
     stderr
# 286 "src/ftest/ftest.c"
     , "%s:%d:%s(): " "array_TYPE_STRING[%d]=%s\n", "src/ftest/ftest.c", 286, __func__, i,array_TYPE_STRING[i]); } while (0);
    }
  }
  if(some_thing_wrong){
    printf("invalid argument\n");
    exit(0);
  }
}


const char* extract_string_after_equal_symbole_in_string(const char * in_str){
  size_t len=strlen(in_str);

  for(long i=0; i<len-1; ++i){
    if(in_str[i]=='=')
      return in_str+i+1;
  }
  return 
# 303 "src/ftest/ftest.c" 3 4
        ((void *)0)
# 303 "src/ftest/ftest.c"
            ;
}

long int extract_num_after_equal_symbole_in_string(char * in_str){
  size_t len=strlen(in_str);
  long int val=0, p=1;
  for(long i=len-1; i>=0; --i){
    do { if (0) fprintf(
# 310 "src/ftest/ftest.c" 3 4
   stderr
# 310 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "(%s)[%ld]=%c\n", "src/ftest/ftest.c", 310, __func__, in_str,i,in_str[i]); } while (0);
    if(in_str[i]=='=') return val;
    if(in_str[i] >= '0' && in_str[i] <= '9' ){
      val += p * (in_str[i]-'0');
      p *= 10;
    }
  }
  if(val) return val;
  return -1;
}
# 402 "src/ftest/ftest.c"
void extract_to_array_TYPE_SIZE_T(char * in_str){
  size_t len=strlen(in_str);
  long int val=0, p=10;
  for(long i=0; i<len; ++i){
    do { if (0) fprintf(
# 406 "src/ftest/ftest.c" 3 4
   stderr
# 406 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "(%s)[%ld]=%c\n", "src/ftest/ftest.c", 406, __func__, in_str,i,in_str[i]); } while (0);
    if(in_str[i]=='-'){
      while((in_str[i] >= '0' && in_str[i] <= '9' ) || (in_str[i] >= 'A' && in_str[i] <= 'z' ) || (in_str[i]=='_')|| (in_str[i]=='-')){
        ++i;
      }
    }
    else if(in_str[i] >= '0' && in_str[i] <= '9' ){
      val = (p * val) + (in_str[i]-'0');
    }
    else{

      do { if (0) fprintf(
# 417 "src/ftest/ftest.c" 3 4
     stderr
# 417 "src/ftest/ftest.c"
     , "%s:%d:%s(): " "val=(%ld) \n", "src/ftest/ftest.c", 417, __func__, val); } while (0);
      array_TYPE_SIZE_T[cur_array_TYPE_SIZE_T++]=val;
      val=0;
    }
  }
      do { if (0) fprintf(
# 422 "src/ftest/ftest.c" 3 4
     stderr
# 422 "src/ftest/ftest.c"
     , "%s:%d:%s(): " "end val=(%ld) \n", "src/ftest/ftest.c", 422, __func__, val); } while (0);
  if(val)
      array_TYPE_SIZE_T[cur_array_TYPE_SIZE_T++]=val;

}

void extract_to_array_TYPE_STRING(char * in_str){
  size_t len=strlen(in_str);
  char *val=malloc(len);
  size_t cur_val=0;
  for(long i=0; i<len; ++i){
    if(in_str[i]=='-'){
      while((in_str[i] >= '0' && in_str[i] <= '9' ) || (in_str[i] >= 'A' && in_str[i] <= 'z' ) || (in_str[i]=='_')|| (in_str[i]=='-')){
        ++i;
      }
    }
    else if((in_str[i] >= '0' && in_str[i] <= '9' ) || (in_str[i] >= 'A' && in_str[i] <= 'z' ) || (in_str[i]=='_')){
      val[cur_val++] = in_str[i];
    }
    else{

      val[cur_val++]='\0';

      do { if (0) fprintf(
# 445 "src/ftest/ftest.c" 3 4
     stderr
# 445 "src/ftest/ftest.c"
     , "%s:%d:%s(): " "val_str=(((%s) cur_val=[%ld]\n", "src/ftest/ftest.c", 445, __func__, val,cur_val); } while (0);
      array_TYPE_STRING[cur_array_TYPE_STRING]=malloc(strlen(val));
      strcpy(array_TYPE_STRING[cur_array_TYPE_STRING++],val);
      cur_val=0;
    }
  }
  if(cur_val){
      val[cur_val++]='\0';
      do { if (0) fprintf(
# 453 "src/ftest/ftest.c" 3 4
     stderr
# 453 "src/ftest/ftest.c"
     , "%s:%d:%s(): " "val_str=(%s) cur_val=[%ld]\n", "src/ftest/ftest.c", 453, __func__, val,cur_val); } while (0);

      array_TYPE_STRING[cur_array_TYPE_STRING]=malloc(strlen(val));
      strcpy(array_TYPE_STRING[cur_array_TYPE_STRING++],val);

  }
}
# 495 "src/ftest/ftest.c"
void parse_options(int argc, char **argv){
  int j;
  char *arg;
  for(int i=1; i<argc; ++i){
    do { if (0) fprintf(
# 499 "src/ftest/ftest.c" 3 4
   stderr
# 499 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "argc=%d, argv[%d]=%s\n", "src/ftest/ftest.c", 499, __func__, argc,i,argv[i]); } while (0);
    if(argv[i][0]=='-'){ j=1; while(argv[i][j]=='-') ++j; if(argv[i][j] == "help"[0]){ help=1; continue; } }
    if(argv[i][0]=='-'){ j=1; while(argv[i][j]=='-') ++j; if(argv[i][j] == "parallel_nb"[0]){ arg=argv[i]; long ret_num=extract_num_after_equal_symbole_in_string(argv[i]); do { if (0) fprintf(
# 501 "src/ftest/ftest.c" 3 4
   stderr
# 501 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "option=%s, ret_num = %ld, argv[%d]=%s\n", "src/ftest/ftest.c", 501, __func__, "parallel_nb",ret_num,i,argv[i]); } while (0); is_parallel_nb = 1; if(ret_num > -1) parallel_nb = ret_num; else{ if(i<argc-1){ if(argv[i+1][0]=='-'){ parallel_nb = 1; some_thing_wrong=1; help=1; printf("incorrect %s option is interpreted as -%c, %s  \n\n",arg,"parallel_nb"[0],"wait for args"); break; } else{ ret_num=extract_num_after_equal_symbole_in_string(argv[++i]); if(ret_num>0) parallel_nb = ret_num; else{ parallel_nb = 1; some_thing_wrong=1; help=1; printf("incorrect %s option is interpreted as -%c, %s  \n\n",arg,"parallel_nb"[0],"wait for args"); break; } } } else{ parallel_nb = 1; some_thing_wrong=1; help=1; printf("incorrect %s option is interpreted as -%c, %s  \n\n",arg,"parallel_nb"[0],"wait for args"); break; } } do { if (0) fprintf(
# 501 "src/ftest/ftest.c" 3 4
   stderr
# 501 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "option %s activated, its value is %ld\n", "src/ftest/ftest.c", 501, __func__, "parallel_nb",parallel_nb); } while (0); continue; } }

    if(argv[i][0]=='-'){ j=1; while(argv[i][j]=='-') ++j; if(argv[i][j] == "savelog"[0]){ arg=argv[i]; char* ret_str=(char*)extract_string_after_equal_symbole_in_string(argv[i]); do { if (0) fprintf(
# 503 "src/ftest/ftest.c" 3 4
   stderr
# 503 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "option=%s, ret_str = %s, argv[%d]=%s\n", "src/ftest/ftest.c", 503, __func__, "savelog",ret_str,i,argv[i]); } while (0); if(ret_str ==
# 503 "src/ftest/ftest.c" 3 4
   ((void *)0) 
# 503 "src/ftest/ftest.c"
   || strlen(ret_str)==0){ if(i<argc-1){ if(argv[i+1][0]=='-') help=1; else savelog = argv[++i]; } else{ help=1; } } else savelog = ret_str; continue; } }
    if(argv[i][0]=='-'){ j=1; while(argv[i][j]=='-') ++j; if(argv[i][j] == "timeunit"[0]){ arg=argv[i]; char* ret_str=(char*)extract_string_after_equal_symbole_in_string(argv[i]); do { if (0) fprintf(
# 504 "src/ftest/ftest.c" 3 4
   stderr
# 504 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "option=%s, ret_str = %s, argv[%d]=%s\n", "src/ftest/ftest.c", 504, __func__, "timeunit",ret_str,i,argv[i]); } while (0); if(ret_str ==
# 504 "src/ftest/ftest.c" 3 4
   ((void *)0) 
# 504 "src/ftest/ftest.c"
   || strlen(ret_str)==0){ if(i<argc-1){ if(argv[i+1][0]=='-') help=1; else timeunit = argv[++i]; } else{ help=1; } } else timeunit = ret_str; continue; } }
    if(argv[i][0]=='-'){ j=1; while(argv[i][j]=='-') ++j; if(argv[i][j] == "ordered"[0]){ ordered=1; continue; } }
    if(argv[i][0]=='-'){ j=1; while(argv[i][j]=='-') ++j; if(argv[i][j] == "removelog"[0]){ removelog=1; continue; } }
    if(argv[i][0]=='-'){ j=1; while(argv[i][j]=='-') ++j; if(argv[i][j] == "unicolour"[0]){ unicolour=1; continue; } }
    if(argv[i][0]=='-'){ j=1; while(argv[i][j]=='-') ++j; if(argv[i][j] == "numsuit"[0]){ arg=argv[i]; array_TYPE_SIZE_T=malloc(sizeof(size_t)*count_tests); some_tests_selected= 1; do{ extract_to_array_TYPE_SIZE_T(argv[i]); do { if (0) fprintf(
# 508 "src/ftest/ftest.c" 3 4
   stderr
# 508 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "option=%s, cur = %ld, argv[%d]=%s\n", "src/ftest/ftest.c", 508, __func__, "numsuit",cur_array_TYPE_SIZE_T,i,argv[i]); } while (0); }while(i<argc-1 && argv[++i][0] != '-'); do { if (0) fprintf(
# 508 "src/ftest/ftest.c" 3 4
   stderr
# 508 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "after while option=%s, cur = %ld, argv[%d]=%s\n", "src/ftest/ftest.c", 508, __func__, "numsuit",cur_array_TYPE_SIZE_T,i,argv[i]); } while (0); if(argv[i][0]=='-'){ j=1;while(argv[i][j]=='-') ++j; if (argv[i][j] != "numsuit"[0]) --i; } do { if (0) fprintf(
# 508 "src/ftest/ftest.c" 3 4
   stderr
# 508 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "after if arc-1 option=%s, cur = %ld, i=%d, et argv[i+1]=%s\n", "src/ftest/ftest.c", 508, __func__, "numsuit",cur_array_TYPE_SIZE_T,i,argv[i+1]); } while (0); continue; } }
    if(argv[i][0]=='-'){ j=1; while(argv[i][j]=='-') ++j; if(argv[i][j] == "listsuite"[0]){ arg=argv[i]; array_TYPE_STRING=malloc(sizeof(char*)*count_tests); some_tests_selected= 1; do{ extract_to_array_TYPE_STRING(argv[i]); do { if (0) fprintf(
# 509 "src/ftest/ftest.c" 3 4
   stderr
# 509 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "option=%s, cur = %ld, argv[%d]=%s\n", "src/ftest/ftest.c", 509, __func__, "listsuite",cur_array_TYPE_STRING,i,argv[i]); } while (0); }while(i<argc-1 && argv[++i][0] != '-'); do { if (0) fprintf(
# 509 "src/ftest/ftest.c" 3 4
   stderr
# 509 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "after while option=%s, cur = %ld, argv[%d]=%s\n", "src/ftest/ftest.c", 509, __func__, "listsuite",cur_array_TYPE_STRING,i,argv[i]); } while (0); if(argv[i][0]=='-'){ j=1;while(argv[i][j]=='-') ++j; if (argv[i][j] != "listsuite"[0]) --i; } do { if (0) fprintf(
# 509 "src/ftest/ftest.c" 3 4
   stderr
# 509 "src/ftest/ftest.c"
   , "%s:%d:%s(): " "after if arc-1 option=%s, cur = %ld, i=%d, et argv[i+1]=%s\n", "src/ftest/ftest.c", 509, __func__, "listsuite",cur_array_TYPE_STRING,i,argv[i+1]); } while (0); continue; } }
    printf("option %s inconnu\n",argv[i]); help=1; some_thing_wrong=1; break;
  }

}
# 528 "src/ftest/ftest.c"
void list_failed_test(struct failed_lists *test_failed){
  struct failed_lists *failed_lst = test_failed;
  if(is_parallel_nb){
    long int id_thrd = id_of_thread_executed();
    if(id_thrd < 0 || id_thrd == parallel_nb ){
      while(failed_lst){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 533 "src/ftest/ftest.c" 3 4
     stdout
# 533 "src/ftest/ftest.c"
     , "\033[0;31m" "===== FAIL" "\033[0m" " %s\n",failed_lst->name); else fprintf(
# 533 "src/ftest/ftest.c" 3 4
     stdout
# 533 "src/ftest/ftest.c"
     , "===== FAIL" " %s\n",failed_lst->name); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== FAIL" "\033[0m" " %s\n",failed_lst->name); else fprintf(f_ou_th[id_thread], "===== FAIL" " %s\n",failed_lst->name); } } else{ if(!unicolour) fprintf(
# 533 "src/ftest/ftest.c" 3 4
     stdout
# 533 "src/ftest/ftest.c"
     , "\033[0;31m" "===== FAIL" "\033[0m" " %s\n",failed_lst->name); else fprintf(
# 533 "src/ftest/ftest.c" 3 4
     stdout
# 533 "src/ftest/ftest.c"
     , "===== FAIL" " %s\n",failed_lst->name); } } else{ if(!unicolour) fprintf(
# 533 "src/ftest/ftest.c" 3 4
     stdout
# 533 "src/ftest/ftest.c"
     , "\033[0;31m" "===== FAIL" "\033[0m" " %s\n",failed_lst->name); else fprintf(
# 533 "src/ftest/ftest.c" 3 4
     stdout
# 533 "src/ftest/ftest.c"
     , "===== FAIL" " %s\n",failed_lst->name); } }while(0); failed_lst = failed_lst->next; }
    }else{
      while(failed_lst){
        do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 536 "src/ftest/ftest.c" 3 4
       stdout
# 536 "src/ftest/ftest.c"
       , "\033[0;31m" "===== FAIL" "\033[0m" " %s, on thread[%ld]\n",failed_lst->name,id_thrd); else fprintf(
# 536 "src/ftest/ftest.c" 3 4
       stdout
# 536 "src/ftest/ftest.c"
       , "===== FAIL" " %s, on thread[%ld]\n",failed_lst->name,id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== FAIL" "\033[0m" " %s, on thread[%ld]\n",failed_lst->name,id_thrd); else fprintf(f_ou_th[id_thread], "===== FAIL" " %s, on thread[%ld]\n",failed_lst->name,id_thrd); } } else{ if(!unicolour) fprintf(
# 536 "src/ftest/ftest.c" 3 4
       stdout
# 536 "src/ftest/ftest.c"
       , "\033[0;31m" "===== FAIL" "\033[0m" " %s, on thread[%ld]\n",failed_lst->name,id_thrd); else fprintf(
# 536 "src/ftest/ftest.c" 3 4
       stdout
# 536 "src/ftest/ftest.c"
       , "===== FAIL" " %s, on thread[%ld]\n",failed_lst->name,id_thrd); } } else{ if(!unicolour) fprintf(
# 536 "src/ftest/ftest.c" 3 4
       stdout
# 536 "src/ftest/ftest.c"
       , "\033[0;31m" "===== FAIL" "\033[0m" " %s, on thread[%ld]\n",failed_lst->name,id_thrd); else fprintf(
# 536 "src/ftest/ftest.c" 3 4
       stdout
# 536 "src/ftest/ftest.c"
       , "===== FAIL" " %s, on thread[%ld]\n",failed_lst->name,id_thrd); } }while(0);
        failed_lst = failed_lst->next;
      }
    }
  }
  else{
    while(failed_lst){ do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 542 "src/ftest/ftest.c" 3 4
   stdout
# 542 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %s\n",failed_lst->name); else fprintf(
# 542 "src/ftest/ftest.c" 3 4
   stdout
# 542 "src/ftest/ftest.c"
   , "===== FAIL" " %s\n",failed_lst->name); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== FAIL" "\033[0m" " %s\n",failed_lst->name); else fprintf(f_ou_th[id_thread], "===== FAIL" " %s\n",failed_lst->name); } } else{ if(!unicolour) fprintf(
# 542 "src/ftest/ftest.c" 3 4
   stdout
# 542 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %s\n",failed_lst->name); else fprintf(
# 542 "src/ftest/ftest.c" 3 4
   stdout
# 542 "src/ftest/ftest.c"
   , "===== FAIL" " %s\n",failed_lst->name); } } else{ if(!unicolour) fprintf(
# 542 "src/ftest/ftest.c" 3 4
   stdout
# 542 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %s\n",failed_lst->name); else fprintf(
# 542 "src/ftest/ftest.c" 3 4
   stdout
# 542 "src/ftest/ftest.c"
   , "===== FAIL" " %s\n",failed_lst->name); } }while(0); failed_lst = failed_lst->next; }
  }
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 544 "src/ftest/ftest.c" 3 4
 stdout
# 544 "src/ftest/ftest.c"
 , "\033[0m" "==========" "\033[0m" "%s\n",""); else fprintf(
# 544 "src/ftest/ftest.c" 3 4
 stdout
# 544 "src/ftest/ftest.c"
 , "==========" "%s\n",""); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0m" "==========" "\033[0m" "%s\n",""); else fprintf(f_ou_th[id_thread], "==========" "%s\n",""); } } else{ if(!unicolour) fprintf(
# 544 "src/ftest/ftest.c" 3 4
 stdout
# 544 "src/ftest/ftest.c"
 , "\033[0m" "==========" "\033[0m" "%s\n",""); else fprintf(
# 544 "src/ftest/ftest.c" 3 4
 stdout
# 544 "src/ftest/ftest.c"
 , "==========" "%s\n",""); } } else{ if(!unicolour) fprintf(
# 544 "src/ftest/ftest.c" 3 4
 stdout
# 544 "src/ftest/ftest.c"
 , "\033[0m" "==========" "\033[0m" "%s\n",""); else fprintf(
# 544 "src/ftest/ftest.c" 3 4
 stdout
# 544 "src/ftest/ftest.c"
 , "==========" "%s\n",""); } }while(0);
}
# 581 "src/ftest/ftest.c"

# 581 "src/ftest/ftest.c" 3 4
_Bool 
# 581 "src/ftest/ftest.c"
expected_true_f(
# 581 "src/ftest/ftest.c" 3 4
_Bool 
# 581 "src/ftest/ftest.c"
val){ if(val == 
# 581 "src/ftest/ftest.c" 3 4
1
# 581 "src/ftest/ftest.c"
) { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 581 "src/ftest/ftest.c" 3 4
1
# 581 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 581 "src/ftest/ftest.c" 3 4
0
# 581 "src/ftest/ftest.c"
; } } 
# 581 "src/ftest/ftest.c" 3 4
_Bool 
# 581 "src/ftest/ftest.c"
expected_true_f_name(
# 581 "src/ftest/ftest.c" 3 4
_Bool 
# 581 "src/ftest/ftest.c"
val, const char * name){ if(val == 
# 581 "src/ftest/ftest.c" 3 4
1
# 581 "src/ftest/ftest.c"
) { do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 581 "src/ftest/ftest.c" 3 4
stderr
# 581 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 581, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 581 "src/ftest/ftest.c" 3 4
1
# 581 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 581 "src/ftest/ftest.c" 3 4
stderr
# 581 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 581, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 581 "src/ftest/ftest.c" 3 4
0
# 581 "src/ftest/ftest.c"
; } }

# 582 "src/ftest/ftest.c" 3 4
_Bool 
# 582 "src/ftest/ftest.c"
expected_false_f(
# 582 "src/ftest/ftest.c" 3 4
_Bool 
# 582 "src/ftest/ftest.c"
val){ if(val == 
# 582 "src/ftest/ftest.c" 3 4
0
# 582 "src/ftest/ftest.c"
) { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 582 "src/ftest/ftest.c" 3 4
1
# 582 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 582 "src/ftest/ftest.c" 3 4
0
# 582 "src/ftest/ftest.c"
; } } 
# 582 "src/ftest/ftest.c" 3 4
_Bool 
# 582 "src/ftest/ftest.c"
expected_false_f_name(
# 582 "src/ftest/ftest.c" 3 4
_Bool 
# 582 "src/ftest/ftest.c"
val, const char * name){ if(val == 
# 582 "src/ftest/ftest.c" 3 4
0
# 582 "src/ftest/ftest.c"
) { do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 582 "src/ftest/ftest.c" 3 4
stderr
# 582 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 582, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 582 "src/ftest/ftest.c" 3 4
1
# 582 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 582 "src/ftest/ftest.c" 3 4
stderr
# 582 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 582, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 582 "src/ftest/ftest.c" 3 4
0
# 582 "src/ftest/ftest.c"
; } }
# 605 "src/ftest/ftest.c"

# 605 "src/ftest/ftest.c" 3 4
_Bool 
# 605 "src/ftest/ftest.c"
expected_EQ_TYPE_CHAR(char var1, char var2){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 605 "src/ftest/ftest.c" 3 4
1
# 605 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 605 "src/ftest/ftest.c" 3 4
0
# 605 "src/ftest/ftest.c"
; } } 
# 605 "src/ftest/ftest.c" 3 4
_Bool 
# 605 "src/ftest/ftest.c"
expected_EQ_name_TYPE_CHAR(char var1, char var2,const char * name){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 605 "src/ftest/ftest.c" 3 4
stderr
# 605 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 605, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 605 "src/ftest/ftest.c" 3 4
1
# 605 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 605 "src/ftest/ftest.c" 3 4
stderr
# 605 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 605, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 605 "src/ftest/ftest.c" 3 4
0
# 605 "src/ftest/ftest.c"
; } }

# 606 "src/ftest/ftest.c" 3 4
_Bool 
# 606 "src/ftest/ftest.c"
expected_EQ_TYPE_U_CHAR(unsigned char var1, unsigned char var2){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 606 "src/ftest/ftest.c" 3 4
1
# 606 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 606 "src/ftest/ftest.c" 3 4
0
# 606 "src/ftest/ftest.c"
; } } 
# 606 "src/ftest/ftest.c" 3 4
_Bool 
# 606 "src/ftest/ftest.c"
expected_EQ_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2,const char * name){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 606 "src/ftest/ftest.c" 3 4
stderr
# 606 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 606, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 606 "src/ftest/ftest.c" 3 4
1
# 606 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 606 "src/ftest/ftest.c" 3 4
stderr
# 606 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 606, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 606 "src/ftest/ftest.c" 3 4
0
# 606 "src/ftest/ftest.c"
; } }

# 607 "src/ftest/ftest.c" 3 4
_Bool 
# 607 "src/ftest/ftest.c"
expected_EQ_TYPE_INT(int var1, int var2){ if(COMPARE_N_TYPE_INT(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 607 "src/ftest/ftest.c" 3 4
1
# 607 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 607 "src/ftest/ftest.c" 3 4
0
# 607 "src/ftest/ftest.c"
; } } 
# 607 "src/ftest/ftest.c" 3 4
_Bool 
# 607 "src/ftest/ftest.c"
expected_EQ_name_TYPE_INT(int var1, int var2,const char * name){ if(COMPARE_N_TYPE_INT(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 607 "src/ftest/ftest.c" 3 4
stderr
# 607 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 607, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 607 "src/ftest/ftest.c" 3 4
1
# 607 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 607 "src/ftest/ftest.c" 3 4
stderr
# 607 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 607, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 607 "src/ftest/ftest.c" 3 4
0
# 607 "src/ftest/ftest.c"
; } }

# 608 "src/ftest/ftest.c" 3 4
_Bool 
# 608 "src/ftest/ftest.c"
expected_EQ_TYPE_U_INT(unsigned int var1, unsigned int var2){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 608 "src/ftest/ftest.c" 3 4
1
# 608 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 608 "src/ftest/ftest.c" 3 4
0
# 608 "src/ftest/ftest.c"
; } } 
# 608 "src/ftest/ftest.c" 3 4
_Bool 
# 608 "src/ftest/ftest.c"
expected_EQ_name_TYPE_U_INT(unsigned int var1, unsigned int var2,const char * name){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 608 "src/ftest/ftest.c" 3 4
stderr
# 608 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 608, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 608 "src/ftest/ftest.c" 3 4
1
# 608 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 608 "src/ftest/ftest.c" 3 4
stderr
# 608 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 608, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 608 "src/ftest/ftest.c" 3 4
0
# 608 "src/ftest/ftest.c"
; } }

# 609 "src/ftest/ftest.c" 3 4
_Bool 
# 609 "src/ftest/ftest.c"
expected_EQ_TYPE_L_INT(long int var1, long int var2){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 609 "src/ftest/ftest.c" 3 4
1
# 609 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 609 "src/ftest/ftest.c" 3 4
0
# 609 "src/ftest/ftest.c"
; } } 
# 609 "src/ftest/ftest.c" 3 4
_Bool 
# 609 "src/ftest/ftest.c"
expected_EQ_name_TYPE_L_INT(long int var1, long int var2,const char * name){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 609 "src/ftest/ftest.c" 3 4
stderr
# 609 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 609, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 609 "src/ftest/ftest.c" 3 4
1
# 609 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 609 "src/ftest/ftest.c" 3 4
stderr
# 609 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 609, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 609 "src/ftest/ftest.c" 3 4
0
# 609 "src/ftest/ftest.c"
; } }

# 610 "src/ftest/ftest.c" 3 4
_Bool 
# 610 "src/ftest/ftest.c"
expected_EQ_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 610 "src/ftest/ftest.c" 3 4
1
# 610 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 610 "src/ftest/ftest.c" 3 4
0
# 610 "src/ftest/ftest.c"
; } } 
# 610 "src/ftest/ftest.c" 3 4
_Bool 
# 610 "src/ftest/ftest.c"
expected_EQ_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2,const char * name){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 610 "src/ftest/ftest.c" 3 4
stderr
# 610 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 610, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 610 "src/ftest/ftest.c" 3 4
1
# 610 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 610 "src/ftest/ftest.c" 3 4
stderr
# 610 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 610, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 610 "src/ftest/ftest.c" 3 4
0
# 610 "src/ftest/ftest.c"
; } }

# 611 "src/ftest/ftest.c" 3 4
_Bool 
# 611 "src/ftest/ftest.c"
expected_EQ_TYPE_SIZE_T(size_t var1, size_t var2){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 611 "src/ftest/ftest.c" 3 4
1
# 611 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 611 "src/ftest/ftest.c" 3 4
0
# 611 "src/ftest/ftest.c"
; } } 
# 611 "src/ftest/ftest.c" 3 4
_Bool 
# 611 "src/ftest/ftest.c"
expected_EQ_name_TYPE_SIZE_T(size_t var1, size_t var2,const char * name){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 611 "src/ftest/ftest.c" 3 4
stderr
# 611 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 611, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 611 "src/ftest/ftest.c" 3 4
1
# 611 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 611 "src/ftest/ftest.c" 3 4
stderr
# 611 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 611, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 611 "src/ftest/ftest.c" 3 4
0
# 611 "src/ftest/ftest.c"
; } }

# 612 "src/ftest/ftest.c" 3 4
_Bool 
# 612 "src/ftest/ftest.c"
expected_EQ_TYPE_FLOAT(float var1, float var2){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 612 "src/ftest/ftest.c" 3 4
1
# 612 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 612 "src/ftest/ftest.c" 3 4
0
# 612 "src/ftest/ftest.c"
; } } 
# 612 "src/ftest/ftest.c" 3 4
_Bool 
# 612 "src/ftest/ftest.c"
expected_EQ_name_TYPE_FLOAT(float var1, float var2,const char * name){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 612 "src/ftest/ftest.c" 3 4
stderr
# 612 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 612, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 612 "src/ftest/ftest.c" 3 4
1
# 612 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 612 "src/ftest/ftest.c" 3 4
stderr
# 612 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 612, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 612 "src/ftest/ftest.c" 3 4
0
# 612 "src/ftest/ftest.c"
; } }

# 613 "src/ftest/ftest.c" 3 4
_Bool 
# 613 "src/ftest/ftest.c"
expected_EQ_TYPE_DOUBLE(double var1, double var2){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 613 "src/ftest/ftest.c" 3 4
1
# 613 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 613 "src/ftest/ftest.c" 3 4
0
# 613 "src/ftest/ftest.c"
; } } 
# 613 "src/ftest/ftest.c" 3 4
_Bool 
# 613 "src/ftest/ftest.c"
expected_EQ_name_TYPE_DOUBLE(double var1, double var2,const char * name){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 613 "src/ftest/ftest.c" 3 4
stderr
# 613 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 613, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 613 "src/ftest/ftest.c" 3 4
1
# 613 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 613 "src/ftest/ftest.c" 3 4
stderr
# 613 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 613, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 613 "src/ftest/ftest.c" 3 4
0
# 613 "src/ftest/ftest.c"
; } }

# 614 "src/ftest/ftest.c" 3 4
_Bool 
# 614 "src/ftest/ftest.c"
expected_EQ_TYPE_L_DOUBLE(long double var1, long double var2){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 614 "src/ftest/ftest.c" 3 4
1
# 614 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 614 "src/ftest/ftest.c" 3 4
0
# 614 "src/ftest/ftest.c"
; } } 
# 614 "src/ftest/ftest.c" 3 4
_Bool 
# 614 "src/ftest/ftest.c"
expected_EQ_name_TYPE_L_DOUBLE(long double var1, long double var2,const char * name){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 614 "src/ftest/ftest.c" 3 4
stderr
# 614 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 614, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 614 "src/ftest/ftest.c" 3 4
1
# 614 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 614 "src/ftest/ftest.c" 3 4
stderr
# 614 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 614, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 614 "src/ftest/ftest.c" 3 4
0
# 614 "src/ftest/ftest.c"
; } }

# 615 "src/ftest/ftest.c" 3 4
_Bool 
# 615 "src/ftest/ftest.c"
expected_EQ_TYPE_STRING(char* var1, char* var2){ if(COMPARE_N_TYPE_STRING(&var1, &var2) == 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 615 "src/ftest/ftest.c" 3 4
1
# 615 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 615 "src/ftest/ftest.c" 3 4
0
# 615 "src/ftest/ftest.c"
; } } 
# 615 "src/ftest/ftest.c" 3 4
_Bool 
# 615 "src/ftest/ftest.c"
expected_EQ_name_TYPE_STRING(char* var1, char* var2,const char * name){ if(COMPARE_N_TYPE_STRING(&var1, &var2) == 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 615 "src/ftest/ftest.c" 3 4
stderr
# 615 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 615, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 615 "src/ftest/ftest.c" 3 4
1
# 615 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 615 "src/ftest/ftest.c" 3 4
stderr
# 615 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 615, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 615 "src/ftest/ftest.c" 3 4
0
# 615 "src/ftest/ftest.c"
; } }


# 617 "src/ftest/ftest.c" 3 4
_Bool 
# 617 "src/ftest/ftest.c"
expected_LT_TYPE_CHAR(char var1, char var2){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 617 "src/ftest/ftest.c" 3 4
1
# 617 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 617 "src/ftest/ftest.c" 3 4
0
# 617 "src/ftest/ftest.c"
; } } 
# 617 "src/ftest/ftest.c" 3 4
_Bool 
# 617 "src/ftest/ftest.c"
expected_LT_name_TYPE_CHAR(char var1, char var2,const char * name){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 617 "src/ftest/ftest.c" 3 4
stderr
# 617 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 617, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 617 "src/ftest/ftest.c" 3 4
1
# 617 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 617 "src/ftest/ftest.c" 3 4
stderr
# 617 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 617, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 617 "src/ftest/ftest.c" 3 4
0
# 617 "src/ftest/ftest.c"
; } }

# 618 "src/ftest/ftest.c" 3 4
_Bool 
# 618 "src/ftest/ftest.c"
expected_LT_TYPE_U_CHAR(unsigned char var1, unsigned char var2){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 618 "src/ftest/ftest.c" 3 4
1
# 618 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 618 "src/ftest/ftest.c" 3 4
0
# 618 "src/ftest/ftest.c"
; } } 
# 618 "src/ftest/ftest.c" 3 4
_Bool 
# 618 "src/ftest/ftest.c"
expected_LT_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2,const char * name){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 618 "src/ftest/ftest.c" 3 4
stderr
# 618 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 618, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 618 "src/ftest/ftest.c" 3 4
1
# 618 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 618 "src/ftest/ftest.c" 3 4
stderr
# 618 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 618, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 618 "src/ftest/ftest.c" 3 4
0
# 618 "src/ftest/ftest.c"
; } }

# 619 "src/ftest/ftest.c" 3 4
_Bool 
# 619 "src/ftest/ftest.c"
expected_LT_TYPE_INT(int var1, int var2){ if(COMPARE_N_TYPE_INT(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 619 "src/ftest/ftest.c" 3 4
1
# 619 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 619 "src/ftest/ftest.c" 3 4
0
# 619 "src/ftest/ftest.c"
; } } 
# 619 "src/ftest/ftest.c" 3 4
_Bool 
# 619 "src/ftest/ftest.c"
expected_LT_name_TYPE_INT(int var1, int var2,const char * name){ if(COMPARE_N_TYPE_INT(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 619 "src/ftest/ftest.c" 3 4
stderr
# 619 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 619, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 619 "src/ftest/ftest.c" 3 4
1
# 619 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 619 "src/ftest/ftest.c" 3 4
stderr
# 619 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 619, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 619 "src/ftest/ftest.c" 3 4
0
# 619 "src/ftest/ftest.c"
; } }

# 620 "src/ftest/ftest.c" 3 4
_Bool 
# 620 "src/ftest/ftest.c"
expected_LT_TYPE_U_INT(unsigned int var1, unsigned int var2){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 620 "src/ftest/ftest.c" 3 4
1
# 620 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 620 "src/ftest/ftest.c" 3 4
0
# 620 "src/ftest/ftest.c"
; } } 
# 620 "src/ftest/ftest.c" 3 4
_Bool 
# 620 "src/ftest/ftest.c"
expected_LT_name_TYPE_U_INT(unsigned int var1, unsigned int var2,const char * name){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 620 "src/ftest/ftest.c" 3 4
stderr
# 620 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 620, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 620 "src/ftest/ftest.c" 3 4
1
# 620 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 620 "src/ftest/ftest.c" 3 4
stderr
# 620 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 620, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 620 "src/ftest/ftest.c" 3 4
0
# 620 "src/ftest/ftest.c"
; } }

# 621 "src/ftest/ftest.c" 3 4
_Bool 
# 621 "src/ftest/ftest.c"
expected_LT_TYPE_L_INT(long int var1, long int var2){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 621 "src/ftest/ftest.c" 3 4
1
# 621 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 621 "src/ftest/ftest.c" 3 4
0
# 621 "src/ftest/ftest.c"
; } } 
# 621 "src/ftest/ftest.c" 3 4
_Bool 
# 621 "src/ftest/ftest.c"
expected_LT_name_TYPE_L_INT(long int var1, long int var2,const char * name){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 621 "src/ftest/ftest.c" 3 4
stderr
# 621 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 621, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 621 "src/ftest/ftest.c" 3 4
1
# 621 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 621 "src/ftest/ftest.c" 3 4
stderr
# 621 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 621, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 621 "src/ftest/ftest.c" 3 4
0
# 621 "src/ftest/ftest.c"
; } }

# 622 "src/ftest/ftest.c" 3 4
_Bool 
# 622 "src/ftest/ftest.c"
expected_LT_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 622 "src/ftest/ftest.c" 3 4
1
# 622 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 622 "src/ftest/ftest.c" 3 4
0
# 622 "src/ftest/ftest.c"
; } } 
# 622 "src/ftest/ftest.c" 3 4
_Bool 
# 622 "src/ftest/ftest.c"
expected_LT_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2,const char * name){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 622 "src/ftest/ftest.c" 3 4
stderr
# 622 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 622, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 622 "src/ftest/ftest.c" 3 4
1
# 622 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 622 "src/ftest/ftest.c" 3 4
stderr
# 622 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 622, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 622 "src/ftest/ftest.c" 3 4
0
# 622 "src/ftest/ftest.c"
; } }

# 623 "src/ftest/ftest.c" 3 4
_Bool 
# 623 "src/ftest/ftest.c"
expected_LT_TYPE_SIZE_T(size_t var1, size_t var2){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 623 "src/ftest/ftest.c" 3 4
1
# 623 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 623 "src/ftest/ftest.c" 3 4
0
# 623 "src/ftest/ftest.c"
; } } 
# 623 "src/ftest/ftest.c" 3 4
_Bool 
# 623 "src/ftest/ftest.c"
expected_LT_name_TYPE_SIZE_T(size_t var1, size_t var2,const char * name){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 623 "src/ftest/ftest.c" 3 4
stderr
# 623 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 623, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 623 "src/ftest/ftest.c" 3 4
1
# 623 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 623 "src/ftest/ftest.c" 3 4
stderr
# 623 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 623, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 623 "src/ftest/ftest.c" 3 4
0
# 623 "src/ftest/ftest.c"
; } }

# 624 "src/ftest/ftest.c" 3 4
_Bool 
# 624 "src/ftest/ftest.c"
expected_LT_TYPE_FLOAT(float var1, float var2){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 624 "src/ftest/ftest.c" 3 4
1
# 624 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 624 "src/ftest/ftest.c" 3 4
0
# 624 "src/ftest/ftest.c"
; } } 
# 624 "src/ftest/ftest.c" 3 4
_Bool 
# 624 "src/ftest/ftest.c"
expected_LT_name_TYPE_FLOAT(float var1, float var2,const char * name){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 624 "src/ftest/ftest.c" 3 4
stderr
# 624 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 624, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 624 "src/ftest/ftest.c" 3 4
1
# 624 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 624 "src/ftest/ftest.c" 3 4
stderr
# 624 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 624, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 624 "src/ftest/ftest.c" 3 4
0
# 624 "src/ftest/ftest.c"
; } }

# 625 "src/ftest/ftest.c" 3 4
_Bool 
# 625 "src/ftest/ftest.c"
expected_LT_TYPE_DOUBLE(double var1, double var2){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 625 "src/ftest/ftest.c" 3 4
1
# 625 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 625 "src/ftest/ftest.c" 3 4
0
# 625 "src/ftest/ftest.c"
; } } 
# 625 "src/ftest/ftest.c" 3 4
_Bool 
# 625 "src/ftest/ftest.c"
expected_LT_name_TYPE_DOUBLE(double var1, double var2,const char * name){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 625 "src/ftest/ftest.c" 3 4
stderr
# 625 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 625, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 625 "src/ftest/ftest.c" 3 4
1
# 625 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 625 "src/ftest/ftest.c" 3 4
stderr
# 625 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 625, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 625 "src/ftest/ftest.c" 3 4
0
# 625 "src/ftest/ftest.c"
; } }

# 626 "src/ftest/ftest.c" 3 4
_Bool 
# 626 "src/ftest/ftest.c"
expected_LT_TYPE_L_DOUBLE(long double var1, long double var2){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 626 "src/ftest/ftest.c" 3 4
1
# 626 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 626 "src/ftest/ftest.c" 3 4
0
# 626 "src/ftest/ftest.c"
; } } 
# 626 "src/ftest/ftest.c" 3 4
_Bool 
# 626 "src/ftest/ftest.c"
expected_LT_name_TYPE_L_DOUBLE(long double var1, long double var2,const char * name){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 626 "src/ftest/ftest.c" 3 4
stderr
# 626 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 626, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 626 "src/ftest/ftest.c" 3 4
1
# 626 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 626 "src/ftest/ftest.c" 3 4
stderr
# 626 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 626, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 626 "src/ftest/ftest.c" 3 4
0
# 626 "src/ftest/ftest.c"
; } }

# 627 "src/ftest/ftest.c" 3 4
_Bool 
# 627 "src/ftest/ftest.c"
expected_LT_TYPE_STRING(char* var1, char* var2){ if(COMPARE_N_TYPE_STRING(&var1, &var2) < 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 627 "src/ftest/ftest.c" 3 4
1
# 627 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 627 "src/ftest/ftest.c" 3 4
0
# 627 "src/ftest/ftest.c"
; } } 
# 627 "src/ftest/ftest.c" 3 4
_Bool 
# 627 "src/ftest/ftest.c"
expected_LT_name_TYPE_STRING(char* var1, char* var2,const char * name){ if(COMPARE_N_TYPE_STRING(&var1, &var2) < 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 627 "src/ftest/ftest.c" 3 4
stderr
# 627 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 627, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 627 "src/ftest/ftest.c" 3 4
1
# 627 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 627 "src/ftest/ftest.c" 3 4
stderr
# 627 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 627, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 627 "src/ftest/ftest.c" 3 4
0
# 627 "src/ftest/ftest.c"
; } }


# 629 "src/ftest/ftest.c" 3 4
_Bool 
# 629 "src/ftest/ftest.c"
expected_GT_TYPE_CHAR(char var1, char var2){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 629 "src/ftest/ftest.c" 3 4
1
# 629 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 629 "src/ftest/ftest.c" 3 4
0
# 629 "src/ftest/ftest.c"
; } } 
# 629 "src/ftest/ftest.c" 3 4
_Bool 
# 629 "src/ftest/ftest.c"
expected_GT_name_TYPE_CHAR(char var1, char var2,const char * name){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 629 "src/ftest/ftest.c" 3 4
stderr
# 629 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 629, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 629 "src/ftest/ftest.c" 3 4
1
# 629 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 629 "src/ftest/ftest.c" 3 4
stderr
# 629 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 629, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 629 "src/ftest/ftest.c" 3 4
0
# 629 "src/ftest/ftest.c"
; } }

# 630 "src/ftest/ftest.c" 3 4
_Bool 
# 630 "src/ftest/ftest.c"
expected_GT_TYPE_U_CHAR(unsigned char var1, unsigned char var2){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 630 "src/ftest/ftest.c" 3 4
1
# 630 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 630 "src/ftest/ftest.c" 3 4
0
# 630 "src/ftest/ftest.c"
; } } 
# 630 "src/ftest/ftest.c" 3 4
_Bool 
# 630 "src/ftest/ftest.c"
expected_GT_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2,const char * name){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 630 "src/ftest/ftest.c" 3 4
stderr
# 630 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 630, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 630 "src/ftest/ftest.c" 3 4
1
# 630 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 630 "src/ftest/ftest.c" 3 4
stderr
# 630 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 630, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 630 "src/ftest/ftest.c" 3 4
0
# 630 "src/ftest/ftest.c"
; } }

# 631 "src/ftest/ftest.c" 3 4
_Bool 
# 631 "src/ftest/ftest.c"
expected_GT_TYPE_INT(int var1, int var2){ if(COMPARE_N_TYPE_INT(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 631 "src/ftest/ftest.c" 3 4
1
# 631 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 631 "src/ftest/ftest.c" 3 4
0
# 631 "src/ftest/ftest.c"
; } } 
# 631 "src/ftest/ftest.c" 3 4
_Bool 
# 631 "src/ftest/ftest.c"
expected_GT_name_TYPE_INT(int var1, int var2,const char * name){ if(COMPARE_N_TYPE_INT(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 631 "src/ftest/ftest.c" 3 4
stderr
# 631 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 631, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 631 "src/ftest/ftest.c" 3 4
1
# 631 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 631 "src/ftest/ftest.c" 3 4
stderr
# 631 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 631, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 631 "src/ftest/ftest.c" 3 4
0
# 631 "src/ftest/ftest.c"
; } }

# 632 "src/ftest/ftest.c" 3 4
_Bool 
# 632 "src/ftest/ftest.c"
expected_GT_TYPE_U_INT(unsigned int var1, unsigned int var2){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 632 "src/ftest/ftest.c" 3 4
1
# 632 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 632 "src/ftest/ftest.c" 3 4
0
# 632 "src/ftest/ftest.c"
; } } 
# 632 "src/ftest/ftest.c" 3 4
_Bool 
# 632 "src/ftest/ftest.c"
expected_GT_name_TYPE_U_INT(unsigned int var1, unsigned int var2,const char * name){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 632 "src/ftest/ftest.c" 3 4
stderr
# 632 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 632, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 632 "src/ftest/ftest.c" 3 4
1
# 632 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 632 "src/ftest/ftest.c" 3 4
stderr
# 632 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 632, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 632 "src/ftest/ftest.c" 3 4
0
# 632 "src/ftest/ftest.c"
; } }

# 633 "src/ftest/ftest.c" 3 4
_Bool 
# 633 "src/ftest/ftest.c"
expected_GT_TYPE_L_INT(long int var1, long int var2){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 633 "src/ftest/ftest.c" 3 4
1
# 633 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 633 "src/ftest/ftest.c" 3 4
0
# 633 "src/ftest/ftest.c"
; } } 
# 633 "src/ftest/ftest.c" 3 4
_Bool 
# 633 "src/ftest/ftest.c"
expected_GT_name_TYPE_L_INT(long int var1, long int var2,const char * name){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 633 "src/ftest/ftest.c" 3 4
stderr
# 633 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 633, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 633 "src/ftest/ftest.c" 3 4
1
# 633 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 633 "src/ftest/ftest.c" 3 4
stderr
# 633 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 633, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 633 "src/ftest/ftest.c" 3 4
0
# 633 "src/ftest/ftest.c"
; } }

# 634 "src/ftest/ftest.c" 3 4
_Bool 
# 634 "src/ftest/ftest.c"
expected_GT_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 634 "src/ftest/ftest.c" 3 4
1
# 634 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 634 "src/ftest/ftest.c" 3 4
0
# 634 "src/ftest/ftest.c"
; } } 
# 634 "src/ftest/ftest.c" 3 4
_Bool 
# 634 "src/ftest/ftest.c"
expected_GT_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2,const char * name){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 634 "src/ftest/ftest.c" 3 4
stderr
# 634 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 634, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 634 "src/ftest/ftest.c" 3 4
1
# 634 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 634 "src/ftest/ftest.c" 3 4
stderr
# 634 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 634, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 634 "src/ftest/ftest.c" 3 4
0
# 634 "src/ftest/ftest.c"
; } }

# 635 "src/ftest/ftest.c" 3 4
_Bool 
# 635 "src/ftest/ftest.c"
expected_GT_TYPE_SIZE_T(size_t var1, size_t var2){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 635 "src/ftest/ftest.c" 3 4
1
# 635 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 635 "src/ftest/ftest.c" 3 4
0
# 635 "src/ftest/ftest.c"
; } } 
# 635 "src/ftest/ftest.c" 3 4
_Bool 
# 635 "src/ftest/ftest.c"
expected_GT_name_TYPE_SIZE_T(size_t var1, size_t var2,const char * name){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 635 "src/ftest/ftest.c" 3 4
stderr
# 635 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 635, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 635 "src/ftest/ftest.c" 3 4
1
# 635 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 635 "src/ftest/ftest.c" 3 4
stderr
# 635 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 635, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 635 "src/ftest/ftest.c" 3 4
0
# 635 "src/ftest/ftest.c"
; } }

# 636 "src/ftest/ftest.c" 3 4
_Bool 
# 636 "src/ftest/ftest.c"
expected_GT_TYPE_FLOAT(float var1, float var2){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 636 "src/ftest/ftest.c" 3 4
1
# 636 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 636 "src/ftest/ftest.c" 3 4
0
# 636 "src/ftest/ftest.c"
; } } 
# 636 "src/ftest/ftest.c" 3 4
_Bool 
# 636 "src/ftest/ftest.c"
expected_GT_name_TYPE_FLOAT(float var1, float var2,const char * name){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 636 "src/ftest/ftest.c" 3 4
stderr
# 636 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 636, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 636 "src/ftest/ftest.c" 3 4
1
# 636 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 636 "src/ftest/ftest.c" 3 4
stderr
# 636 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 636, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 636 "src/ftest/ftest.c" 3 4
0
# 636 "src/ftest/ftest.c"
; } }

# 637 "src/ftest/ftest.c" 3 4
_Bool 
# 637 "src/ftest/ftest.c"
expected_GT_TYPE_DOUBLE(double var1, double var2){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 637 "src/ftest/ftest.c" 3 4
1
# 637 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 637 "src/ftest/ftest.c" 3 4
0
# 637 "src/ftest/ftest.c"
; } } 
# 637 "src/ftest/ftest.c" 3 4
_Bool 
# 637 "src/ftest/ftest.c"
expected_GT_name_TYPE_DOUBLE(double var1, double var2,const char * name){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 637 "src/ftest/ftest.c" 3 4
stderr
# 637 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 637, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 637 "src/ftest/ftest.c" 3 4
1
# 637 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 637 "src/ftest/ftest.c" 3 4
stderr
# 637 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 637, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 637 "src/ftest/ftest.c" 3 4
0
# 637 "src/ftest/ftest.c"
; } }

# 638 "src/ftest/ftest.c" 3 4
_Bool 
# 638 "src/ftest/ftest.c"
expected_GT_TYPE_L_DOUBLE(long double var1, long double var2){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 638 "src/ftest/ftest.c" 3 4
1
# 638 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 638 "src/ftest/ftest.c" 3 4
0
# 638 "src/ftest/ftest.c"
; } } 
# 638 "src/ftest/ftest.c" 3 4
_Bool 
# 638 "src/ftest/ftest.c"
expected_GT_name_TYPE_L_DOUBLE(long double var1, long double var2,const char * name){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 638 "src/ftest/ftest.c" 3 4
stderr
# 638 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 638, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 638 "src/ftest/ftest.c" 3 4
1
# 638 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 638 "src/ftest/ftest.c" 3 4
stderr
# 638 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 638, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 638 "src/ftest/ftest.c" 3 4
0
# 638 "src/ftest/ftest.c"
; } }

# 639 "src/ftest/ftest.c" 3 4
_Bool 
# 639 "src/ftest/ftest.c"
expected_GT_TYPE_STRING(char* var1, char* var2){ if(COMPARE_N_TYPE_STRING(&var1, &var2) > 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 639 "src/ftest/ftest.c" 3 4
1
# 639 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 639 "src/ftest/ftest.c" 3 4
0
# 639 "src/ftest/ftest.c"
; } } 
# 639 "src/ftest/ftest.c" 3 4
_Bool 
# 639 "src/ftest/ftest.c"
expected_GT_name_TYPE_STRING(char* var1, char* var2,const char * name){ if(COMPARE_N_TYPE_STRING(&var1, &var2) > 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 639 "src/ftest/ftest.c" 3 4
stderr
# 639 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 639, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 639 "src/ftest/ftest.c" 3 4
1
# 639 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 639 "src/ftest/ftest.c" 3 4
stderr
# 639 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 639, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 639 "src/ftest/ftest.c" 3 4
0
# 639 "src/ftest/ftest.c"
; } }


# 641 "src/ftest/ftest.c" 3 4
_Bool 
# 641 "src/ftest/ftest.c"
expected_LE_TYPE_CHAR(char var1, char var2){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 641 "src/ftest/ftest.c" 3 4
1
# 641 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 641 "src/ftest/ftest.c" 3 4
0
# 641 "src/ftest/ftest.c"
; } } 
# 641 "src/ftest/ftest.c" 3 4
_Bool 
# 641 "src/ftest/ftest.c"
expected_LE_name_TYPE_CHAR(char var1, char var2,const char * name){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 641 "src/ftest/ftest.c" 3 4
stderr
# 641 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 641, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 641 "src/ftest/ftest.c" 3 4
1
# 641 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 641 "src/ftest/ftest.c" 3 4
stderr
# 641 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 641, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 641 "src/ftest/ftest.c" 3 4
0
# 641 "src/ftest/ftest.c"
; } }

# 642 "src/ftest/ftest.c" 3 4
_Bool 
# 642 "src/ftest/ftest.c"
expected_LE_TYPE_U_CHAR(unsigned char var1, unsigned char var2){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 642 "src/ftest/ftest.c" 3 4
1
# 642 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 642 "src/ftest/ftest.c" 3 4
0
# 642 "src/ftest/ftest.c"
; } } 
# 642 "src/ftest/ftest.c" 3 4
_Bool 
# 642 "src/ftest/ftest.c"
expected_LE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2,const char * name){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 642 "src/ftest/ftest.c" 3 4
stderr
# 642 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 642, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 642 "src/ftest/ftest.c" 3 4
1
# 642 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 642 "src/ftest/ftest.c" 3 4
stderr
# 642 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 642, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 642 "src/ftest/ftest.c" 3 4
0
# 642 "src/ftest/ftest.c"
; } }

# 643 "src/ftest/ftest.c" 3 4
_Bool 
# 643 "src/ftest/ftest.c"
expected_LE_TYPE_INT(int var1, int var2){ if(COMPARE_N_TYPE_INT(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 643 "src/ftest/ftest.c" 3 4
1
# 643 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 643 "src/ftest/ftest.c" 3 4
0
# 643 "src/ftest/ftest.c"
; } } 
# 643 "src/ftest/ftest.c" 3 4
_Bool 
# 643 "src/ftest/ftest.c"
expected_LE_name_TYPE_INT(int var1, int var2,const char * name){ if(COMPARE_N_TYPE_INT(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 643 "src/ftest/ftest.c" 3 4
stderr
# 643 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 643, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 643 "src/ftest/ftest.c" 3 4
1
# 643 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 643 "src/ftest/ftest.c" 3 4
stderr
# 643 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 643, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 643 "src/ftest/ftest.c" 3 4
0
# 643 "src/ftest/ftest.c"
; } }

# 644 "src/ftest/ftest.c" 3 4
_Bool 
# 644 "src/ftest/ftest.c"
expected_LE_TYPE_U_INT(unsigned int var1, unsigned int var2){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 644 "src/ftest/ftest.c" 3 4
1
# 644 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 644 "src/ftest/ftest.c" 3 4
0
# 644 "src/ftest/ftest.c"
; } } 
# 644 "src/ftest/ftest.c" 3 4
_Bool 
# 644 "src/ftest/ftest.c"
expected_LE_name_TYPE_U_INT(unsigned int var1, unsigned int var2,const char * name){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 644 "src/ftest/ftest.c" 3 4
stderr
# 644 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 644, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 644 "src/ftest/ftest.c" 3 4
1
# 644 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 644 "src/ftest/ftest.c" 3 4
stderr
# 644 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 644, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 644 "src/ftest/ftest.c" 3 4
0
# 644 "src/ftest/ftest.c"
; } }

# 645 "src/ftest/ftest.c" 3 4
_Bool 
# 645 "src/ftest/ftest.c"
expected_LE_TYPE_L_INT(long int var1, long int var2){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 645 "src/ftest/ftest.c" 3 4
1
# 645 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 645 "src/ftest/ftest.c" 3 4
0
# 645 "src/ftest/ftest.c"
; } } 
# 645 "src/ftest/ftest.c" 3 4
_Bool 
# 645 "src/ftest/ftest.c"
expected_LE_name_TYPE_L_INT(long int var1, long int var2,const char * name){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 645 "src/ftest/ftest.c" 3 4
stderr
# 645 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 645, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 645 "src/ftest/ftest.c" 3 4
1
# 645 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 645 "src/ftest/ftest.c" 3 4
stderr
# 645 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 645, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 645 "src/ftest/ftest.c" 3 4
0
# 645 "src/ftest/ftest.c"
; } }

# 646 "src/ftest/ftest.c" 3 4
_Bool 
# 646 "src/ftest/ftest.c"
expected_LE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 646 "src/ftest/ftest.c" 3 4
1
# 646 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 646 "src/ftest/ftest.c" 3 4
0
# 646 "src/ftest/ftest.c"
; } } 
# 646 "src/ftest/ftest.c" 3 4
_Bool 
# 646 "src/ftest/ftest.c"
expected_LE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2,const char * name){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 646 "src/ftest/ftest.c" 3 4
stderr
# 646 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 646, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 646 "src/ftest/ftest.c" 3 4
1
# 646 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 646 "src/ftest/ftest.c" 3 4
stderr
# 646 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 646, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 646 "src/ftest/ftest.c" 3 4
0
# 646 "src/ftest/ftest.c"
; } }

# 647 "src/ftest/ftest.c" 3 4
_Bool 
# 647 "src/ftest/ftest.c"
expected_LE_TYPE_SIZE_T(size_t var1, size_t var2){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 647 "src/ftest/ftest.c" 3 4
1
# 647 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 647 "src/ftest/ftest.c" 3 4
0
# 647 "src/ftest/ftest.c"
; } } 
# 647 "src/ftest/ftest.c" 3 4
_Bool 
# 647 "src/ftest/ftest.c"
expected_LE_name_TYPE_SIZE_T(size_t var1, size_t var2,const char * name){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 647 "src/ftest/ftest.c" 3 4
stderr
# 647 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 647, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 647 "src/ftest/ftest.c" 3 4
1
# 647 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 647 "src/ftest/ftest.c" 3 4
stderr
# 647 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 647, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 647 "src/ftest/ftest.c" 3 4
0
# 647 "src/ftest/ftest.c"
; } }

# 648 "src/ftest/ftest.c" 3 4
_Bool 
# 648 "src/ftest/ftest.c"
expected_LE_TYPE_FLOAT(float var1, float var2){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 648 "src/ftest/ftest.c" 3 4
1
# 648 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 648 "src/ftest/ftest.c" 3 4
0
# 648 "src/ftest/ftest.c"
; } } 
# 648 "src/ftest/ftest.c" 3 4
_Bool 
# 648 "src/ftest/ftest.c"
expected_LE_name_TYPE_FLOAT(float var1, float var2,const char * name){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 648 "src/ftest/ftest.c" 3 4
stderr
# 648 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 648, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 648 "src/ftest/ftest.c" 3 4
1
# 648 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 648 "src/ftest/ftest.c" 3 4
stderr
# 648 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 648, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 648 "src/ftest/ftest.c" 3 4
0
# 648 "src/ftest/ftest.c"
; } }

# 649 "src/ftest/ftest.c" 3 4
_Bool 
# 649 "src/ftest/ftest.c"
expected_LE_TYPE_DOUBLE(double var1, double var2){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 649 "src/ftest/ftest.c" 3 4
1
# 649 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 649 "src/ftest/ftest.c" 3 4
0
# 649 "src/ftest/ftest.c"
; } } 
# 649 "src/ftest/ftest.c" 3 4
_Bool 
# 649 "src/ftest/ftest.c"
expected_LE_name_TYPE_DOUBLE(double var1, double var2,const char * name){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 649 "src/ftest/ftest.c" 3 4
stderr
# 649 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 649, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 649 "src/ftest/ftest.c" 3 4
1
# 649 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 649 "src/ftest/ftest.c" 3 4
stderr
# 649 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 649, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 649 "src/ftest/ftest.c" 3 4
0
# 649 "src/ftest/ftest.c"
; } }

# 650 "src/ftest/ftest.c" 3 4
_Bool 
# 650 "src/ftest/ftest.c"
expected_LE_TYPE_L_DOUBLE(long double var1, long double var2){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 650 "src/ftest/ftest.c" 3 4
1
# 650 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 650 "src/ftest/ftest.c" 3 4
0
# 650 "src/ftest/ftest.c"
; } } 
# 650 "src/ftest/ftest.c" 3 4
_Bool 
# 650 "src/ftest/ftest.c"
expected_LE_name_TYPE_L_DOUBLE(long double var1, long double var2,const char * name){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 650 "src/ftest/ftest.c" 3 4
stderr
# 650 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 650, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 650 "src/ftest/ftest.c" 3 4
1
# 650 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 650 "src/ftest/ftest.c" 3 4
stderr
# 650 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 650, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 650 "src/ftest/ftest.c" 3 4
0
# 650 "src/ftest/ftest.c"
; } }

# 651 "src/ftest/ftest.c" 3 4
_Bool 
# 651 "src/ftest/ftest.c"
expected_LE_TYPE_STRING(char* var1, char* var2){ if(COMPARE_N_TYPE_STRING(&var1, &var2) <= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 651 "src/ftest/ftest.c" 3 4
1
# 651 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 651 "src/ftest/ftest.c" 3 4
0
# 651 "src/ftest/ftest.c"
; } } 
# 651 "src/ftest/ftest.c" 3 4
_Bool 
# 651 "src/ftest/ftest.c"
expected_LE_name_TYPE_STRING(char* var1, char* var2,const char * name){ if(COMPARE_N_TYPE_STRING(&var1, &var2) <= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 651 "src/ftest/ftest.c" 3 4
stderr
# 651 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 651, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 651 "src/ftest/ftest.c" 3 4
1
# 651 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 651 "src/ftest/ftest.c" 3 4
stderr
# 651 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 651, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 651 "src/ftest/ftest.c" 3 4
0
# 651 "src/ftest/ftest.c"
; } }


# 653 "src/ftest/ftest.c" 3 4
_Bool 
# 653 "src/ftest/ftest.c"
expected_GE_TYPE_CHAR(char var1, char var2){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 653 "src/ftest/ftest.c" 3 4
1
# 653 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 653 "src/ftest/ftest.c" 3 4
0
# 653 "src/ftest/ftest.c"
; } } 
# 653 "src/ftest/ftest.c" 3 4
_Bool 
# 653 "src/ftest/ftest.c"
expected_GE_name_TYPE_CHAR(char var1, char var2,const char * name){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 653 "src/ftest/ftest.c" 3 4
stderr
# 653 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 653, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 653 "src/ftest/ftest.c" 3 4
1
# 653 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 653 "src/ftest/ftest.c" 3 4
stderr
# 653 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 653, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 653 "src/ftest/ftest.c" 3 4
0
# 653 "src/ftest/ftest.c"
; } }

# 654 "src/ftest/ftest.c" 3 4
_Bool 
# 654 "src/ftest/ftest.c"
expected_GE_TYPE_U_CHAR(unsigned char var1, unsigned char var2){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 654 "src/ftest/ftest.c" 3 4
1
# 654 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 654 "src/ftest/ftest.c" 3 4
0
# 654 "src/ftest/ftest.c"
; } } 
# 654 "src/ftest/ftest.c" 3 4
_Bool 
# 654 "src/ftest/ftest.c"
expected_GE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2,const char * name){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 654 "src/ftest/ftest.c" 3 4
stderr
# 654 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 654, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 654 "src/ftest/ftest.c" 3 4
1
# 654 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 654 "src/ftest/ftest.c" 3 4
stderr
# 654 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 654, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 654 "src/ftest/ftest.c" 3 4
0
# 654 "src/ftest/ftest.c"
; } }

# 655 "src/ftest/ftest.c" 3 4
_Bool 
# 655 "src/ftest/ftest.c"
expected_GE_TYPE_INT(int var1, int var2){ if(COMPARE_N_TYPE_INT(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 655 "src/ftest/ftest.c" 3 4
1
# 655 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 655 "src/ftest/ftest.c" 3 4
0
# 655 "src/ftest/ftest.c"
; } } 
# 655 "src/ftest/ftest.c" 3 4
_Bool 
# 655 "src/ftest/ftest.c"
expected_GE_name_TYPE_INT(int var1, int var2,const char * name){ if(COMPARE_N_TYPE_INT(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 655 "src/ftest/ftest.c" 3 4
stderr
# 655 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 655, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 655 "src/ftest/ftest.c" 3 4
1
# 655 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 655 "src/ftest/ftest.c" 3 4
stderr
# 655 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 655, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 655 "src/ftest/ftest.c" 3 4
0
# 655 "src/ftest/ftest.c"
; } }

# 656 "src/ftest/ftest.c" 3 4
_Bool 
# 656 "src/ftest/ftest.c"
expected_GE_TYPE_U_INT(unsigned int var1, unsigned int var2){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 656 "src/ftest/ftest.c" 3 4
1
# 656 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 656 "src/ftest/ftest.c" 3 4
0
# 656 "src/ftest/ftest.c"
; } } 
# 656 "src/ftest/ftest.c" 3 4
_Bool 
# 656 "src/ftest/ftest.c"
expected_GE_name_TYPE_U_INT(unsigned int var1, unsigned int var2,const char * name){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 656 "src/ftest/ftest.c" 3 4
stderr
# 656 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 656, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 656 "src/ftest/ftest.c" 3 4
1
# 656 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 656 "src/ftest/ftest.c" 3 4
stderr
# 656 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 656, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 656 "src/ftest/ftest.c" 3 4
0
# 656 "src/ftest/ftest.c"
; } }

# 657 "src/ftest/ftest.c" 3 4
_Bool 
# 657 "src/ftest/ftest.c"
expected_GE_TYPE_L_INT(long int var1, long int var2){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 657 "src/ftest/ftest.c" 3 4
1
# 657 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 657 "src/ftest/ftest.c" 3 4
0
# 657 "src/ftest/ftest.c"
; } } 
# 657 "src/ftest/ftest.c" 3 4
_Bool 
# 657 "src/ftest/ftest.c"
expected_GE_name_TYPE_L_INT(long int var1, long int var2,const char * name){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 657 "src/ftest/ftest.c" 3 4
stderr
# 657 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 657, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 657 "src/ftest/ftest.c" 3 4
1
# 657 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 657 "src/ftest/ftest.c" 3 4
stderr
# 657 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 657, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 657 "src/ftest/ftest.c" 3 4
0
# 657 "src/ftest/ftest.c"
; } }

# 658 "src/ftest/ftest.c" 3 4
_Bool 
# 658 "src/ftest/ftest.c"
expected_GE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 658 "src/ftest/ftest.c" 3 4
1
# 658 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 658 "src/ftest/ftest.c" 3 4
0
# 658 "src/ftest/ftest.c"
; } } 
# 658 "src/ftest/ftest.c" 3 4
_Bool 
# 658 "src/ftest/ftest.c"
expected_GE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2,const char * name){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 658 "src/ftest/ftest.c" 3 4
stderr
# 658 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 658, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 658 "src/ftest/ftest.c" 3 4
1
# 658 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 658 "src/ftest/ftest.c" 3 4
stderr
# 658 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 658, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 658 "src/ftest/ftest.c" 3 4
0
# 658 "src/ftest/ftest.c"
; } }

# 659 "src/ftest/ftest.c" 3 4
_Bool 
# 659 "src/ftest/ftest.c"
expected_GE_TYPE_SIZE_T(size_t var1, size_t var2){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 659 "src/ftest/ftest.c" 3 4
1
# 659 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 659 "src/ftest/ftest.c" 3 4
0
# 659 "src/ftest/ftest.c"
; } } 
# 659 "src/ftest/ftest.c" 3 4
_Bool 
# 659 "src/ftest/ftest.c"
expected_GE_name_TYPE_SIZE_T(size_t var1, size_t var2,const char * name){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 659 "src/ftest/ftest.c" 3 4
stderr
# 659 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 659, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 659 "src/ftest/ftest.c" 3 4
1
# 659 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 659 "src/ftest/ftest.c" 3 4
stderr
# 659 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 659, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 659 "src/ftest/ftest.c" 3 4
0
# 659 "src/ftest/ftest.c"
; } }

# 660 "src/ftest/ftest.c" 3 4
_Bool 
# 660 "src/ftest/ftest.c"
expected_GE_TYPE_FLOAT(float var1, float var2){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 660 "src/ftest/ftest.c" 3 4
1
# 660 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 660 "src/ftest/ftest.c" 3 4
0
# 660 "src/ftest/ftest.c"
; } } 
# 660 "src/ftest/ftest.c" 3 4
_Bool 
# 660 "src/ftest/ftest.c"
expected_GE_name_TYPE_FLOAT(float var1, float var2,const char * name){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 660 "src/ftest/ftest.c" 3 4
stderr
# 660 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 660, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 660 "src/ftest/ftest.c" 3 4
1
# 660 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 660 "src/ftest/ftest.c" 3 4
stderr
# 660 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 660, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 660 "src/ftest/ftest.c" 3 4
0
# 660 "src/ftest/ftest.c"
; } }

# 661 "src/ftest/ftest.c" 3 4
_Bool 
# 661 "src/ftest/ftest.c"
expected_GE_TYPE_DOUBLE(double var1, double var2){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 661 "src/ftest/ftest.c" 3 4
1
# 661 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 661 "src/ftest/ftest.c" 3 4
0
# 661 "src/ftest/ftest.c"
; } } 
# 661 "src/ftest/ftest.c" 3 4
_Bool 
# 661 "src/ftest/ftest.c"
expected_GE_name_TYPE_DOUBLE(double var1, double var2,const char * name){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 661 "src/ftest/ftest.c" 3 4
stderr
# 661 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 661, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 661 "src/ftest/ftest.c" 3 4
1
# 661 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 661 "src/ftest/ftest.c" 3 4
stderr
# 661 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 661, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 661 "src/ftest/ftest.c" 3 4
0
# 661 "src/ftest/ftest.c"
; } }

# 662 "src/ftest/ftest.c" 3 4
_Bool 
# 662 "src/ftest/ftest.c"
expected_GE_TYPE_L_DOUBLE(long double var1, long double var2){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 662 "src/ftest/ftest.c" 3 4
1
# 662 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 662 "src/ftest/ftest.c" 3 4
0
# 662 "src/ftest/ftest.c"
; } } 
# 662 "src/ftest/ftest.c" 3 4
_Bool 
# 662 "src/ftest/ftest.c"
expected_GE_name_TYPE_L_DOUBLE(long double var1, long double var2,const char * name){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 662 "src/ftest/ftest.c" 3 4
stderr
# 662 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 662, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 662 "src/ftest/ftest.c" 3 4
1
# 662 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 662 "src/ftest/ftest.c" 3 4
stderr
# 662 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 662, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 662 "src/ftest/ftest.c" 3 4
0
# 662 "src/ftest/ftest.c"
; } }

# 663 "src/ftest/ftest.c" 3 4
_Bool 
# 663 "src/ftest/ftest.c"
expected_GE_TYPE_STRING(char* var1, char* var2){ if(COMPARE_N_TYPE_STRING(&var1, &var2) >= 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 663 "src/ftest/ftest.c" 3 4
1
# 663 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 663 "src/ftest/ftest.c" 3 4
0
# 663 "src/ftest/ftest.c"
; } } 
# 663 "src/ftest/ftest.c" 3 4
_Bool 
# 663 "src/ftest/ftest.c"
expected_GE_name_TYPE_STRING(char* var1, char* var2,const char * name){ if(COMPARE_N_TYPE_STRING(&var1, &var2) >= 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 663 "src/ftest/ftest.c" 3 4
stderr
# 663 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 663, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 663 "src/ftest/ftest.c" 3 4
1
# 663 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 663 "src/ftest/ftest.c" 3 4
stderr
# 663 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 663, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 663 "src/ftest/ftest.c" 3 4
0
# 663 "src/ftest/ftest.c"
; } }


# 665 "src/ftest/ftest.c" 3 4
_Bool 
# 665 "src/ftest/ftest.c"
expected_NE_TYPE_CHAR(char var1, char var2){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 665 "src/ftest/ftest.c" 3 4
1
# 665 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 665 "src/ftest/ftest.c" 3 4
0
# 665 "src/ftest/ftest.c"
; } } 
# 665 "src/ftest/ftest.c" 3 4
_Bool 
# 665 "src/ftest/ftest.c"
expected_NE_name_TYPE_CHAR(char var1, char var2,const char * name){ if(COMPARE_N_TYPE_CHAR(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 665 "src/ftest/ftest.c" 3 4
stderr
# 665 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 665, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 665 "src/ftest/ftest.c" 3 4
1
# 665 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 665 "src/ftest/ftest.c" 3 4
stderr
# 665 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 665, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 665 "src/ftest/ftest.c" 3 4
0
# 665 "src/ftest/ftest.c"
; } }

# 666 "src/ftest/ftest.c" 3 4
_Bool 
# 666 "src/ftest/ftest.c"
expected_NE_TYPE_U_CHAR(unsigned char var1, unsigned char var2){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 666 "src/ftest/ftest.c" 3 4
1
# 666 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 666 "src/ftest/ftest.c" 3 4
0
# 666 "src/ftest/ftest.c"
; } } 
# 666 "src/ftest/ftest.c" 3 4
_Bool 
# 666 "src/ftest/ftest.c"
expected_NE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2,const char * name){ if(COMPARE_N_TYPE_U_CHAR(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 666 "src/ftest/ftest.c" 3 4
stderr
# 666 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 666, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 666 "src/ftest/ftest.c" 3 4
1
# 666 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 666 "src/ftest/ftest.c" 3 4
stderr
# 666 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 666, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 666 "src/ftest/ftest.c" 3 4
0
# 666 "src/ftest/ftest.c"
; } }

# 667 "src/ftest/ftest.c" 3 4
_Bool 
# 667 "src/ftest/ftest.c"
expected_NE_TYPE_INT(int var1, int var2){ if(COMPARE_N_TYPE_INT(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 667 "src/ftest/ftest.c" 3 4
1
# 667 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 667 "src/ftest/ftest.c" 3 4
0
# 667 "src/ftest/ftest.c"
; } } 
# 667 "src/ftest/ftest.c" 3 4
_Bool 
# 667 "src/ftest/ftest.c"
expected_NE_name_TYPE_INT(int var1, int var2,const char * name){ if(COMPARE_N_TYPE_INT(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 667 "src/ftest/ftest.c" 3 4
stderr
# 667 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 667, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 667 "src/ftest/ftest.c" 3 4
1
# 667 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 667 "src/ftest/ftest.c" 3 4
stderr
# 667 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 667, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 667 "src/ftest/ftest.c" 3 4
0
# 667 "src/ftest/ftest.c"
; } }

# 668 "src/ftest/ftest.c" 3 4
_Bool 
# 668 "src/ftest/ftest.c"
expected_NE_TYPE_U_INT(unsigned int var1, unsigned int var2){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 668 "src/ftest/ftest.c" 3 4
1
# 668 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 668 "src/ftest/ftest.c" 3 4
0
# 668 "src/ftest/ftest.c"
; } } 
# 668 "src/ftest/ftest.c" 3 4
_Bool 
# 668 "src/ftest/ftest.c"
expected_NE_name_TYPE_U_INT(unsigned int var1, unsigned int var2,const char * name){ if(COMPARE_N_TYPE_U_INT(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 668 "src/ftest/ftest.c" 3 4
stderr
# 668 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 668, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 668 "src/ftest/ftest.c" 3 4
1
# 668 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 668 "src/ftest/ftest.c" 3 4
stderr
# 668 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 668, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 668 "src/ftest/ftest.c" 3 4
0
# 668 "src/ftest/ftest.c"
; } }

# 669 "src/ftest/ftest.c" 3 4
_Bool 
# 669 "src/ftest/ftest.c"
expected_NE_TYPE_L_INT(long int var1, long int var2){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 669 "src/ftest/ftest.c" 3 4
1
# 669 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 669 "src/ftest/ftest.c" 3 4
0
# 669 "src/ftest/ftest.c"
; } } 
# 669 "src/ftest/ftest.c" 3 4
_Bool 
# 669 "src/ftest/ftest.c"
expected_NE_name_TYPE_L_INT(long int var1, long int var2,const char * name){ if(COMPARE_N_TYPE_L_INT(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 669 "src/ftest/ftest.c" 3 4
stderr
# 669 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 669, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 669 "src/ftest/ftest.c" 3 4
1
# 669 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 669 "src/ftest/ftest.c" 3 4
stderr
# 669 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 669, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 669 "src/ftest/ftest.c" 3 4
0
# 669 "src/ftest/ftest.c"
; } }

# 670 "src/ftest/ftest.c" 3 4
_Bool 
# 670 "src/ftest/ftest.c"
expected_NE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 670 "src/ftest/ftest.c" 3 4
1
# 670 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 670 "src/ftest/ftest.c" 3 4
0
# 670 "src/ftest/ftest.c"
; } } 
# 670 "src/ftest/ftest.c" 3 4
_Bool 
# 670 "src/ftest/ftest.c"
expected_NE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2,const char * name){ if(COMPARE_N_TYPE_U_L_INT(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 670 "src/ftest/ftest.c" 3 4
stderr
# 670 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 670, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 670 "src/ftest/ftest.c" 3 4
1
# 670 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 670 "src/ftest/ftest.c" 3 4
stderr
# 670 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 670, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 670 "src/ftest/ftest.c" 3 4
0
# 670 "src/ftest/ftest.c"
; } }

# 671 "src/ftest/ftest.c" 3 4
_Bool 
# 671 "src/ftest/ftest.c"
expected_NE_TYPE_SIZE_T(size_t var1, size_t var2){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 671 "src/ftest/ftest.c" 3 4
1
# 671 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 671 "src/ftest/ftest.c" 3 4
0
# 671 "src/ftest/ftest.c"
; } } 
# 671 "src/ftest/ftest.c" 3 4
_Bool 
# 671 "src/ftest/ftest.c"
expected_NE_name_TYPE_SIZE_T(size_t var1, size_t var2,const char * name){ if(COMPARE_N_TYPE_SIZE_T(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 671 "src/ftest/ftest.c" 3 4
stderr
# 671 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 671, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 671 "src/ftest/ftest.c" 3 4
1
# 671 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 671 "src/ftest/ftest.c" 3 4
stderr
# 671 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 671, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 671 "src/ftest/ftest.c" 3 4
0
# 671 "src/ftest/ftest.c"
; } }

# 672 "src/ftest/ftest.c" 3 4
_Bool 
# 672 "src/ftest/ftest.c"
expected_NE_TYPE_FLOAT(float var1, float var2){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 672 "src/ftest/ftest.c" 3 4
1
# 672 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 672 "src/ftest/ftest.c" 3 4
0
# 672 "src/ftest/ftest.c"
; } } 
# 672 "src/ftest/ftest.c" 3 4
_Bool 
# 672 "src/ftest/ftest.c"
expected_NE_name_TYPE_FLOAT(float var1, float var2,const char * name){ if(COMPARE_N_TYPE_FLOAT(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 672 "src/ftest/ftest.c" 3 4
stderr
# 672 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 672, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 672 "src/ftest/ftest.c" 3 4
1
# 672 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 672 "src/ftest/ftest.c" 3 4
stderr
# 672 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 672, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 672 "src/ftest/ftest.c" 3 4
0
# 672 "src/ftest/ftest.c"
; } }

# 673 "src/ftest/ftest.c" 3 4
_Bool 
# 673 "src/ftest/ftest.c"
expected_NE_TYPE_DOUBLE(double var1, double var2){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 673 "src/ftest/ftest.c" 3 4
1
# 673 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 673 "src/ftest/ftest.c" 3 4
0
# 673 "src/ftest/ftest.c"
; } } 
# 673 "src/ftest/ftest.c" 3 4
_Bool 
# 673 "src/ftest/ftest.c"
expected_NE_name_TYPE_DOUBLE(double var1, double var2,const char * name){ if(COMPARE_N_TYPE_DOUBLE(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 673 "src/ftest/ftest.c" 3 4
stderr
# 673 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 673, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 673 "src/ftest/ftest.c" 3 4
1
# 673 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 673 "src/ftest/ftest.c" 3 4
stderr
# 673 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 673, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 673 "src/ftest/ftest.c" 3 4
0
# 673 "src/ftest/ftest.c"
; } }

# 674 "src/ftest/ftest.c" 3 4
_Bool 
# 674 "src/ftest/ftest.c"
expected_NE_TYPE_L_DOUBLE(long double var1, long double var2){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 674 "src/ftest/ftest.c" 3 4
1
# 674 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 674 "src/ftest/ftest.c" 3 4
0
# 674 "src/ftest/ftest.c"
; } } 
# 674 "src/ftest/ftest.c" 3 4
_Bool 
# 674 "src/ftest/ftest.c"
expected_NE_name_TYPE_L_DOUBLE(long double var1, long double var2,const char * name){ if(COMPARE_N_TYPE_L_DOUBLE(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 674 "src/ftest/ftest.c" 3 4
stderr
# 674 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 674, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 674 "src/ftest/ftest.c" 3 4
1
# 674 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 674 "src/ftest/ftest.c" 3 4
stderr
# 674 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 674, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 674 "src/ftest/ftest.c" 3 4
0
# 674 "src/ftest/ftest.c"
; } }

# 675 "src/ftest/ftest.c" 3 4
_Bool 
# 675 "src/ftest/ftest.c"
expected_NE_TYPE_STRING(char* var1, char* var2){ if(COMPARE_N_TYPE_STRING(&var1, &var2) != 0){ do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_local);; ++count_pass_local; pthread_mutex_unlock(&mut_count_pass_local);; } else ++count_pass_local; }while(0);; return 
# 675 "src/ftest/ftest.c" 3 4
1
# 675 "src/ftest/ftest.c"
; }else { do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_local);; ++count_fail_local; pthread_mutex_unlock(&mut_count_fail_local);; } else ++count_fail_local; }while(0);; return 
# 675 "src/ftest/ftest.c" 3 4
0
# 675 "src/ftest/ftest.c"
; } } 
# 675 "src/ftest/ftest.c" 3 4
_Bool 
# 675 "src/ftest/ftest.c"
expected_NE_name_TYPE_STRING(char* var1, char* var2,const char * name){ if(COMPARE_N_TYPE_STRING(&var1, &var2) != 0){ do{ size_t num_test=extract_num__f(name); ++count_pass_test[num_test]; do { if (0) fprintf(
# 675 "src/ftest/ftest.c" 3 4
stderr
# 675 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 675, __func__, "pass", num_test,count_pass_test[num_test]); } while (0); }while(0);; return 
# 675 "src/ftest/ftest.c" 3 4
1
# 675 "src/ftest/ftest.c"
; }else { do{ size_t num_test=extract_num__f(name); ++count_fail_test[num_test]; do { if (0) fprintf(
# 675 "src/ftest/ftest.c" 3 4
stderr
# 675 "src/ftest/ftest.c"
, "%s:%d:%s(): " "INCREMENT cout_%s_test[%ld] = %ld\n", "src/ftest/ftest.c", 675, __func__, "fail", num_test,count_fail_test[num_test]); } while (0); }while(0);; return 
# 675 "src/ftest/ftest.c" 3 4
0
# 675 "src/ftest/ftest.c"
; } }


void
append_func(void (*run)(void), char *name){
  static struct func *f_static = 
# 680 "src/ftest/ftest.c" 3 4
                                ((void *)0)
# 680 "src/ftest/ftest.c"
                                    ;
  if(f_beging == 
# 681 "src/ftest/ftest.c" 3 4
                ((void *)0)
# 681 "src/ftest/ftest.c"
                    ){
    f_beging = malloc(sizeof(struct func));
    f_static = f_beging;
    f_static->name = malloc(strlen(name));
    strcpy(f_static->name,name);
    f_static->run = run;
    f_static->next = 
# 687 "src/ftest/ftest.c" 3 4
                    ((void *)0)
# 687 "src/ftest/ftest.c"
                        ;
  }
  else{
    struct func *tmp = malloc(sizeof(struct func));
    tmp->run = run;
    tmp->name = malloc(strlen(name));
    strcpy(tmp->name,name);
    tmp->next = 
# 694 "src/ftest/ftest.c" 3 4
               ((void *)0)
# 694 "src/ftest/ftest.c"
                   ;
    f_static->next = tmp;
    f_static = tmp;
  }
  ++count_tests;
}

void begin_execute_func(char *fun_ame, struct timespec *start_t){
  clock_gettime(
# 702 "src/ftest/ftest.c" 3 4
               0
# 702 "src/ftest/ftest.c"
                             , start_t);
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 703 "src/ftest/ftest.c" 3 4
 stdout
# 703 "src/ftest/ftest.c"
 , "\033[0;32m" "====== RUN" "\033[0m" " %s\n", fun_ame); else fprintf(
# 703 "src/ftest/ftest.c" 3 4
 stdout
# 703 "src/ftest/ftest.c"
 , "====== RUN" " %s\n", fun_ame); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "====== RUN" "\033[0m" " %s\n", fun_ame); else fprintf(f_ou_th[id_thread], "====== RUN" " %s\n", fun_ame); } } else{ if(!unicolour) fprintf(
# 703 "src/ftest/ftest.c" 3 4
 stdout
# 703 "src/ftest/ftest.c"
 , "\033[0;32m" "====== RUN" "\033[0m" " %s\n", fun_ame); else fprintf(
# 703 "src/ftest/ftest.c" 3 4
 stdout
# 703 "src/ftest/ftest.c"
 , "====== RUN" " %s\n", fun_ame); } } else{ if(!unicolour) fprintf(
# 703 "src/ftest/ftest.c" 3 4
 stdout
# 703 "src/ftest/ftest.c"
 , "\033[0;32m" "====== RUN" "\033[0m" " %s\n", fun_ame); else fprintf(
# 703 "src/ftest/ftest.c" 3 4
 stdout
# 703 "src/ftest/ftest.c"
 , "====== RUN" " %s\n", fun_ame); } }while(0);
  count_pass_local = 0;
  count_fail_local = 0;
}






void end_execute_func(char *fun_ame, struct timespec start_t){
  struct timespec end_t; clock_gettime(
# 714 "src/ftest/ftest.c" 3 4
                                      0
# 714 "src/ftest/ftest.c"
                                                    , &end_t);
  if(count_fail_local){
    do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_global);; ++count_fail_global; pthread_mutex_unlock(&mut_count_fail_global);; } else ++count_fail_global; }while(0);;
    append_failed_list(&failed_l, fun_ame);
    do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 718 "src/ftest/ftest.c" 3 4
   stdout
# 718 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed from %s\n",count_fail_local,fun_ame); else fprintf(
# 718 "src/ftest/ftest.c" 3 4
   stdout
# 718 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests failed from %s\n",count_fail_local,fun_ame); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed from %s\n",count_fail_local,fun_ame); else fprintf(f_ou_th[id_thread], "===== FAIL" " %lu tests failed from %s\n",count_fail_local,fun_ame); } } else{ if(!unicolour) fprintf(
# 718 "src/ftest/ftest.c" 3 4
   stdout
# 718 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed from %s\n",count_fail_local,fun_ame); else fprintf(
# 718 "src/ftest/ftest.c" 3 4
   stdout
# 718 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests failed from %s\n",count_fail_local,fun_ame); } } else{ if(!unicolour) fprintf(
# 718 "src/ftest/ftest.c" 3 4
   stdout
# 718 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed from %s\n",count_fail_local,fun_ame); else fprintf(
# 718 "src/ftest/ftest.c" 3 4
   stdout
# 718 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests failed from %s\n",count_fail_local,fun_ame); } }while(0);
    if((timeunit[0]=='s')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); } }while(0); else if((timeunit[0]=='n')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); } }while(0); else do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 719 "src/ftest/ftest.c" 3 4
   stdout
# 719 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); } }while(0);;
  }
  else
  {
    do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_global);; ++count_pass_global; pthread_mutex_unlock(&mut_count_pass_global);; } else ++count_pass_global; }while(0);;
    if((timeunit[0]=='s')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s)\n\n",count_pass_local,fun_ame, diff_timespec_seconds(end_t, start_t)); } }while(0); else if((timeunit[0]=='n')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns)\n\n",count_pass_local,fun_ame, diff_timespec_nanoseconds(end_t, start_t)); } }while(0); else do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 724 "src/ftest/ftest.c" 3 4
   stdout
# 724 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms)\n\n",count_pass_local,fun_ame, diff_timespec_milliseconds(end_t, start_t)); } }while(0);;
  }
}



void head_run(size_t nbtest, struct timespec *start_t){
  clock_gettime(
# 731 "src/ftest/ftest.c" 3 4
               0
# 731 "src/ftest/ftest.c"
                             , start_t);
  if(cur_array_TYPE_SIZE_T || cur_array_TYPE_STRING) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 732 "src/ftest/ftest.c" 3 4
                                                    stdout
# 732 "src/ftest/ftest.c"
                                                    , "\033[0;32m" "==========" "\033[0m" " Running tests.\n"); else fprintf(
# 732 "src/ftest/ftest.c" 3 4
                                                    stdout
# 732 "src/ftest/ftest.c"
                                                    , "==========" " Running tests.\n"); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " Running tests.\n"); else fprintf(f_ou_th[id_thread], "==========" " Running tests.\n"); } } else{ if(!unicolour) fprintf(
# 732 "src/ftest/ftest.c" 3 4
                                                    stdout
# 732 "src/ftest/ftest.c"
                                                    , "\033[0;32m" "==========" "\033[0m" " Running tests.\n"); else fprintf(
# 732 "src/ftest/ftest.c" 3 4
                                                    stdout
# 732 "src/ftest/ftest.c"
                                                    , "==========" " Running tests.\n"); } } else{ if(!unicolour) fprintf(
# 732 "src/ftest/ftest.c" 3 4
                                                    stdout
# 732 "src/ftest/ftest.c"
                                                    , "\033[0;32m" "==========" "\033[0m" " Running tests.\n"); else fprintf(
# 732 "src/ftest/ftest.c" 3 4
                                                    stdout
# 732 "src/ftest/ftest.c"
                                                    , "==========" " Running tests.\n"); } }while(0);
  else do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 733 "src/ftest/ftest.c" 3 4
      stdout
# 733 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " Running %lu tests.\n",nbtest); else fprintf(
# 733 "src/ftest/ftest.c" 3 4
      stdout
# 733 "src/ftest/ftest.c"
      , "==========" " Running %lu tests.\n",nbtest); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " Running %lu tests.\n",nbtest); else fprintf(f_ou_th[id_thread], "==========" " Running %lu tests.\n",nbtest); } } else{ if(!unicolour) fprintf(
# 733 "src/ftest/ftest.c" 3 4
      stdout
# 733 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " Running %lu tests.\n",nbtest); else fprintf(
# 733 "src/ftest/ftest.c" 3 4
      stdout
# 733 "src/ftest/ftest.c"
      , "==========" " Running %lu tests.\n",nbtest); } } else{ if(!unicolour) fprintf(
# 733 "src/ftest/ftest.c" 3 4
      stdout
# 733 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " Running %lu tests.\n",nbtest); else fprintf(
# 733 "src/ftest/ftest.c" 3 4
      stdout
# 733 "src/ftest/ftest.c"
      , "==========" " Running %lu tests.\n",nbtest); } }while(0);
}




void
stat_end_run(size_t ntst, struct timespec start_t){
  struct timespec end_t; clock_gettime(
# 741 "src/ftest/ftest.c" 3 4
                                      0
# 741 "src/ftest/ftest.c"
                                                    , &end_t);

  if((timeunit[0]=='s')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 743 "src/ftest/ftest.c" 3 4
            stdout
# 743 "src/ftest/ftest.c"
            , "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%lf s total)\n",ntst, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 743 "src/ftest/ftest.c" 3 4
            stdout
# 743 "src/ftest/ftest.c"
            , "==========" " %lu tests ran. (%lf s total)\n",ntst, diff_timespec_seconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%lf s total)\n",ntst, diff_timespec_seconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "==========" " %lu tests ran. (%lf s total)\n",ntst, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 743 "src/ftest/ftest.c" 3 4
            stdout
# 743 "src/ftest/ftest.c"
            , "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%lf s total)\n",ntst, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 743 "src/ftest/ftest.c" 3 4
            stdout
# 743 "src/ftest/ftest.c"
            , "==========" " %lu tests ran. (%lf s total)\n",ntst, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 743 "src/ftest/ftest.c" 3 4
            stdout
# 743 "src/ftest/ftest.c"
            , "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%lf s total)\n",ntst, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 743 "src/ftest/ftest.c" 3 4
            stdout
# 743 "src/ftest/ftest.c"
            , "==========" " %lu tests ran. (%lf s total)\n",ntst, diff_timespec_seconds(end_t, start_t)); } }while(0);
  else if((timeunit[0]=='n')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 744 "src/ftest/ftest.c" 3 4
                     stdout
# 744 "src/ftest/ftest.c"
                     , "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%ld ns total)\n",ntst, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 744 "src/ftest/ftest.c" 3 4
                     stdout
# 744 "src/ftest/ftest.c"
                     , "==========" " %lu tests ran. (%ld ns total)\n",ntst, diff_timespec_nanoseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%ld ns total)\n",ntst, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "==========" " %lu tests ran. (%ld ns total)\n",ntst, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 744 "src/ftest/ftest.c" 3 4
                     stdout
# 744 "src/ftest/ftest.c"
                     , "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%ld ns total)\n",ntst, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 744 "src/ftest/ftest.c" 3 4
                     stdout
# 744 "src/ftest/ftest.c"
                     , "==========" " %lu tests ran. (%ld ns total)\n",ntst, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 744 "src/ftest/ftest.c" 3 4
                     stdout
# 744 "src/ftest/ftest.c"
                     , "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%ld ns total)\n",ntst, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 744 "src/ftest/ftest.c" 3 4
                     stdout
# 744 "src/ftest/ftest.c"
                     , "==========" " %lu tests ran. (%ld ns total)\n",ntst, diff_timespec_nanoseconds(end_t, start_t)); } }while(0);
  else do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 745 "src/ftest/ftest.c" 3 4
      stdout
# 745 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%lf ms total)\n",ntst, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 745 "src/ftest/ftest.c" 3 4
      stdout
# 745 "src/ftest/ftest.c"
      , "==========" " %lu tests ran. (%lf ms total)\n",ntst, diff_timespec_milliseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%lf ms total)\n",ntst, diff_timespec_milliseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "==========" " %lu tests ran. (%lf ms total)\n",ntst, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 745 "src/ftest/ftest.c" 3 4
      stdout
# 745 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%lf ms total)\n",ntst, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 745 "src/ftest/ftest.c" 3 4
      stdout
# 745 "src/ftest/ftest.c"
      , "==========" " %lu tests ran. (%lf ms total)\n",ntst, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 745 "src/ftest/ftest.c" 3 4
      stdout
# 745 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " %lu tests ran. (%lf ms total)\n",ntst, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 745 "src/ftest/ftest.c" 3 4
      stdout
# 745 "src/ftest/ftest.c"
      , "==========" " %lu tests ran. (%lf ms total)\n",ntst, diff_timespec_milliseconds(end_t, start_t)); } }while(0);

  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 747 "src/ftest/ftest.c" 3 4
 stdout
# 747 "src/ftest/ftest.c"
 , "\033[0;32m" "===== PASS" "\033[0m" " %lu tests\n", count_pass_global); else fprintf(
# 747 "src/ftest/ftest.c" 3 4
 stdout
# 747 "src/ftest/ftest.c"
 , "===== PASS" " %lu tests\n", count_pass_global); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== PASS" "\033[0m" " %lu tests\n", count_pass_global); else fprintf(f_ou_th[id_thread], "===== PASS" " %lu tests\n", count_pass_global); } } else{ if(!unicolour) fprintf(
# 747 "src/ftest/ftest.c" 3 4
 stdout
# 747 "src/ftest/ftest.c"
 , "\033[0;32m" "===== PASS" "\033[0m" " %lu tests\n", count_pass_global); else fprintf(
# 747 "src/ftest/ftest.c" 3 4
 stdout
# 747 "src/ftest/ftest.c"
 , "===== PASS" " %lu tests\n", count_pass_global); } } else{ if(!unicolour) fprintf(
# 747 "src/ftest/ftest.c" 3 4
 stdout
# 747 "src/ftest/ftest.c"
 , "\033[0;32m" "===== PASS" "\033[0m" " %lu tests\n", count_pass_global); else fprintf(
# 747 "src/ftest/ftest.c" 3 4
 stdout
# 747 "src/ftest/ftest.c"
 , "===== PASS" " %lu tests\n", count_pass_global); } }while(0);
  if(failed_l != 
# 748 "src/ftest/ftest.c" 3 4
                ((void *)0)
# 748 "src/ftest/ftest.c"
                    ){
    do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 749 "src/ftest/ftest.c" 3 4
   stdout
# 749 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests, listed below:\n",count_fail_global); else fprintf(
# 749 "src/ftest/ftest.c" 3 4
   stdout
# 749 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests, listed below:\n",count_fail_global); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests, listed below:\n",count_fail_global); else fprintf(f_ou_th[id_thread], "===== FAIL" " %lu tests, listed below:\n",count_fail_global); } } else{ if(!unicolour) fprintf(
# 749 "src/ftest/ftest.c" 3 4
   stdout
# 749 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests, listed below:\n",count_fail_global); else fprintf(
# 749 "src/ftest/ftest.c" 3 4
   stdout
# 749 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests, listed below:\n",count_fail_global); } } else{ if(!unicolour) fprintf(
# 749 "src/ftest/ftest.c" 3 4
   stdout
# 749 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests, listed below:\n",count_fail_global); else fprintf(
# 749 "src/ftest/ftest.c" 3 4
   stdout
# 749 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests, listed below:\n",count_fail_global); } }while(0);
    list_failed_test(failed_l);
    do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 751 "src/ftest/ftest.c" 3 4
   stdout
# 751 "src/ftest/ftest.c"
   , "" "" "\033[0m" "\n%ld FAILED TESTS \n",count_fail_global); else fprintf(
# 751 "src/ftest/ftest.c" 3 4
   stdout
# 751 "src/ftest/ftest.c"
   , "" "\n%ld FAILED TESTS \n",count_fail_global); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "" "" "\033[0m" "\n%ld FAILED TESTS \n",count_fail_global); else fprintf(f_ou_th[id_thread], "" "\n%ld FAILED TESTS \n",count_fail_global); } } else{ if(!unicolour) fprintf(
# 751 "src/ftest/ftest.c" 3 4
   stdout
# 751 "src/ftest/ftest.c"
   , "" "" "\033[0m" "\n%ld FAILED TESTS \n",count_fail_global); else fprintf(
# 751 "src/ftest/ftest.c" 3 4
   stdout
# 751 "src/ftest/ftest.c"
   , "" "\n%ld FAILED TESTS \n",count_fail_global); } } else{ if(!unicolour) fprintf(
# 751 "src/ftest/ftest.c" 3 4
   stdout
# 751 "src/ftest/ftest.c"
   , "" "" "\033[0m" "\n%ld FAILED TESTS \n",count_fail_global); else fprintf(
# 751 "src/ftest/ftest.c" 3 4
   stdout
# 751 "src/ftest/ftest.c"
   , "" "\n%ld FAILED TESTS \n",count_fail_global); } }while(0);
  }
}
# 789 "src/ftest/ftest.c"

# 789 "src/ftest/ftest.c" 3 4
_Bool 
# 789 "src/ftest/ftest.c"
is_in_array_TYPE_STRING(char* *array, char* val){ 
# 789 "src/ftest/ftest.c" 3 4
_Bool 
# 789 "src/ftest/ftest.c"
found = 
# 789 "src/ftest/ftest.c" 3 4
0
# 789 "src/ftest/ftest.c"
; for(size_t i = 0; i < cur_array_TYPE_STRING; ++i){ do { if (0) fprintf(
# 789 "src/ftest/ftest.c" 3 4
stderr
# 789 "src/ftest/ftest.c"
, "%s:%d:%s(): " "compare |%s| in array and val: |%s|\n", "src/ftest/ftest.c", 789, __func__, TYPE_STRING_TO_STR(array[i]), TYPE_STRING_TO_STR(val)); } while (0); if(COMPARE_N_TYPE_STRING((void*)(array[i]),(void*)val ) == 0 ){ found = 
# 789 "src/ftest/ftest.c" 3 4
1
# 789 "src/ftest/ftest.c"
; break; } } do { if (0) fprintf(
# 789 "src/ftest/ftest.c" 3 4
stderr
# 789 "src/ftest/ftest.c"
, "%s:%d:%s(): " " val return = %d \n", "src/ftest/ftest.c", 789, __func__, found); } while (0); return found;}

# 790 "src/ftest/ftest.c" 3 4
_Bool 
# 790 "src/ftest/ftest.c"
is_in_array_TYPE_SIZE_T(size_t *array, size_t val){ 
# 790 "src/ftest/ftest.c" 3 4
_Bool 
# 790 "src/ftest/ftest.c"
found = 
# 790 "src/ftest/ftest.c" 3 4
0
# 790 "src/ftest/ftest.c"
; for(size_t i = 0; i < cur_array_TYPE_SIZE_T; ++i){ do { if (0) fprintf(
# 790 "src/ftest/ftest.c" 3 4
stderr
# 790 "src/ftest/ftest.c"
, "%s:%d:%s(): " "compare |%s| in array and val: |%s|\n", "src/ftest/ftest.c", 790, __func__, TYPE_SIZE_T_TO_STR(array[i]), TYPE_SIZE_T_TO_STR(val)); } while (0); if(COMPARE_N_TYPE_SIZE_T((void*)(&array[i]),(void*)&val ) == 0 ){ found = 
# 790 "src/ftest/ftest.c" 3 4
1
# 790 "src/ftest/ftest.c"
; break; } } do { if (0) fprintf(
# 790 "src/ftest/ftest.c" 3 4
stderr
# 790 "src/ftest/ftest.c"
, "%s:%d:%s(): " " val return = %d \n", "src/ftest/ftest.c", 790, __func__, found); } while (0); return found;}




void extract_name_test_from_name(char *name_org, char **name_f){
  size_t len=strlen(name_org);
  long cur=-1;
  char *name_test=malloc(len);
  for(size_t i=0; i<len; ++i){
    if(cur == -1 && name_org[i]=='(')
      cur=0;
    else if(cur >=0){
      if(name_org[i] == ')')
        break;
      else
        name_test[cur++]=name_org[i];
    }
  }
  name_test[cur]='\0';
  do { if (0) fprintf(
# 810 "src/ftest/ftest.c" 3 4
 stderr
# 810 "src/ftest/ftest.c"
 , "%s:%d:%s(): " "name_test =%s\n", "src/ftest/ftest.c", 810, __func__, name_test); } while (0);
  *name_f = name_test;

}
# 834 "src/ftest/ftest.c"
void execute_all(struct func *fun){
  struct func *tmp = fun;
  struct timespec start_t;
  size_t num_f;
  char *name_test=
# 838 "src/ftest/ftest.c" 3 4
                 ((void *)0)
# 838 "src/ftest/ftest.c"
                     ;
  
# 839 "src/ftest/ftest.c" 3 4
 _Bool 
# 839 "src/ftest/ftest.c"
      exec_test=0;

  while(tmp){
    exec_test=0; if(some_tests_selected == 0){ exec_test=1; } else{ if(cur_array_TYPE_SIZE_T){ num_f=extract_num__f(tmp->name) ; exec_test = is_in_array_TYPE_SIZE_T(array_TYPE_SIZE_T, num_f); } if(exec_test == 0 && cur_array_TYPE_STRING){ extract_name_test_from_name(tmp->name, &name_test); exec_test = is_in_array_TYPE_STRING(array_TYPE_STRING, name_test ); free(name_test); } }
    if(exec_test){
      begin_execute_func(tmp->name, &start_t);
      tmp->run();
      end_execute_func(tmp->name, start_t);
    }
    tmp = tmp->next;
  }
}
# 954 "src/ftest/ftest.c"
void
run_all_tests()
{
   struct timespec start_t;
   head_run(count_tests, &start_t);
   execute_all(f_beging);

   stat_end_run(count_pass_global + count_fail_global, start_t);
}
# 1000 "src/ftest/ftest.c"
void head_all_parallel_run(struct timespec *start_t){
  clock_gettime(
# 1001 "src/ftest/ftest.c" 3 4
               0
# 1001 "src/ftest/ftest.c"
                             , start_t);
  if (cur_array_TYPE_SIZE_T || cur_array_TYPE_STRING) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1002 "src/ftest/ftest.c" 3 4
                                                     stdout
# 1002 "src/ftest/ftest.c"
                                                     , "\033[0;32m" "==========" "\033[0m" " Running tests on %ld threads\n", parallel_nb); else fprintf(
# 1002 "src/ftest/ftest.c" 3 4
                                                     stdout
# 1002 "src/ftest/ftest.c"
                                                     , "==========" " Running tests on %ld threads\n", parallel_nb); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " Running tests on %ld threads\n", parallel_nb); else fprintf(f_ou_th[id_thread], "==========" " Running tests on %ld threads\n", parallel_nb); } } else{ if(!unicolour) fprintf(
# 1002 "src/ftest/ftest.c" 3 4
                                                     stdout
# 1002 "src/ftest/ftest.c"
                                                     , "\033[0;32m" "==========" "\033[0m" " Running tests on %ld threads\n", parallel_nb); else fprintf(
# 1002 "src/ftest/ftest.c" 3 4
                                                     stdout
# 1002 "src/ftest/ftest.c"
                                                     , "==========" " Running tests on %ld threads\n", parallel_nb); } } else{ if(!unicolour) fprintf(
# 1002 "src/ftest/ftest.c" 3 4
                                                     stdout
# 1002 "src/ftest/ftest.c"
                                                     , "\033[0;32m" "==========" "\033[0m" " Running tests on %ld threads\n", parallel_nb); else fprintf(
# 1002 "src/ftest/ftest.c" 3 4
                                                     stdout
# 1002 "src/ftest/ftest.c"
                                                     , "==========" " Running tests on %ld threads\n", parallel_nb); } }while(0);
  else do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1003 "src/ftest/ftest.c" 3 4
       stdout
# 1003 "src/ftest/ftest.c"
       , "\033[0;32m" "==========" "\033[0m" " Running %ld tests on %ld threads\n",count_tests, parallel_nb); else fprintf(
# 1003 "src/ftest/ftest.c" 3 4
       stdout
# 1003 "src/ftest/ftest.c"
       , "==========" " Running %ld tests on %ld threads\n",count_tests, parallel_nb); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " Running %ld tests on %ld threads\n",count_tests, parallel_nb); else fprintf(f_ou_th[id_thread], "==========" " Running %ld tests on %ld threads\n",count_tests, parallel_nb); } } else{ if(!unicolour) fprintf(
# 1003 "src/ftest/ftest.c" 3 4
       stdout
# 1003 "src/ftest/ftest.c"
       , "\033[0;32m" "==========" "\033[0m" " Running %ld tests on %ld threads\n",count_tests, parallel_nb); else fprintf(
# 1003 "src/ftest/ftest.c" 3 4
       stdout
# 1003 "src/ftest/ftest.c"
       , "==========" " Running %ld tests on %ld threads\n",count_tests, parallel_nb); } } else{ if(!unicolour) fprintf(
# 1003 "src/ftest/ftest.c" 3 4
       stdout
# 1003 "src/ftest/ftest.c"
       , "\033[0;32m" "==========" "\033[0m" " Running %ld tests on %ld threads\n",count_tests, parallel_nb); else fprintf(
# 1003 "src/ftest/ftest.c" 3 4
       stdout
# 1003 "src/ftest/ftest.c"
       , "==========" " Running %ld tests on %ld threads\n",count_tests, parallel_nb); } }while(0);
}




void head_parallel_run(struct timespec *start_t, size_t id_thrd){
  sprintf(log_name_file_thrd[id_thrd],"log_thread_%ld_id_%ld",id_thrd,pthread_self());
  f_ou_th[id_thrd] = fopen(log_name_file_thrd[id_thrd], "w+");
  clock_gettime(
# 1012 "src/ftest/ftest.c" 3 4
               0
# 1012 "src/ftest/ftest.c"
                             , start_t);
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1013 "src/ftest/ftest.c" 3 4
 stdout
# 1013 "src/ftest/ftest.c"
 , "\033[0;32m" "==========" "\033[0m" " Running tests on thread[%ld] ========== ==threadID== %ld \n", id_thrd,pthread_self()); else fprintf(
# 1013 "src/ftest/ftest.c" 3 4
 stdout
# 1013 "src/ftest/ftest.c"
 , "==========" " Running tests on thread[%ld] ========== ==threadID== %ld \n", id_thrd,pthread_self()); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " Running tests on thread[%ld] ========== ==threadID== %ld \n", id_thrd,pthread_self()); else fprintf(f_ou_th[id_thread], "==========" " Running tests on thread[%ld] ========== ==threadID== %ld \n", id_thrd,pthread_self()); } } else{ if(!unicolour) fprintf(
# 1013 "src/ftest/ftest.c" 3 4
 stdout
# 1013 "src/ftest/ftest.c"
 , "\033[0;32m" "==========" "\033[0m" " Running tests on thread[%ld] ========== ==threadID== %ld \n", id_thrd,pthread_self()); else fprintf(
# 1013 "src/ftest/ftest.c" 3 4
 stdout
# 1013 "src/ftest/ftest.c"
 , "==========" " Running tests on thread[%ld] ========== ==threadID== %ld \n", id_thrd,pthread_self()); } } else{ if(!unicolour) fprintf(
# 1013 "src/ftest/ftest.c" 3 4
 stdout
# 1013 "src/ftest/ftest.c"
 , "\033[0;32m" "==========" "\033[0m" " Running tests on thread[%ld] ========== ==threadID== %ld \n", id_thrd,pthread_self()); else fprintf(
# 1013 "src/ftest/ftest.c" 3 4
 stdout
# 1013 "src/ftest/ftest.c"
 , "==========" " Running tests on thread[%ld] ========== ==threadID== %ld \n", id_thrd,pthread_self()); } }while(0);
}




void
stat_end_parallel_run(size_t ntst, struct timespec start_t, size_t id_thrd){
  struct timespec end_t; clock_gettime(
# 1021 "src/ftest/ftest.c" 3 4
                                      0
# 1021 "src/ftest/ftest.c"
                                                    , &end_t);

  if((timeunit[0]=='s')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1023 "src/ftest/ftest.c" 3 4
            stdout
# 1023 "src/ftest/ftest.c"
            , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%lf s total) \n",ntst, id_thrd, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 1023 "src/ftest/ftest.c" 3 4
            stdout
# 1023 "src/ftest/ftest.c"
            , "==========" " %lu tests ran on thread[%ld]. (%lf s total) \n",ntst, id_thrd, diff_timespec_seconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%lf s total) \n",ntst, id_thrd, diff_timespec_seconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "==========" " %lu tests ran on thread[%ld]. (%lf s total) \n",ntst, id_thrd, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1023 "src/ftest/ftest.c" 3 4
            stdout
# 1023 "src/ftest/ftest.c"
            , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%lf s total) \n",ntst, id_thrd, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 1023 "src/ftest/ftest.c" 3 4
            stdout
# 1023 "src/ftest/ftest.c"
            , "==========" " %lu tests ran on thread[%ld]. (%lf s total) \n",ntst, id_thrd, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1023 "src/ftest/ftest.c" 3 4
            stdout
# 1023 "src/ftest/ftest.c"
            , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%lf s total) \n",ntst, id_thrd, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 1023 "src/ftest/ftest.c" 3 4
            stdout
# 1023 "src/ftest/ftest.c"
            , "==========" " %lu tests ran on thread[%ld]. (%lf s total) \n",ntst, id_thrd, diff_timespec_seconds(end_t, start_t)); } }while(0);
  else if((timeunit[0]=='n')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1024 "src/ftest/ftest.c" 3 4
                     stdout
# 1024 "src/ftest/ftest.c"
                     , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%ld ns total)\n",ntst, id_thrd, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 1024 "src/ftest/ftest.c" 3 4
                     stdout
# 1024 "src/ftest/ftest.c"
                     , "==========" " %lu tests ran on thread[%ld]. (%ld ns total)\n",ntst, id_thrd, diff_timespec_nanoseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%ld ns total)\n",ntst, id_thrd, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "==========" " %lu tests ran on thread[%ld]. (%ld ns total)\n",ntst, id_thrd, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1024 "src/ftest/ftest.c" 3 4
                     stdout
# 1024 "src/ftest/ftest.c"
                     , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%ld ns total)\n",ntst, id_thrd, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 1024 "src/ftest/ftest.c" 3 4
                     stdout
# 1024 "src/ftest/ftest.c"
                     , "==========" " %lu tests ran on thread[%ld]. (%ld ns total)\n",ntst, id_thrd, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1024 "src/ftest/ftest.c" 3 4
                     stdout
# 1024 "src/ftest/ftest.c"
                     , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%ld ns total)\n",ntst, id_thrd, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 1024 "src/ftest/ftest.c" 3 4
                     stdout
# 1024 "src/ftest/ftest.c"
                     , "==========" " %lu tests ran on thread[%ld]. (%ld ns total)\n",ntst, id_thrd, diff_timespec_nanoseconds(end_t, start_t)); } }while(0);
  else do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1025 "src/ftest/ftest.c" 3 4
      stdout
# 1025 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%lf ms total)\n",ntst, id_thrd, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 1025 "src/ftest/ftest.c" 3 4
      stdout
# 1025 "src/ftest/ftest.c"
      , "==========" " %lu tests ran on thread[%ld]. (%lf ms total)\n",ntst, id_thrd, diff_timespec_milliseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%lf ms total)\n",ntst, id_thrd, diff_timespec_milliseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "==========" " %lu tests ran on thread[%ld]. (%lf ms total)\n",ntst, id_thrd, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1025 "src/ftest/ftest.c" 3 4
      stdout
# 1025 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%lf ms total)\n",ntst, id_thrd, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 1025 "src/ftest/ftest.c" 3 4
      stdout
# 1025 "src/ftest/ftest.c"
      , "==========" " %lu tests ran on thread[%ld]. (%lf ms total)\n",ntst, id_thrd, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1025 "src/ftest/ftest.c" 3 4
      stdout
# 1025 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on thread[%ld]. (%lf ms total)\n",ntst, id_thrd, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 1025 "src/ftest/ftest.c" 3 4
      stdout
# 1025 "src/ftest/ftest.c"
      , "==========" " %lu tests ran on thread[%ld]. (%lf ms total)\n",ntst, id_thrd, diff_timespec_milliseconds(end_t, start_t)); } }while(0);

  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1027 "src/ftest/ftest.c" 3 4
 stdout
# 1027 "src/ftest/ftest.c"
 , "\033[0;32m" "===== PASS" "\033[0m" " %lu tests passed on thread[%ld]\n", count_pass_thread[id_thrd], id_thrd); else fprintf(
# 1027 "src/ftest/ftest.c" 3 4
 stdout
# 1027 "src/ftest/ftest.c"
 , "===== PASS" " %lu tests passed on thread[%ld]\n", count_pass_thread[id_thrd], id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== PASS" "\033[0m" " %lu tests passed on thread[%ld]\n", count_pass_thread[id_thrd], id_thrd); else fprintf(f_ou_th[id_thread], "===== PASS" " %lu tests passed on thread[%ld]\n", count_pass_thread[id_thrd], id_thrd); } } else{ if(!unicolour) fprintf(
# 1027 "src/ftest/ftest.c" 3 4
 stdout
# 1027 "src/ftest/ftest.c"
 , "\033[0;32m" "===== PASS" "\033[0m" " %lu tests passed on thread[%ld]\n", count_pass_thread[id_thrd], id_thrd); else fprintf(
# 1027 "src/ftest/ftest.c" 3 4
 stdout
# 1027 "src/ftest/ftest.c"
 , "===== PASS" " %lu tests passed on thread[%ld]\n", count_pass_thread[id_thrd], id_thrd); } } else{ if(!unicolour) fprintf(
# 1027 "src/ftest/ftest.c" 3 4
 stdout
# 1027 "src/ftest/ftest.c"
 , "\033[0;32m" "===== PASS" "\033[0m" " %lu tests passed on thread[%ld]\n", count_pass_thread[id_thrd], id_thrd); else fprintf(
# 1027 "src/ftest/ftest.c" 3 4
 stdout
# 1027 "src/ftest/ftest.c"
 , "===== PASS" " %lu tests passed on thread[%ld]\n", count_pass_thread[id_thrd], id_thrd); } }while(0);
  if(thread_test_failed_l[id_thrd] != 
# 1028 "src/ftest/ftest.c" 3 4
                                     ((void *)0)
# 1028 "src/ftest/ftest.c"
                                         ){
    do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1029 "src/ftest/ftest.c" 3 4
   stdout
# 1029 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed on thread[%ld], listed below:\n",count_fail_thread[id_thrd],id_thrd); else fprintf(
# 1029 "src/ftest/ftest.c" 3 4
   stdout
# 1029 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests failed on thread[%ld], listed below:\n",count_fail_thread[id_thrd],id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed on thread[%ld], listed below:\n",count_fail_thread[id_thrd],id_thrd); else fprintf(f_ou_th[id_thread], "===== FAIL" " %lu tests failed on thread[%ld], listed below:\n",count_fail_thread[id_thrd],id_thrd); } } else{ if(!unicolour) fprintf(
# 1029 "src/ftest/ftest.c" 3 4
   stdout
# 1029 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed on thread[%ld], listed below:\n",count_fail_thread[id_thrd],id_thrd); else fprintf(
# 1029 "src/ftest/ftest.c" 3 4
   stdout
# 1029 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests failed on thread[%ld], listed below:\n",count_fail_thread[id_thrd],id_thrd); } } else{ if(!unicolour) fprintf(
# 1029 "src/ftest/ftest.c" 3 4
   stdout
# 1029 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed on thread[%ld], listed below:\n",count_fail_thread[id_thrd],id_thrd); else fprintf(
# 1029 "src/ftest/ftest.c" 3 4
   stdout
# 1029 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests failed on thread[%ld], listed below:\n",count_fail_thread[id_thrd],id_thrd); } }while(0);
    list_failed_test(thread_test_failed_l[id_thrd]);
  }
}




void
stat_end_all_parallel_run(size_t ntst, struct timespec start_t){
  struct timespec end_t; clock_gettime(
# 1039 "src/ftest/ftest.c" 3 4
                                      0
# 1039 "src/ftest/ftest.c"
                                                    , &end_t);



  if((timeunit[0]=='s')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1043 "src/ftest/ftest.c" 3 4
            stdout
# 1043 "src/ftest/ftest.c"
            , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%lf s total) \n",ntst, parallel_nb, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 1043 "src/ftest/ftest.c" 3 4
            stdout
# 1043 "src/ftest/ftest.c"
            , "==========" " %lu tests ran on %ld threads. (%lf s total) \n",ntst, parallel_nb, diff_timespec_seconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%lf s total) \n",ntst, parallel_nb, diff_timespec_seconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "==========" " %lu tests ran on %ld threads. (%lf s total) \n",ntst, parallel_nb, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1043 "src/ftest/ftest.c" 3 4
            stdout
# 1043 "src/ftest/ftest.c"
            , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%lf s total) \n",ntst, parallel_nb, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 1043 "src/ftest/ftest.c" 3 4
            stdout
# 1043 "src/ftest/ftest.c"
            , "==========" " %lu tests ran on %ld threads. (%lf s total) \n",ntst, parallel_nb, diff_timespec_seconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1043 "src/ftest/ftest.c" 3 4
            stdout
# 1043 "src/ftest/ftest.c"
            , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%lf s total) \n",ntst, parallel_nb, diff_timespec_seconds(end_t, start_t)); else fprintf(
# 1043 "src/ftest/ftest.c" 3 4
            stdout
# 1043 "src/ftest/ftest.c"
            , "==========" " %lu tests ran on %ld threads. (%lf s total) \n",ntst, parallel_nb, diff_timespec_seconds(end_t, start_t)); } }while(0);
  else if((timeunit[0]=='n')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1044 "src/ftest/ftest.c" 3 4
                     stdout
# 1044 "src/ftest/ftest.c"
                     , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%ld ns total)\n",ntst, parallel_nb, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 1044 "src/ftest/ftest.c" 3 4
                     stdout
# 1044 "src/ftest/ftest.c"
                     , "==========" " %lu tests ran on %ld threads. (%ld ns total)\n",ntst, parallel_nb, diff_timespec_nanoseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%ld ns total)\n",ntst, parallel_nb, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "==========" " %lu tests ran on %ld threads. (%ld ns total)\n",ntst, parallel_nb, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1044 "src/ftest/ftest.c" 3 4
                     stdout
# 1044 "src/ftest/ftest.c"
                     , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%ld ns total)\n",ntst, parallel_nb, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 1044 "src/ftest/ftest.c" 3 4
                     stdout
# 1044 "src/ftest/ftest.c"
                     , "==========" " %lu tests ran on %ld threads. (%ld ns total)\n",ntst, parallel_nb, diff_timespec_nanoseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1044 "src/ftest/ftest.c" 3 4
                     stdout
# 1044 "src/ftest/ftest.c"
                     , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%ld ns total)\n",ntst, parallel_nb, diff_timespec_nanoseconds(end_t, start_t)); else fprintf(
# 1044 "src/ftest/ftest.c" 3 4
                     stdout
# 1044 "src/ftest/ftest.c"
                     , "==========" " %lu tests ran on %ld threads. (%ld ns total)\n",ntst, parallel_nb, diff_timespec_nanoseconds(end_t, start_t)); } }while(0);
  else do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1045 "src/ftest/ftest.c" 3 4
      stdout
# 1045 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%lf ms total)\n",ntst, parallel_nb, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 1045 "src/ftest/ftest.c" 3 4
      stdout
# 1045 "src/ftest/ftest.c"
      , "==========" " %lu tests ran on %ld threads. (%lf ms total)\n",ntst, parallel_nb, diff_timespec_milliseconds(end_t, start_t)); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%lf ms total)\n",ntst, parallel_nb, diff_timespec_milliseconds(end_t, start_t)); else fprintf(f_ou_th[id_thread], "==========" " %lu tests ran on %ld threads. (%lf ms total)\n",ntst, parallel_nb, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1045 "src/ftest/ftest.c" 3 4
      stdout
# 1045 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%lf ms total)\n",ntst, parallel_nb, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 1045 "src/ftest/ftest.c" 3 4
      stdout
# 1045 "src/ftest/ftest.c"
      , "==========" " %lu tests ran on %ld threads. (%lf ms total)\n",ntst, parallel_nb, diff_timespec_milliseconds(end_t, start_t)); } } else{ if(!unicolour) fprintf(
# 1045 "src/ftest/ftest.c" 3 4
      stdout
# 1045 "src/ftest/ftest.c"
      , "\033[0;32m" "==========" "\033[0m" " %lu tests ran on %ld threads. (%lf ms total)\n",ntst, parallel_nb, diff_timespec_milliseconds(end_t, start_t)); else fprintf(
# 1045 "src/ftest/ftest.c" 3 4
      stdout
# 1045 "src/ftest/ftest.c"
      , "==========" " %lu tests ran on %ld threads. (%lf ms total)\n",ntst, parallel_nb, diff_timespec_milliseconds(end_t, start_t)); } }while(0);

  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1047 "src/ftest/ftest.c" 3 4
 stdout
# 1047 "src/ftest/ftest.c"
 , "\033[0;32m" "===== PASS" "\033[0m" " %lu tests\n", count_pass_global); else fprintf(
# 1047 "src/ftest/ftest.c" 3 4
 stdout
# 1047 "src/ftest/ftest.c"
 , "===== PASS" " %lu tests\n", count_pass_global); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== PASS" "\033[0m" " %lu tests\n", count_pass_global); else fprintf(f_ou_th[id_thread], "===== PASS" " %lu tests\n", count_pass_global); } } else{ if(!unicolour) fprintf(
# 1047 "src/ftest/ftest.c" 3 4
 stdout
# 1047 "src/ftest/ftest.c"
 , "\033[0;32m" "===== PASS" "\033[0m" " %lu tests\n", count_pass_global); else fprintf(
# 1047 "src/ftest/ftest.c" 3 4
 stdout
# 1047 "src/ftest/ftest.c"
 , "===== PASS" " %lu tests\n", count_pass_global); } } else{ if(!unicolour) fprintf(
# 1047 "src/ftest/ftest.c" 3 4
 stdout
# 1047 "src/ftest/ftest.c"
 , "\033[0;32m" "===== PASS" "\033[0m" " %lu tests\n", count_pass_global); else fprintf(
# 1047 "src/ftest/ftest.c" 3 4
 stdout
# 1047 "src/ftest/ftest.c"
 , "===== PASS" " %lu tests\n", count_pass_global); } }while(0);
  if(failed_l != 
# 1048 "src/ftest/ftest.c" 3 4
                ((void *)0)
# 1048 "src/ftest/ftest.c"
                    ){
    do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1049 "src/ftest/ftest.c" 3 4
   stdout
# 1049 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests, listed below:\n",count_fail_global); else fprintf(
# 1049 "src/ftest/ftest.c" 3 4
   stdout
# 1049 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests, listed below:\n",count_fail_global); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests, listed below:\n",count_fail_global); else fprintf(f_ou_th[id_thread], "===== FAIL" " %lu tests, listed below:\n",count_fail_global); } } else{ if(!unicolour) fprintf(
# 1049 "src/ftest/ftest.c" 3 4
   stdout
# 1049 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests, listed below:\n",count_fail_global); else fprintf(
# 1049 "src/ftest/ftest.c" 3 4
   stdout
# 1049 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests, listed below:\n",count_fail_global); } } else{ if(!unicolour) fprintf(
# 1049 "src/ftest/ftest.c" 3 4
   stdout
# 1049 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests, listed below:\n",count_fail_global); else fprintf(
# 1049 "src/ftest/ftest.c" 3 4
   stdout
# 1049 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests, listed below:\n",count_fail_global); } }while(0);
    list_failed_test(failed_l);
    do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1051 "src/ftest/ftest.c" 3 4
   stdout
# 1051 "src/ftest/ftest.c"
   , "" "" "\033[0m" "\n%ld FAILED TESTS \n",count_fail_global); else fprintf(
# 1051 "src/ftest/ftest.c" 3 4
   stdout
# 1051 "src/ftest/ftest.c"
   , "" "\n%ld FAILED TESTS \n",count_fail_global); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "" "" "\033[0m" "\n%ld FAILED TESTS \n",count_fail_global); else fprintf(f_ou_th[id_thread], "" "\n%ld FAILED TESTS \n",count_fail_global); } } else{ if(!unicolour) fprintf(
# 1051 "src/ftest/ftest.c" 3 4
   stdout
# 1051 "src/ftest/ftest.c"
   , "" "" "\033[0m" "\n%ld FAILED TESTS \n",count_fail_global); else fprintf(
# 1051 "src/ftest/ftest.c" 3 4
   stdout
# 1051 "src/ftest/ftest.c"
   , "" "\n%ld FAILED TESTS \n",count_fail_global); } } else{ if(!unicolour) fprintf(
# 1051 "src/ftest/ftest.c" 3 4
   stdout
# 1051 "src/ftest/ftest.c"
   , "" "" "\033[0m" "\n%ld FAILED TESTS \n",count_fail_global); else fprintf(
# 1051 "src/ftest/ftest.c" 3 4
   stdout
# 1051 "src/ftest/ftest.c"
   , "" "\n%ld FAILED TESTS \n",count_fail_global); } }while(0);
  }
}



void begin_execute_func_parallel(char *fun_ame, struct timespec *start_t, size_t id_thrd){
  clock_gettime(
# 1058 "src/ftest/ftest.c" 3 4
               0
# 1058 "src/ftest/ftest.c"
                             , start_t);
  do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1059 "src/ftest/ftest.c" 3 4
 stdout
# 1059 "src/ftest/ftest.c"
 , "\033[0;32m" "====== RUN" "\033[0m" " %s on thread[%ld]\n", fun_ame, id_thrd); else fprintf(
# 1059 "src/ftest/ftest.c" 3 4
 stdout
# 1059 "src/ftest/ftest.c"
 , "====== RUN" " %s on thread[%ld]\n", fun_ame, id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "====== RUN" "\033[0m" " %s on thread[%ld]\n", fun_ame, id_thrd); else fprintf(f_ou_th[id_thread], "====== RUN" " %s on thread[%ld]\n", fun_ame, id_thrd); } } else{ if(!unicolour) fprintf(
# 1059 "src/ftest/ftest.c" 3 4
 stdout
# 1059 "src/ftest/ftest.c"
 , "\033[0;32m" "====== RUN" "\033[0m" " %s on thread[%ld]\n", fun_ame, id_thrd); else fprintf(
# 1059 "src/ftest/ftest.c" 3 4
 stdout
# 1059 "src/ftest/ftest.c"
 , "====== RUN" " %s on thread[%ld]\n", fun_ame, id_thrd); } } else{ if(!unicolour) fprintf(
# 1059 "src/ftest/ftest.c" 3 4
 stdout
# 1059 "src/ftest/ftest.c"
 , "\033[0;32m" "====== RUN" "\033[0m" " %s on thread[%ld]\n", fun_ame, id_thrd); else fprintf(
# 1059 "src/ftest/ftest.c" 3 4
 stdout
# 1059 "src/ftest/ftest.c"
 , "====== RUN" " %s on thread[%ld]\n", fun_ame, id_thrd); } }while(0);
}






void end_execute_func_parallel(char *fun_ame, struct timespec start_t, size_t id_thrd){
  struct timespec end_t; clock_gettime(
# 1068 "src/ftest/ftest.c" 3 4
                                      0
# 1068 "src/ftest/ftest.c"
                                                    , &end_t);
  size_t num_test = extract_num__f(fun_ame);
  do { if (0) fprintf(
# 1070 "src/ftest/ftest.c" 3 4
 stderr
# 1070 "src/ftest/ftest.c"
 , "%s:%d:%s(): " " ... thread[%ld], count_fail_test[%ld] = %ld ... %s\n", "src/ftest/ftest.c", 1070, __func__, id_thrd, num_test, count_fail_test[num_test],fun_ame); } while (0);
  if(count_fail_test[num_test]){
    do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_fail_global);; ++count_fail_global; pthread_mutex_unlock(&mut_count_fail_global);; } else ++count_fail_global; }while(0);;
    append_failed_list(&thread_test_failed_l[id_thrd], fun_ame);
    ++(count_fail_thread[id_thrd]);
    pthread_mutex_lock(&mut_global_list_fail);;
    append_failed_list(&failed_l, fun_ame);
    pthread_mutex_unlock(&mut_global_list_fail);;
    do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1078 "src/ftest/ftest.c" 3 4
   stdout
# 1078 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed from %s on thread[%ld], %ld tests failed on thread[%ld]\n",count_fail_test[num_test],fun_ame, id_thrd,count_fail_thread[id_thrd],id_thrd); else fprintf(
# 1078 "src/ftest/ftest.c" 3 4
   stdout
# 1078 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests failed from %s on thread[%ld], %ld tests failed on thread[%ld]\n",count_fail_test[num_test],fun_ame, id_thrd,count_fail_thread[id_thrd],id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed from %s on thread[%ld], %ld tests failed on thread[%ld]\n",count_fail_test[num_test],fun_ame, id_thrd,count_fail_thread[id_thrd],id_thrd); else fprintf(f_ou_th[id_thread], "===== FAIL" " %lu tests failed from %s on thread[%ld], %ld tests failed on thread[%ld]\n",count_fail_test[num_test],fun_ame, id_thrd,count_fail_thread[id_thrd],id_thrd); } } else{ if(!unicolour) fprintf(
# 1078 "src/ftest/ftest.c" 3 4
   stdout
# 1078 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed from %s on thread[%ld], %ld tests failed on thread[%ld]\n",count_fail_test[num_test],fun_ame, id_thrd,count_fail_thread[id_thrd],id_thrd); else fprintf(
# 1078 "src/ftest/ftest.c" 3 4
   stdout
# 1078 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests failed from %s on thread[%ld], %ld tests failed on thread[%ld]\n",count_fail_test[num_test],fun_ame, id_thrd,count_fail_thread[id_thrd],id_thrd); } } else{ if(!unicolour) fprintf(
# 1078 "src/ftest/ftest.c" 3 4
   stdout
# 1078 "src/ftest/ftest.c"
   , "\033[0;31m" "===== FAIL" "\033[0m" " %lu tests failed from %s on thread[%ld], %ld tests failed on thread[%ld]\n",count_fail_test[num_test],fun_ame, id_thrd,count_fail_thread[id_thrd],id_thrd); else fprintf(
# 1078 "src/ftest/ftest.c" 3 4
   stdout
# 1078 "src/ftest/ftest.c"
   , "===== FAIL" " %lu tests failed from %s on thread[%ld], %ld tests failed on thread[%ld]\n",count_fail_test[num_test],fun_ame, id_thrd,count_fail_thread[id_thrd],id_thrd); } }while(0);
    if((timeunit[0]=='s')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); else fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); else fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); else fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); } }while(0); else if((timeunit[0]=='n')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); else fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); else fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); else fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); } }while(0); else do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); else fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); else fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "\033[0;31m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); else fprintf(
# 1079 "src/ftest/ftest.c" 3 4
   stdout
# 1079 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); } }while(0);;
  }
  else
  {
    ++(count_pass_thread[id_thrd]);
    do{ if(is_parallel_nb){ pthread_mutex_lock(&mut_count_pass_global);; ++count_pass_global; pthread_mutex_unlock(&mut_count_pass_global);; } else ++count_pass_global; }while(0);;
    if((timeunit[0]=='s')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); else fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); else fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); else fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf s), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_seconds(end_t, start_t),id_thrd); } }while(0); else if((timeunit[0]=='n')) do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); else fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); else fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); else fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%ld ns), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_nanoseconds(end_t, start_t),id_thrd); } }while(0); else do{ if(ordered){ if(is_parallel_nb){ size_t id_thread=id_of_thread_executed(); if(id_thread < 0){ if(!unicolour) fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); else fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); } else{ if(!unicolour) fprintf(f_ou_th[id_thread], "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); else fprintf(f_ou_th[id_thread], "===== DONE" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); else fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); } } else{ if(!unicolour) fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "\033[0;32m" "===== DONE" "\033[0m" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); else fprintf(
# 1085 "src/ftest/ftest.c" 3 4
   stdout
# 1085 "src/ftest/ftest.c"
   , "===== DONE" " %lu tests passed from %s (%lf ms), on thread[%ld]\n\n",count_pass_test[num_test],fun_ame, diff_timespec_milliseconds(end_t, start_t),id_thrd); } }while(0);;
  }
}

unsigned sleep(unsigned x) { time_t t0=time(0); while (difftime(time(0),t0)<x); return 0; }
unsigned nnsleep(long long x) {
  struct timespec time_stop;
  struct timespec time_start;
  clock_gettime(
# 1093 "src/ftest/ftest.c" 3 4
               0
# 1093 "src/ftest/ftest.c"
                             , &time_start);

  long long diff;
  do{
    clock_gettime(
# 1097 "src/ftest/ftest.c" 3 4
                 0
# 1097 "src/ftest/ftest.c"
                               , &time_stop);

    diff = 1.0e9 * (time_stop.tv_sec - time_start.tv_sec) + (time_stop.tv_nsec - time_start.tv_nsec);
  }while(diff < x);
  return 0;
}

void progress_test_(){
  struct func *tmp;
  size_t num_test=0;
  int cur = 0, len;

  int width;
  long int chg=0;

  char prgss[]="\\|/-";
  struct winsize w;





  len=strlen(prgss);

  do{
    ioctl(1,
# 1122 "src/ftest/ftest.c" 3 4
           0x5413
# 1122 "src/ftest/ftest.c"
                     , &w);
    width = w.ws_col - 50;

    tmp = current_fn;

    if(tmp)
      num_test = extract_num__f(tmp->name);

    printf("\r(%c)[",prgss[cur]);

    for(int i=0; i< width; ++i) {
      if(i<=(num_test+1)*width/count_tests){

          printf("#");
      }
      else printf(".");
    }
      printf("|%3ld%%, test N° %ld/%ld]",(num_test+1)*100/count_tests,num_test,count_tests-1);
      fflush(
# 1140 "src/ftest/ftest.c" 3 4
            stdout
# 1140 "src/ftest/ftest.c"
                  );





      chg=0;
      if(cur<len-1) ++cur;
      else cur=0;




    nnsleep(200000000);
  }while(tmp);

  printf("\n");
}

void*
run_progress_tests(void *max_d)
{
   int max_col = 80;
   progress_test_(max_col);
}



void execute_test_parallel(size_t id_thrd){

  struct timespec start_t;
  struct func *tmp;
  size_t num_f;
  char *name_test=
# 1173 "src/ftest/ftest.c" 3 4
                 ((void *)0)
# 1173 "src/ftest/ftest.c"
                     ;
  
# 1174 "src/ftest/ftest.c" 3 4
 _Bool 
# 1174 "src/ftest/ftest.c"
      exec_test=0;

  do{
    pthread_mutex_lock(&mut_current_test);;
    tmp = current_fn;
    if(tmp){
      current_fn = tmp->next;
      pthread_mutex_unlock(&mut_current_test);;
      exec_test=0; if(some_tests_selected == 0){ exec_test=1; } else{ if(cur_array_TYPE_SIZE_T){ num_f=extract_num__f(tmp->name) ; exec_test = is_in_array_TYPE_SIZE_T(array_TYPE_SIZE_T, num_f); } if(exec_test == 0 && cur_array_TYPE_STRING){ extract_name_test_from_name(tmp->name, &name_test); exec_test = is_in_array_TYPE_STRING(array_TYPE_STRING, name_test ); free(name_test); } }
      if(exec_test){
        do { if (0) fprintf(
# 1184 "src/ftest/ftest.c" 3 4
       stderr
# 1184 "src/ftest/ftest.c"
       , "%s:%d:%s(): " " *** thread[%ld], func_name = %s *** \n", "src/ftest/ftest.c", 1184, __func__, id_thrd, tmp->name); } while (0);
        begin_execute_func_parallel(tmp->name, &start_t, id_thrd);
        tmp->run();
        end_execute_func_parallel(tmp->name, start_t, id_thrd);
      }
    }
    else{
      pthread_mutex_unlock(&mut_current_test);;
    }
  }while(tmp);
}

void*
run_parallel_tests(void *id)
{
   size_t id_th=*(size_t*)id;
   id_thread_self[id_th] = pthread_self();
   struct timespec start_t;
   head_parallel_run(&start_t, id_th);
   execute_test_parallel(id_th);
   stat_end_parallel_run(count_fail_thread[id_th]+count_pass_thread[id_th], start_t, id_th);
}




void
init_parallel_test_()
{
  if(savelog) ordered =1;

  progress = ordered;

  is_parallel_nb = 1;

  f_ou_th = malloc((parallel_nb + 1) *sizeof(FILE*));
  log_name_file_thrd = malloc((parallel_nb + 1) *sizeof(char*));
  for(size_t i=0; i<=parallel_nb; ++i){
    log_name_file_thrd[i] = malloc((256) *sizeof(char));
  }




  sprintf(log_name_file_thrd[parallel_nb],"log_principal_thread_%ld_id_%ld",parallel_nb,pthread_self());
  f_ou_th[parallel_nb] = fopen(log_name_file_thrd[parallel_nb], "w+");



  count_pass_test = malloc(count_tests * sizeof(size_t));
  count_fail_test = malloc(count_tests * sizeof(size_t));
  for(size_t i=0; i<count_tests; ++i){
    count_pass_test[i]=0;
    count_fail_test[i]=0;
  }

  thread_test_failed_l = malloc(parallel_nb * sizeof(struct failed_lists*));
  count_pass_thread = malloc(parallel_nb * sizeof(size_t));
  count_fail_thread = malloc(parallel_nb * sizeof(size_t));
  id_thread_self = malloc((parallel_nb + 1) * sizeof(size_t));

  id_thread_self[parallel_nb]= pthread_self();

  for(size_t i=0; i<parallel_nb; ++i){
    thread_test_failed_l[i] = 
# 1248 "src/ftest/ftest.c" 3 4
                             ((void *)0)
# 1248 "src/ftest/ftest.c"
                                 ;
    count_pass_thread[i] = 0;
    count_fail_thread[i] = 0;
  }

  current_fn = f_beging;

  pthread_mutex_init(&mut_global_list_fail, 
# 1255 "src/ftest/ftest.c" 3 4
                                           ((void *)0)
# 1255 "src/ftest/ftest.c"
                                               );
  pthread_mutex_init(&mut_current_test, 
# 1256 "src/ftest/ftest.c" 3 4
                                       ((void *)0)
# 1256 "src/ftest/ftest.c"
                                           );
  pthread_mutex_init(&mut_count_pass_global, 
# 1257 "src/ftest/ftest.c" 3 4
                                            ((void *)0)
# 1257 "src/ftest/ftest.c"
                                                );
  pthread_mutex_init(&mut_count_fail_global, 
# 1258 "src/ftest/ftest.c" 3 4
                                            ((void *)0)
# 1258 "src/ftest/ftest.c"
                                                );
  pthread_mutex_init(&mut_count_pass_local, 
# 1259 "src/ftest/ftest.c" 3 4
                                           ((void *)0)
# 1259 "src/ftest/ftest.c"
                                               );
  pthread_mutex_init(&mut_count_fail_local, 
# 1260 "src/ftest/ftest.c" 3 4
                                           ((void *)0)
# 1260 "src/ftest/ftest.c"
                                               );
}



void
final_parallel_test_()
{
  free(count_pass_test);
  free(count_fail_test);
  free(count_pass_thread);
  free(count_fail_thread);

  free(thread_test_failed_l);


  pthread_mutex_destroy(&mut_global_list_fail);
  pthread_mutex_destroy(&mut_current_test);
  pthread_mutex_destroy(&mut_count_pass_global);
  pthread_mutex_destroy(&mut_count_fail_global);
  pthread_mutex_destroy(&mut_count_pass_local);
  pthread_mutex_destroy(&mut_count_fail_local);


  char reader[256];

  if(savelog){
    FILE *f_savelog;
    f_savelog=fopen(savelog, "w+");
    for(size_t id_thrd =0 ; id_thrd <= parallel_nb; ++id_thrd){
      rewind(f_ou_th[id_thrd]);
      while(fgets(reader, 255,f_ou_th[id_thrd] )){
        fprintf(
# 1292 "src/ftest/ftest.c" 3 4
               stdout
# 1292 "src/ftest/ftest.c"
                    ,"%s",reader);
        fprintf(f_savelog,"%s",reader);
      }
      fclose(f_ou_th[id_thrd]);
    }
    fclose(f_savelog);
  }else{
    for(size_t id_thrd =0 ; id_thrd <= parallel_nb; ++id_thrd){
      rewind(f_ou_th[id_thrd]);
      while(fgets(reader, 255,f_ou_th[id_thrd] ))
        fprintf(
# 1302 "src/ftest/ftest.c" 3 4
               stdout
# 1302 "src/ftest/ftest.c"
                    ,"%s",reader);
      fclose(f_ou_th[id_thrd]);
    }
  }

  if(removelog){
    for(size_t i=0; i<=parallel_nb; ++i){
      remove(log_name_file_thrd[i]);
    }
  }


}

void run_all_tests_parallel(size_t parallel )
{
  parallel_nb = parallel;

  init_parallel_test_();

  struct timespec start_t;

  head_all_parallel_run(&start_t);


  pthread_t thrd_progress;
if(progress) pthread_create(&thrd_progress, 
# 1328 "src/ftest/ftest.c" 3 4
                                            ((void *)0)
# 1328 "src/ftest/ftest.c"
                                                , run_progress_tests, 
# 1328 "src/ftest/ftest.c" 3 4
                                                                      ((void *)0)
# 1328 "src/ftest/ftest.c"
                                                                          );



  pthread_t *thrd = malloc(parallel_nb * sizeof(pthread_t));
  size_t *id_th = malloc( parallel_nb * sizeof(size_t));

  for(size_t i = 0; i < parallel_nb; ++i){
    id_th[i]=i;
    pthread_create(&thrd[i], 
# 1337 "src/ftest/ftest.c" 3 4
                            ((void *)0)
# 1337 "src/ftest/ftest.c"
                                , run_parallel_tests, (void*)&id_th[i]);
  }

  for(size_t i=0; i<parallel_nb; ++i){
    pthread_join(thrd[i], 
# 1341 "src/ftest/ftest.c" 3 4
                         ((void *)0)
# 1341 "src/ftest/ftest.c"
                             );
  }

if(progress) pthread_join(thrd_progress, 
# 1344 "src/ftest/ftest.c" 3 4
                                         ((void *)0)
# 1344 "src/ftest/ftest.c"
                                             );


  stat_end_all_parallel_run(count_pass_global + count_fail_global, start_t );

  free(id_th);
  free(thrd);

  final_parallel_test_();
}


void run_all_tests_args(int argc, char **argv){

  parse_options(argc,argv);
  if(help) usage(argc,argv);
  if(is_parallel_nb) run_all_tests_parallel(parallel_nb);
  else run_all_tests();
}

void
clear_all_func(struct func **fun)
{
  struct func *tmp = *fun, *ttmp;
  while(tmp != 
# 1368 "src/ftest/ftest.c" 3 4
              ((void *)0)
# 1368 "src/ftest/ftest.c"
                  ){
    ttmp = tmp;
    tmp = tmp->next;
    free(ttmp);
  }
}




__attribute__((destructor))
void
purge_tests()
{
  struct func *tmp = f_beging;
  clear_all_func(&tmp);
  do { if (0) fprintf(
# 1384 "src/ftest/ftest.c" 3 4
 stderr
# 1384 "src/ftest/ftest.c"
 , "%s:%d:%s(): " "%s\n", "src/ftest/ftest.c", 1384, __func__, "purge done"); } while (0);
}
# 0 "src/fmock/fmock.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "src/fmock/fmock.c"
# 1 "./src/fmock/fmock.h" 1



# 1 "./src/ftest/ftest.h" 1



# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 52 "/usr/include/stdio.h" 3 4
typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 77 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 178 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 205 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 293 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 308 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 403 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 431 "/usr/include/stdio.h" 2 3 4



extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 786 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));
# 867 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4

# 5 "./src/ftest/ftest.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 144 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 654 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 828 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 848 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1013 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4

# 6 "./src/ftest/ftest.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 173 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 407 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 458 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
# 489 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 539 "/usr/include/string.h" 3 4

# 7 "./src/ftest/ftest.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 8 "./src/ftest/ftest.h" 2

# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4


# 98 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4

# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 45 "/usr/include/sched.h" 2 3 4









extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 138 "/usr/include/sched.h" 3 4

# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 116 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 132 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 440 "/usr/include/time.h" 3 4

# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 2 3 4
# 34 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL





};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 197 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 441 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 750 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) __asm__ ("" "__sigsetjmp") __attribute__ ((__nothrow__))


                     __attribute__ ((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 946 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__access__ (__none__, 2)));




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));
# 1346 "/usr/include/pthread.h" 3 4

# 10 "./src/ftest/ftest.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctls.h" 1 3 4




# 1 "/usr/include/linux/ioctl.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/ioctl.h" 2 3 4
# 6 "/usr/include/linux/ioctl.h" 2 3 4
# 6 "/usr/include/asm-generic/ioctls.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 2 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctls.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/ioctls.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/ioctl-types.h" 2 3 4


struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 30 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/sys/ttydefaults.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 2 3 4





extern int ioctl (int __fd, unsigned long int __request, ...) __attribute__ ((__nothrow__ , __leaf__));
# 53 "/usr/include/x86_64-linux-gnu/sys/ioctl.h" 3 4

# 12 "./src/ftest/ftest.h" 2

# 1 "./src/tools_t/tools_t.h" 1






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdbool.h" 1 3 4
# 8 "./src/tools_t/tools_t.h" 2
# 40 "./src/tools_t/tools_t.h"

# 40 "./src/tools_t/tools_t.h"
void gotoxy(int x, int y);
# 95 "./src/tools_t/tools_t.h"
int COMPARE_N_TYPE_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_CHAR(char* dst, const char* src, size_t size); char MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); char MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); char* TYPE_CHAR_TO_STR(char var);
int COMPARE_N_TYPE_U_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_U_CHAR(unsigned char* dst, const unsigned char* src, size_t size); unsigned char MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); unsigned char MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); char* TYPE_U_CHAR_TO_STR(unsigned char var);
int COMPARE_N_TYPE_INT(const void *,const void*); void COPY_ARRAY_TYPE_INT(int* dst, const int* src, size_t size); int MAX_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_INT(const int *array, size_t size); int MIN_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_INT(const int *array, size_t size); char* TYPE_INT_TO_STR(int var);
int COMPARE_N_TYPE_U_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_INT(unsigned int* dst, const unsigned int* src, size_t size); unsigned int MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); unsigned int MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); char* TYPE_U_INT_TO_STR(unsigned int var);
int COMPARE_N_TYPE_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_L_INT(long int* dst, const long int* src, size_t size); long int MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); long int MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); char* TYPE_L_INT_TO_STR(long int var);
int COMPARE_N_TYPE_U_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_L_INT(unsigned long int* dst, const unsigned long int* src, size_t size); unsigned long int MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); unsigned long int MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); char* TYPE_U_L_INT_TO_STR(unsigned long int var);
int COMPARE_N_TYPE_SIZE_T(const void *,const void*); void COPY_ARRAY_TYPE_SIZE_T(size_t* dst, const size_t* src, size_t size); size_t MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); char* TYPE_SIZE_T_TO_STR(size_t var);
int COMPARE_N_TYPE_FLOAT(const void *,const void*); void COPY_ARRAY_TYPE_FLOAT(float* dst, const float* src, size_t size); float MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); float MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); char* TYPE_FLOAT_TO_STR(float var);
int COMPARE_N_TYPE_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_DOUBLE(double* dst, const double* src, size_t size); double MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); double MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); char* TYPE_DOUBLE_TO_STR(double var);
int COMPARE_N_TYPE_L_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_L_DOUBLE(long double* dst, const long double* src, size_t size); long double MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); long double MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); char* TYPE_L_DOUBLE_TO_STR(long double var);
int COMPARE_N_TYPE_STRING(const void *,const void*); void COPY_ARRAY_TYPE_STRING(char** dst, const char** src, size_t size); char* MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); char* MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); char* TYPE_STRING_TO_STR(char* var);





double diff_timespec_seconds(struct timespec time_stop, struct timespec time_start);

double diff_timespec_milliseconds(struct timespec time_stop, struct timespec time_start);

long diff_timespec_nanoseconds(struct timespec time_stop, struct timespec time_start);
# 14 "./src/ftest/ftest.h" 2
# 51 "./src/ftest/ftest.h"
extern FILE **f_ou_th;
extern 
# 52 "./src/ftest/ftest.h" 3 4
      _Bool 
# 52 "./src/ftest/ftest.h"
           unicolour;
extern 
# 53 "./src/ftest/ftest.h" 3 4
      _Bool 
# 53 "./src/ftest/ftest.h"
           ordered;
# 159 "./src/ftest/ftest.h"
struct func {
  char *name;
  void (*run)(void);
  struct func *next;
};


extern 
# 166 "./src/ftest/ftest.h" 3 4
      _Bool 
# 166 "./src/ftest/ftest.h"
           is_parallel_nb;

long int id_of_thread_executed(void);

void parse_options(int argc, char **argv);

void run_all_tests();
void execute_all(struct func *fun);
void append_func(void (*run)(void), char *name);






void run_all_tests_parallel(size_t parallel );





void run_all_tests_args(int argc, char **argv);


# 189 "./src/ftest/ftest.h" 3 4
_Bool 
# 189 "./src/ftest/ftest.h"
    expected_true_f(
# 189 "./src/ftest/ftest.h" 3 4
                    _Bool 
# 189 "./src/ftest/ftest.h"
                         val);

# 190 "./src/ftest/ftest.h" 3 4
_Bool 
# 190 "./src/ftest/ftest.h"
    expected_false_f(
# 190 "./src/ftest/ftest.h" 3 4
                     _Bool 
# 190 "./src/ftest/ftest.h"
                          val);


# 192 "./src/ftest/ftest.h" 3 4
_Bool 
# 192 "./src/ftest/ftest.h"
    expected_true_f_name(
# 192 "./src/ftest/ftest.h" 3 4
                         _Bool 
# 192 "./src/ftest/ftest.h"
                              val, const char *name);

# 193 "./src/ftest/ftest.h" 3 4
_Bool 
# 193 "./src/ftest/ftest.h"
    expected_false_f_name(
# 193 "./src/ftest/ftest.h" 3 4
                          _Bool 
# 193 "./src/ftest/ftest.h"
                               val, const char *name);
# 203 "./src/ftest/ftest.h"

# 203 "./src/ftest/ftest.h" 3 4
_Bool 
# 203 "./src/ftest/ftest.h"
expected_EQ_TYPE_CHAR(char var1, char var2); 
# 203 "./src/ftest/ftest.h" 3 4
_Bool 
# 203 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_CHAR(char var1, char var2, const char *name);

# 204 "./src/ftest/ftest.h" 3 4
_Bool 
# 204 "./src/ftest/ftest.h"
expected_EQ_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 204 "./src/ftest/ftest.h" 3 4
_Bool 
# 204 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 205 "./src/ftest/ftest.h" 3 4
_Bool 
# 205 "./src/ftest/ftest.h"
expected_EQ_TYPE_INT(int var1, int var2); 
# 205 "./src/ftest/ftest.h" 3 4
_Bool 
# 205 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_INT(int var1, int var2, const char *name);

# 206 "./src/ftest/ftest.h" 3 4
_Bool 
# 206 "./src/ftest/ftest.h"
expected_EQ_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 206 "./src/ftest/ftest.h" 3 4
_Bool 
# 206 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 207 "./src/ftest/ftest.h" 3 4
_Bool 
# 207 "./src/ftest/ftest.h"
expected_EQ_TYPE_L_INT(long int var1, long int var2); 
# 207 "./src/ftest/ftest.h" 3 4
_Bool 
# 207 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 208 "./src/ftest/ftest.h" 3 4
_Bool 
# 208 "./src/ftest/ftest.h"
expected_EQ_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 208 "./src/ftest/ftest.h" 3 4
_Bool 
# 208 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 209 "./src/ftest/ftest.h" 3 4
_Bool 
# 209 "./src/ftest/ftest.h"
expected_EQ_TYPE_SIZE_T(size_t var1, size_t var2); 
# 209 "./src/ftest/ftest.h" 3 4
_Bool 
# 209 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 210 "./src/ftest/ftest.h" 3 4
_Bool 
# 210 "./src/ftest/ftest.h"
expected_EQ_TYPE_FLOAT(float var1, float var2); 
# 210 "./src/ftest/ftest.h" 3 4
_Bool 
# 210 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 211 "./src/ftest/ftest.h" 3 4
_Bool 
# 211 "./src/ftest/ftest.h"
expected_EQ_TYPE_DOUBLE(double var1, double var2); 
# 211 "./src/ftest/ftest.h" 3 4
_Bool 
# 211 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 212 "./src/ftest/ftest.h" 3 4
_Bool 
# 212 "./src/ftest/ftest.h"
expected_EQ_TYPE_L_DOUBLE(long double var1, long double var2); 
# 212 "./src/ftest/ftest.h" 3 4
_Bool 
# 212 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 213 "./src/ftest/ftest.h" 3 4
_Bool 
# 213 "./src/ftest/ftest.h"
expected_EQ_TYPE_STRING(char* var1, char* var2); 
# 213 "./src/ftest/ftest.h" 3 4
_Bool 
# 213 "./src/ftest/ftest.h"
expected_EQ_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 222 "./src/ftest/ftest.h"

# 222 "./src/ftest/ftest.h" 3 4
_Bool 
# 222 "./src/ftest/ftest.h"
expected_LT_TYPE_CHAR(char var1, char var2); 
# 222 "./src/ftest/ftest.h" 3 4
_Bool 
# 222 "./src/ftest/ftest.h"
expected_LT_name_TYPE_CHAR(char var1, char var2, const char *name);

# 223 "./src/ftest/ftest.h" 3 4
_Bool 
# 223 "./src/ftest/ftest.h"
expected_LT_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 223 "./src/ftest/ftest.h" 3 4
_Bool 
# 223 "./src/ftest/ftest.h"
expected_LT_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 224 "./src/ftest/ftest.h" 3 4
_Bool 
# 224 "./src/ftest/ftest.h"
expected_LT_TYPE_INT(int var1, int var2); 
# 224 "./src/ftest/ftest.h" 3 4
_Bool 
# 224 "./src/ftest/ftest.h"
expected_LT_name_TYPE_INT(int var1, int var2, const char *name);

# 225 "./src/ftest/ftest.h" 3 4
_Bool 
# 225 "./src/ftest/ftest.h"
expected_LT_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 225 "./src/ftest/ftest.h" 3 4
_Bool 
# 225 "./src/ftest/ftest.h"
expected_LT_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 226 "./src/ftest/ftest.h" 3 4
_Bool 
# 226 "./src/ftest/ftest.h"
expected_LT_TYPE_L_INT(long int var1, long int var2); 
# 226 "./src/ftest/ftest.h" 3 4
_Bool 
# 226 "./src/ftest/ftest.h"
expected_LT_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 227 "./src/ftest/ftest.h" 3 4
_Bool 
# 227 "./src/ftest/ftest.h"
expected_LT_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 227 "./src/ftest/ftest.h" 3 4
_Bool 
# 227 "./src/ftest/ftest.h"
expected_LT_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 228 "./src/ftest/ftest.h" 3 4
_Bool 
# 228 "./src/ftest/ftest.h"
expected_LT_TYPE_SIZE_T(size_t var1, size_t var2); 
# 228 "./src/ftest/ftest.h" 3 4
_Bool 
# 228 "./src/ftest/ftest.h"
expected_LT_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 229 "./src/ftest/ftest.h" 3 4
_Bool 
# 229 "./src/ftest/ftest.h"
expected_LT_TYPE_FLOAT(float var1, float var2); 
# 229 "./src/ftest/ftest.h" 3 4
_Bool 
# 229 "./src/ftest/ftest.h"
expected_LT_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 230 "./src/ftest/ftest.h" 3 4
_Bool 
# 230 "./src/ftest/ftest.h"
expected_LT_TYPE_DOUBLE(double var1, double var2); 
# 230 "./src/ftest/ftest.h" 3 4
_Bool 
# 230 "./src/ftest/ftest.h"
expected_LT_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 231 "./src/ftest/ftest.h" 3 4
_Bool 
# 231 "./src/ftest/ftest.h"
expected_LT_TYPE_L_DOUBLE(long double var1, long double var2); 
# 231 "./src/ftest/ftest.h" 3 4
_Bool 
# 231 "./src/ftest/ftest.h"
expected_LT_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 232 "./src/ftest/ftest.h" 3 4
_Bool 
# 232 "./src/ftest/ftest.h"
expected_LT_TYPE_STRING(char* var1, char* var2); 
# 232 "./src/ftest/ftest.h" 3 4
_Bool 
# 232 "./src/ftest/ftest.h"
expected_LT_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 241 "./src/ftest/ftest.h"

# 241 "./src/ftest/ftest.h" 3 4
_Bool 
# 241 "./src/ftest/ftest.h"
expected_GT_TYPE_CHAR(char var1, char var2); 
# 241 "./src/ftest/ftest.h" 3 4
_Bool 
# 241 "./src/ftest/ftest.h"
expected_GT_name_TYPE_CHAR(char var1, char var2, const char *name);

# 242 "./src/ftest/ftest.h" 3 4
_Bool 
# 242 "./src/ftest/ftest.h"
expected_GT_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 242 "./src/ftest/ftest.h" 3 4
_Bool 
# 242 "./src/ftest/ftest.h"
expected_GT_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 243 "./src/ftest/ftest.h" 3 4
_Bool 
# 243 "./src/ftest/ftest.h"
expected_GT_TYPE_INT(int var1, int var2); 
# 243 "./src/ftest/ftest.h" 3 4
_Bool 
# 243 "./src/ftest/ftest.h"
expected_GT_name_TYPE_INT(int var1, int var2, const char *name);

# 244 "./src/ftest/ftest.h" 3 4
_Bool 
# 244 "./src/ftest/ftest.h"
expected_GT_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 244 "./src/ftest/ftest.h" 3 4
_Bool 
# 244 "./src/ftest/ftest.h"
expected_GT_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 245 "./src/ftest/ftest.h" 3 4
_Bool 
# 245 "./src/ftest/ftest.h"
expected_GT_TYPE_L_INT(long int var1, long int var2); 
# 245 "./src/ftest/ftest.h" 3 4
_Bool 
# 245 "./src/ftest/ftest.h"
expected_GT_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 246 "./src/ftest/ftest.h" 3 4
_Bool 
# 246 "./src/ftest/ftest.h"
expected_GT_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 246 "./src/ftest/ftest.h" 3 4
_Bool 
# 246 "./src/ftest/ftest.h"
expected_GT_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 247 "./src/ftest/ftest.h" 3 4
_Bool 
# 247 "./src/ftest/ftest.h"
expected_GT_TYPE_SIZE_T(size_t var1, size_t var2); 
# 247 "./src/ftest/ftest.h" 3 4
_Bool 
# 247 "./src/ftest/ftest.h"
expected_GT_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 248 "./src/ftest/ftest.h" 3 4
_Bool 
# 248 "./src/ftest/ftest.h"
expected_GT_TYPE_FLOAT(float var1, float var2); 
# 248 "./src/ftest/ftest.h" 3 4
_Bool 
# 248 "./src/ftest/ftest.h"
expected_GT_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 249 "./src/ftest/ftest.h" 3 4
_Bool 
# 249 "./src/ftest/ftest.h"
expected_GT_TYPE_DOUBLE(double var1, double var2); 
# 249 "./src/ftest/ftest.h" 3 4
_Bool 
# 249 "./src/ftest/ftest.h"
expected_GT_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 250 "./src/ftest/ftest.h" 3 4
_Bool 
# 250 "./src/ftest/ftest.h"
expected_GT_TYPE_L_DOUBLE(long double var1, long double var2); 
# 250 "./src/ftest/ftest.h" 3 4
_Bool 
# 250 "./src/ftest/ftest.h"
expected_GT_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 251 "./src/ftest/ftest.h" 3 4
_Bool 
# 251 "./src/ftest/ftest.h"
expected_GT_TYPE_STRING(char* var1, char* var2); 
# 251 "./src/ftest/ftest.h" 3 4
_Bool 
# 251 "./src/ftest/ftest.h"
expected_GT_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 260 "./src/ftest/ftest.h"

# 260 "./src/ftest/ftest.h" 3 4
_Bool 
# 260 "./src/ftest/ftest.h"
expected_LE_TYPE_CHAR(char var1, char var2); 
# 260 "./src/ftest/ftest.h" 3 4
_Bool 
# 260 "./src/ftest/ftest.h"
expected_LE_name_TYPE_CHAR(char var1, char var2, const char *name);

# 261 "./src/ftest/ftest.h" 3 4
_Bool 
# 261 "./src/ftest/ftest.h"
expected_LE_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 261 "./src/ftest/ftest.h" 3 4
_Bool 
# 261 "./src/ftest/ftest.h"
expected_LE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 262 "./src/ftest/ftest.h" 3 4
_Bool 
# 262 "./src/ftest/ftest.h"
expected_LE_TYPE_INT(int var1, int var2); 
# 262 "./src/ftest/ftest.h" 3 4
_Bool 
# 262 "./src/ftest/ftest.h"
expected_LE_name_TYPE_INT(int var1, int var2, const char *name);

# 263 "./src/ftest/ftest.h" 3 4
_Bool 
# 263 "./src/ftest/ftest.h"
expected_LE_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 263 "./src/ftest/ftest.h" 3 4
_Bool 
# 263 "./src/ftest/ftest.h"
expected_LE_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 264 "./src/ftest/ftest.h" 3 4
_Bool 
# 264 "./src/ftest/ftest.h"
expected_LE_TYPE_L_INT(long int var1, long int var2); 
# 264 "./src/ftest/ftest.h" 3 4
_Bool 
# 264 "./src/ftest/ftest.h"
expected_LE_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 265 "./src/ftest/ftest.h" 3 4
_Bool 
# 265 "./src/ftest/ftest.h"
expected_LE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 265 "./src/ftest/ftest.h" 3 4
_Bool 
# 265 "./src/ftest/ftest.h"
expected_LE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 266 "./src/ftest/ftest.h" 3 4
_Bool 
# 266 "./src/ftest/ftest.h"
expected_LE_TYPE_SIZE_T(size_t var1, size_t var2); 
# 266 "./src/ftest/ftest.h" 3 4
_Bool 
# 266 "./src/ftest/ftest.h"
expected_LE_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 267 "./src/ftest/ftest.h" 3 4
_Bool 
# 267 "./src/ftest/ftest.h"
expected_LE_TYPE_FLOAT(float var1, float var2); 
# 267 "./src/ftest/ftest.h" 3 4
_Bool 
# 267 "./src/ftest/ftest.h"
expected_LE_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 268 "./src/ftest/ftest.h" 3 4
_Bool 
# 268 "./src/ftest/ftest.h"
expected_LE_TYPE_DOUBLE(double var1, double var2); 
# 268 "./src/ftest/ftest.h" 3 4
_Bool 
# 268 "./src/ftest/ftest.h"
expected_LE_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 269 "./src/ftest/ftest.h" 3 4
_Bool 
# 269 "./src/ftest/ftest.h"
expected_LE_TYPE_L_DOUBLE(long double var1, long double var2); 
# 269 "./src/ftest/ftest.h" 3 4
_Bool 
# 269 "./src/ftest/ftest.h"
expected_LE_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 270 "./src/ftest/ftest.h" 3 4
_Bool 
# 270 "./src/ftest/ftest.h"
expected_LE_TYPE_STRING(char* var1, char* var2); 
# 270 "./src/ftest/ftest.h" 3 4
_Bool 
# 270 "./src/ftest/ftest.h"
expected_LE_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 279 "./src/ftest/ftest.h"

# 279 "./src/ftest/ftest.h" 3 4
_Bool 
# 279 "./src/ftest/ftest.h"
expected_GE_TYPE_CHAR(char var1, char var2); 
# 279 "./src/ftest/ftest.h" 3 4
_Bool 
# 279 "./src/ftest/ftest.h"
expected_GE_name_TYPE_CHAR(char var1, char var2, const char *name);

# 280 "./src/ftest/ftest.h" 3 4
_Bool 
# 280 "./src/ftest/ftest.h"
expected_GE_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 280 "./src/ftest/ftest.h" 3 4
_Bool 
# 280 "./src/ftest/ftest.h"
expected_GE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 281 "./src/ftest/ftest.h" 3 4
_Bool 
# 281 "./src/ftest/ftest.h"
expected_GE_TYPE_INT(int var1, int var2); 
# 281 "./src/ftest/ftest.h" 3 4
_Bool 
# 281 "./src/ftest/ftest.h"
expected_GE_name_TYPE_INT(int var1, int var2, const char *name);

# 282 "./src/ftest/ftest.h" 3 4
_Bool 
# 282 "./src/ftest/ftest.h"
expected_GE_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 282 "./src/ftest/ftest.h" 3 4
_Bool 
# 282 "./src/ftest/ftest.h"
expected_GE_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 283 "./src/ftest/ftest.h" 3 4
_Bool 
# 283 "./src/ftest/ftest.h"
expected_GE_TYPE_L_INT(long int var1, long int var2); 
# 283 "./src/ftest/ftest.h" 3 4
_Bool 
# 283 "./src/ftest/ftest.h"
expected_GE_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 284 "./src/ftest/ftest.h" 3 4
_Bool 
# 284 "./src/ftest/ftest.h"
expected_GE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 284 "./src/ftest/ftest.h" 3 4
_Bool 
# 284 "./src/ftest/ftest.h"
expected_GE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 285 "./src/ftest/ftest.h" 3 4
_Bool 
# 285 "./src/ftest/ftest.h"
expected_GE_TYPE_SIZE_T(size_t var1, size_t var2); 
# 285 "./src/ftest/ftest.h" 3 4
_Bool 
# 285 "./src/ftest/ftest.h"
expected_GE_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 286 "./src/ftest/ftest.h" 3 4
_Bool 
# 286 "./src/ftest/ftest.h"
expected_GE_TYPE_FLOAT(float var1, float var2); 
# 286 "./src/ftest/ftest.h" 3 4
_Bool 
# 286 "./src/ftest/ftest.h"
expected_GE_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 287 "./src/ftest/ftest.h" 3 4
_Bool 
# 287 "./src/ftest/ftest.h"
expected_GE_TYPE_DOUBLE(double var1, double var2); 
# 287 "./src/ftest/ftest.h" 3 4
_Bool 
# 287 "./src/ftest/ftest.h"
expected_GE_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 288 "./src/ftest/ftest.h" 3 4
_Bool 
# 288 "./src/ftest/ftest.h"
expected_GE_TYPE_L_DOUBLE(long double var1, long double var2); 
# 288 "./src/ftest/ftest.h" 3 4
_Bool 
# 288 "./src/ftest/ftest.h"
expected_GE_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 289 "./src/ftest/ftest.h" 3 4
_Bool 
# 289 "./src/ftest/ftest.h"
expected_GE_TYPE_STRING(char* var1, char* var2); 
# 289 "./src/ftest/ftest.h" 3 4
_Bool 
# 289 "./src/ftest/ftest.h"
expected_GE_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 298 "./src/ftest/ftest.h"

# 298 "./src/ftest/ftest.h" 3 4
_Bool 
# 298 "./src/ftest/ftest.h"
expected_NE_TYPE_CHAR(char var1, char var2); 
# 298 "./src/ftest/ftest.h" 3 4
_Bool 
# 298 "./src/ftest/ftest.h"
expected_NE_name_TYPE_CHAR(char var1, char var2, const char *name);

# 299 "./src/ftest/ftest.h" 3 4
_Bool 
# 299 "./src/ftest/ftest.h"
expected_NE_TYPE_U_CHAR(unsigned char var1, unsigned char var2); 
# 299 "./src/ftest/ftest.h" 3 4
_Bool 
# 299 "./src/ftest/ftest.h"
expected_NE_name_TYPE_U_CHAR(unsigned char var1, unsigned char var2, const char *name);

# 300 "./src/ftest/ftest.h" 3 4
_Bool 
# 300 "./src/ftest/ftest.h"
expected_NE_TYPE_INT(int var1, int var2); 
# 300 "./src/ftest/ftest.h" 3 4
_Bool 
# 300 "./src/ftest/ftest.h"
expected_NE_name_TYPE_INT(int var1, int var2, const char *name);

# 301 "./src/ftest/ftest.h" 3 4
_Bool 
# 301 "./src/ftest/ftest.h"
expected_NE_TYPE_U_INT(unsigned int var1, unsigned int var2); 
# 301 "./src/ftest/ftest.h" 3 4
_Bool 
# 301 "./src/ftest/ftest.h"
expected_NE_name_TYPE_U_INT(unsigned int var1, unsigned int var2, const char *name);

# 302 "./src/ftest/ftest.h" 3 4
_Bool 
# 302 "./src/ftest/ftest.h"
expected_NE_TYPE_L_INT(long int var1, long int var2); 
# 302 "./src/ftest/ftest.h" 3 4
_Bool 
# 302 "./src/ftest/ftest.h"
expected_NE_name_TYPE_L_INT(long int var1, long int var2, const char *name);

# 303 "./src/ftest/ftest.h" 3 4
_Bool 
# 303 "./src/ftest/ftest.h"
expected_NE_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2); 
# 303 "./src/ftest/ftest.h" 3 4
_Bool 
# 303 "./src/ftest/ftest.h"
expected_NE_name_TYPE_U_L_INT(unsigned long int var1, unsigned long int var2, const char *name);

# 304 "./src/ftest/ftest.h" 3 4
_Bool 
# 304 "./src/ftest/ftest.h"
expected_NE_TYPE_SIZE_T(size_t var1, size_t var2); 
# 304 "./src/ftest/ftest.h" 3 4
_Bool 
# 304 "./src/ftest/ftest.h"
expected_NE_name_TYPE_SIZE_T(size_t var1, size_t var2, const char *name);

# 305 "./src/ftest/ftest.h" 3 4
_Bool 
# 305 "./src/ftest/ftest.h"
expected_NE_TYPE_FLOAT(float var1, float var2); 
# 305 "./src/ftest/ftest.h" 3 4
_Bool 
# 305 "./src/ftest/ftest.h"
expected_NE_name_TYPE_FLOAT(float var1, float var2, const char *name);

# 306 "./src/ftest/ftest.h" 3 4
_Bool 
# 306 "./src/ftest/ftest.h"
expected_NE_TYPE_DOUBLE(double var1, double var2); 
# 306 "./src/ftest/ftest.h" 3 4
_Bool 
# 306 "./src/ftest/ftest.h"
expected_NE_name_TYPE_DOUBLE(double var1, double var2, const char *name);

# 307 "./src/ftest/ftest.h" 3 4
_Bool 
# 307 "./src/ftest/ftest.h"
expected_NE_TYPE_L_DOUBLE(long double var1, long double var2); 
# 307 "./src/ftest/ftest.h" 3 4
_Bool 
# 307 "./src/ftest/ftest.h"
expected_NE_name_TYPE_L_DOUBLE(long double var1, long double var2, const char *name);

# 308 "./src/ftest/ftest.h" 3 4
_Bool 
# 308 "./src/ftest/ftest.h"
expected_NE_TYPE_STRING(char* var1, char* var2); 
# 308 "./src/ftest/ftest.h" 3 4
_Bool 
# 308 "./src/ftest/ftest.h"
expected_NE_name_TYPE_STRING(char* var1, char* var2, const char *name);
# 5 "./src/fmock/fmock.h" 2






struct func_mock_info_struct{
  long id;
  char *str_namefunc;
  char *str_conditions;
  int expect_call;
  long init_times_left;
  long times_left;
  struct func_mock_info_struct *next;
};

int parse_count_args_(char *input);
void append_fmock_to_global(struct func_mock_info_struct **f_mock_global, struct func_mock_info_struct *f_mock);
# 2 "src/fmock/fmock.c" 2





int parse_count_args_(char *input){
  int val=0;
  for(int i = 0; i< strlen(input); ++i){
    if(input[i]==',') ++val;
  }
  return val+1;
}

struct func_mock_info_struct *global_f_mock;

void append_fmock_to_global(struct func_mock_info_struct **f_mock_global, struct func_mock_info_struct *f_mock){
  if(*f_mock_global){
    struct func_mock_info_struct *tmp_fmock_info = *f_mock_global;
    while(tmp_fmock_info->next) tmp_fmock_info = tmp_fmock_info->next;
    tmp_fmock_info->next = f_mock;
  }
  else{

    *f_mock_global = f_mock;
  }

}
# 0 "src/tools_t/tools_t.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "src/tools_t/tools_t.c"
# 1 "./src/tools_t/tools_t.h" 1



# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 52 "/usr/include/stdio.h" 3 4
typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 77 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 178 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 205 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 293 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 308 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 403 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 431 "/usr/include/stdio.h" 2 3 4



extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 786 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));
# 867 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4

# 5 "./src/tools_t/tools_t.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 144 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 654 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 828 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 848 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1013 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4

# 6 "./src/tools_t/tools_t.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 173 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 407 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 458 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
# 489 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 539 "/usr/include/string.h" 3 4

# 7 "./src/tools_t/tools_t.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdbool.h" 1 3 4
# 8 "./src/tools_t/tools_t.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 116 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 132 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 440 "/usr/include/time.h" 3 4

# 9 "./src/tools_t/tools_t.h" 2
# 40 "./src/tools_t/tools_t.h"

# 40 "./src/tools_t/tools_t.h"
void gotoxy(int x, int y);
# 95 "./src/tools_t/tools_t.h"
int COMPARE_N_TYPE_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_CHAR(char* dst, const char* src, size_t size); char MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); char MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); char* TYPE_CHAR_TO_STR(char var);
int COMPARE_N_TYPE_U_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_U_CHAR(unsigned char* dst, const unsigned char* src, size_t size); unsigned char MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); unsigned char MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); char* TYPE_U_CHAR_TO_STR(unsigned char var);
int COMPARE_N_TYPE_INT(const void *,const void*); void COPY_ARRAY_TYPE_INT(int* dst, const int* src, size_t size); int MAX_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_INT(const int *array, size_t size); int MIN_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_INT(const int *array, size_t size); char* TYPE_INT_TO_STR(int var);
int COMPARE_N_TYPE_U_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_INT(unsigned int* dst, const unsigned int* src, size_t size); unsigned int MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); unsigned int MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); char* TYPE_U_INT_TO_STR(unsigned int var);
int COMPARE_N_TYPE_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_L_INT(long int* dst, const long int* src, size_t size); long int MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); long int MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); char* TYPE_L_INT_TO_STR(long int var);
int COMPARE_N_TYPE_U_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_L_INT(unsigned long int* dst, const unsigned long int* src, size_t size); unsigned long int MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); unsigned long int MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); char* TYPE_U_L_INT_TO_STR(unsigned long int var);
int COMPARE_N_TYPE_SIZE_T(const void *,const void*); void COPY_ARRAY_TYPE_SIZE_T(size_t* dst, const size_t* src, size_t size); size_t MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); char* TYPE_SIZE_T_TO_STR(size_t var);
int COMPARE_N_TYPE_FLOAT(const void *,const void*); void COPY_ARRAY_TYPE_FLOAT(float* dst, const float* src, size_t size); float MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); float MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); char* TYPE_FLOAT_TO_STR(float var);
int COMPARE_N_TYPE_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_DOUBLE(double* dst, const double* src, size_t size); double MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); double MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); char* TYPE_DOUBLE_TO_STR(double var);
int COMPARE_N_TYPE_L_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_L_DOUBLE(long double* dst, const long double* src, size_t size); long double MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); long double MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); char* TYPE_L_DOUBLE_TO_STR(long double var);
int COMPARE_N_TYPE_STRING(const void *,const void*); void COPY_ARRAY_TYPE_STRING(char** dst, const char** src, size_t size); char* MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); char* MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); char* TYPE_STRING_TO_STR(char* var);





double diff_timespec_seconds(struct timespec time_stop, struct timespec time_start);

double diff_timespec_milliseconds(struct timespec time_stop, struct timespec time_start);

long diff_timespec_nanoseconds(struct timespec time_stop, struct timespec time_start);
# 2 "src/tools_t/tools_t.c" 2


void gotoxy(int x, int y)
{
    printf("%c[%d;%df", 0x1B, y, x);
}
# 55 "src/tools_t/tools_t.c"
char* TYPE_CHAR_TO_STR(char var){ char *ret = malloc(2); sprintf(ret,"%c",var); ret[strlen(ret)]='\0'; return ret; }
char* TYPE_U_CHAR_TO_STR(unsigned char var){ char *ret = malloc(2); sprintf(ret,"%c",var); ret[strlen(ret)]='\0'; return ret; }
char* TYPE_INT_TO_STR(int var){ char *ret = malloc(22); sprintf(ret,"%d",var); ret[strlen(ret)]='\0'; return ret; }
char* TYPE_U_INT_TO_STR(unsigned int var){ char *ret = malloc(22); sprintf(ret,"%u",var); ret[strlen(ret)]='\0'; return ret; }
char* TYPE_L_INT_TO_STR(long int var){ char *ret = malloc(22); sprintf(ret,"%ld",var); ret[strlen(ret)]='\0'; return ret; }
char* TYPE_U_L_INT_TO_STR(unsigned long int var){ char *ret = malloc(22); sprintf(ret,"%lu",var); ret[strlen(ret)]='\0'; return ret; }
char* TYPE_SIZE_T_TO_STR(size_t var){ char *ret = malloc(22); sprintf(ret,"%lu",var); ret[strlen(ret)]='\0'; return ret; }
char* TYPE_FLOAT_TO_STR(float var){ char *ret = malloc(128); sprintf(ret,"%.10f",var); ret[strlen(ret)]='\0'; return ret; }
char* TYPE_DOUBLE_TO_STR(double var){ char *ret = malloc(256); sprintf(ret,"%.30lf",var); ret[strlen(ret)]='\0'; return ret; }
char* TYPE_L_DOUBLE_TO_STR(long double var){ char *ret = malloc(256); sprintf(ret,"%.30Lf",var); ret[strlen(ret)]='\0'; return ret; }

char* TYPE_STRING_TO_STR(char* var){
  return var;
}
# 102 "src/tools_t/tools_t.c"
int
COMPARE_N_TYPE_STRING(const void *a,const void* b)
{
  do { if (0) fprintf(
# 105 "src/tools_t/tools_t.c" 3 4
 stderr
# 105 "src/tools_t/tools_t.c"
 , "%s:%d:%s(): " "a=%s, b=%s\n", "src/tools_t/tools_t.c", 105, __func__, (char*)a, (char*)b); } while (0);
  return strcmp(( char*)a,( char*)b);
}

void COPY_ARRAY_TYPE_STRING(char** dst, const char** src, size_t size)
{
  for(size_t i = 0; i < size; ++i) strcpy(dst[i],src[i]);
}


int COMPARE_N_TYPE_CHAR(const void *a, const void *b){ char diff = (*(char*)a - *(char*)b)*1; do { if (0) fprintf(
# 115 "src/tools_t/tools_t.c" 3 4
stderr
# 115 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 115, __func__, TYPE_CHAR_TO_STR(diff),TYPE_CHAR_TO_STR(*(char*)a), TYPE_CHAR_TO_STR(*(char*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_CHAR(char *dst, const char *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
int COMPARE_N_TYPE_U_CHAR(const void *a, const void *b){ unsigned char diff = (*(unsigned char*)a - *(unsigned char*)b)*1; do { if (0) fprintf(
# 116 "src/tools_t/tools_t.c" 3 4
stderr
# 116 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 116, __func__, TYPE_U_CHAR_TO_STR(diff),TYPE_U_CHAR_TO_STR(*(unsigned char*)a), TYPE_U_CHAR_TO_STR(*(unsigned char*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_U_CHAR(unsigned char *dst, const unsigned char *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
int COMPARE_N_TYPE_INT(const void *a, const void *b){ int diff = (*(int*)a - *(int*)b)*1; do { if (0) fprintf(
# 117 "src/tools_t/tools_t.c" 3 4
stderr
# 117 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 117, __func__, TYPE_INT_TO_STR(diff),TYPE_INT_TO_STR(*(int*)a), TYPE_INT_TO_STR(*(int*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_INT(int *dst, const int *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
int COMPARE_N_TYPE_U_INT(const void *a, const void *b){ unsigned int diff = (*(unsigned int*)a - *(unsigned int*)b)*1; do { if (0) fprintf(
# 118 "src/tools_t/tools_t.c" 3 4
stderr
# 118 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 118, __func__, TYPE_U_INT_TO_STR(diff),TYPE_U_INT_TO_STR(*(unsigned int*)a), TYPE_U_INT_TO_STR(*(unsigned int*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_U_INT(unsigned int *dst, const unsigned int *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
int COMPARE_N_TYPE_L_INT(const void *a, const void *b){ long int diff = (*(long int*)a - *(long int*)b)*1; do { if (0) fprintf(
# 119 "src/tools_t/tools_t.c" 3 4
stderr
# 119 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 119, __func__, TYPE_L_INT_TO_STR(diff),TYPE_L_INT_TO_STR(*(long int*)a), TYPE_L_INT_TO_STR(*(long int*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_L_INT(long int *dst, const long int *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
int COMPARE_N_TYPE_U_L_INT(const void *a, const void *b){ unsigned long int diff = (*(unsigned long int*)a - *(unsigned long int*)b)*1; do { if (0) fprintf(
# 120 "src/tools_t/tools_t.c" 3 4
stderr
# 120 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 120, __func__, TYPE_U_L_INT_TO_STR(diff),TYPE_U_L_INT_TO_STR(*(unsigned long int*)a), TYPE_U_L_INT_TO_STR(*(unsigned long int*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_U_L_INT(unsigned long int *dst, const unsigned long int *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
int COMPARE_N_TYPE_SIZE_T(const void *a, const void *b){ size_t diff = (*(size_t*)a - *(size_t*)b)*1; do { if (0) fprintf(
# 121 "src/tools_t/tools_t.c" 3 4
stderr
# 121 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 121, __func__, TYPE_SIZE_T_TO_STR(diff),TYPE_SIZE_T_TO_STR(*(size_t*)a), TYPE_SIZE_T_TO_STR(*(size_t*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_SIZE_T(size_t *dst, const size_t *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
int COMPARE_N_TYPE_FLOAT(const void *a, const void *b){ float diff = (*(float*)a - *(float*)b)*100000000; do { if (0) fprintf(
# 122 "src/tools_t/tools_t.c" 3 4
stderr
# 122 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 122, __func__, TYPE_FLOAT_TO_STR(diff),TYPE_FLOAT_TO_STR(*(float*)a), TYPE_FLOAT_TO_STR(*(float*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_FLOAT(float *dst, const float *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
int COMPARE_N_TYPE_DOUBLE(const void *a, const void *b){ double diff = (*(double*)a - *(double*)b)*100000000000; do { if (0) fprintf(
# 123 "src/tools_t/tools_t.c" 3 4
stderr
# 123 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 123, __func__, TYPE_DOUBLE_TO_STR(diff),TYPE_DOUBLE_TO_STR(*(double*)a), TYPE_DOUBLE_TO_STR(*(double*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_DOUBLE(double *dst, const double *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
int COMPARE_N_TYPE_L_DOUBLE(const void *a, const void *b){ long double diff = (*(long double*)a - *(long double*)b)*100000000000000; do { if (0) fprintf(
# 124 "src/tools_t/tools_t.c" 3 4
stderr
# 124 "src/tools_t/tools_t.c"
, "%s:%d:%s(): " " diff = %s a=%s b=%s \n", "src/tools_t/tools_t.c", 124, __func__, TYPE_L_DOUBLE_TO_STR(diff),TYPE_L_DOUBLE_TO_STR(*(long double*)a), TYPE_L_DOUBLE_TO_STR(*(long double*)b)); } while (0); if ((diff < 1) && (diff > -1) ) return 0; return diff; } void COPY_ARRAY_TYPE_L_DOUBLE(long double *dst, const long double *src, size_t size){ for(size_t i = 0; i < size; ++i) dst[i]=src[i]; }
# 157 "src/tools_t/tools_t.c"
char MAX_ARRAY_TYPE_CHAR(const char *array, size_t size){ if(array == 
# 157 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 157 "src/tools_t/tools_t.c"
) return 0; char mx =(char)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_CHAR(&mx,&array[i]) < 0) mx =(char)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_CHAR(const char *array, size_t size){ if(array == 
# 157 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 157 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_CHAR(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} char MIN_ARRAY_TYPE_CHAR(const char *array, size_t size){ if(array == 
# 157 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 157 "src/tools_t/tools_t.c"
) return 0; char mn =(char)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_CHAR(&mn,&array[i]) > 0) mn =(char)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_CHAR(const char *array, size_t size){ if(array == 
# 157 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 157 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_CHAR(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
unsigned char MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size){ if(array == 
# 158 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 158 "src/tools_t/tools_t.c"
) return 0; unsigned char mx =(unsigned char)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_CHAR(&mx,&array[i]) < 0) mx =(unsigned char)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size){ if(array == 
# 158 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 158 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_CHAR(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} unsigned char MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size){ if(array == 
# 158 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 158 "src/tools_t/tools_t.c"
) return 0; unsigned char mn =(unsigned char)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_CHAR(&mn,&array[i]) > 0) mn =(unsigned char)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size){ if(array == 
# 158 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 158 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_CHAR(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
int MAX_ARRAY_TYPE_INT(const int *array, size_t size){ if(array == 
# 159 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 159 "src/tools_t/tools_t.c"
) return 0; int mx =(int)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_INT(&mx,&array[i]) < 0) mx =(int)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_INT(const int *array, size_t size){ if(array == 
# 159 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 159 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_INT(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} int MIN_ARRAY_TYPE_INT(const int *array, size_t size){ if(array == 
# 159 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 159 "src/tools_t/tools_t.c"
) return 0; int mn =(int)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_INT(&mn,&array[i]) > 0) mn =(int)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_INT(const int *array, size_t size){ if(array == 
# 159 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 159 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_INT(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
unsigned int MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size){ if(array == 
# 160 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 160 "src/tools_t/tools_t.c"
) return 0; unsigned int mx =(unsigned int)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_INT(&mx,&array[i]) < 0) mx =(unsigned int)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size){ if(array == 
# 160 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 160 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_INT(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} unsigned int MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size){ if(array == 
# 160 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 160 "src/tools_t/tools_t.c"
) return 0; unsigned int mn =(unsigned int)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_INT(&mn,&array[i]) > 0) mn =(unsigned int)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size){ if(array == 
# 160 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 160 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_INT(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
long int MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size){ if(array == 
# 161 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 161 "src/tools_t/tools_t.c"
) return 0; long int mx =(long int)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_L_INT(&mx,&array[i]) < 0) mx =(long int)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size){ if(array == 
# 161 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 161 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_L_INT(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} long int MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size){ if(array == 
# 161 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 161 "src/tools_t/tools_t.c"
) return 0; long int mn =(long int)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_L_INT(&mn,&array[i]) > 0) mn =(long int)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size){ if(array == 
# 161 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 161 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_L_INT(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
unsigned long int MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size){ if(array == 
# 162 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 162 "src/tools_t/tools_t.c"
) return 0; unsigned long int mx =(unsigned long int)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_L_INT(&mx,&array[i]) < 0) mx =(unsigned long int)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size){ if(array == 
# 162 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 162 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_L_INT(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} unsigned long int MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size){ if(array == 
# 162 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 162 "src/tools_t/tools_t.c"
) return 0; unsigned long int mn =(unsigned long int)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_L_INT(&mn,&array[i]) > 0) mn =(unsigned long int)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size){ if(array == 
# 162 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 162 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_U_L_INT(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
size_t MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size){ if(array == 
# 163 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 163 "src/tools_t/tools_t.c"
) return 0; size_t mx =(size_t)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_SIZE_T(&mx,&array[i]) < 0) mx =(size_t)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size){ if(array == 
# 163 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 163 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_SIZE_T(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} size_t MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size){ if(array == 
# 163 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 163 "src/tools_t/tools_t.c"
) return 0; size_t mn =(size_t)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_SIZE_T(&mn,&array[i]) > 0) mn =(size_t)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size){ if(array == 
# 163 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 163 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_SIZE_T(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
float MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size){ if(array == 
# 164 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 164 "src/tools_t/tools_t.c"
) return 0; float mx =(float)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_FLOAT(&mx,&array[i]) < 0) mx =(float)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size){ if(array == 
# 164 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 164 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_FLOAT(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} float MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size){ if(array == 
# 164 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 164 "src/tools_t/tools_t.c"
) return 0; float mn =(float)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_FLOAT(&mn,&array[i]) > 0) mn =(float)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size){ if(array == 
# 164 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 164 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_FLOAT(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
double MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size){ if(array == 
# 165 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 165 "src/tools_t/tools_t.c"
) return 0; double mx =(double)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_DOUBLE(&mx,&array[i]) < 0) mx =(double)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size){ if(array == 
# 165 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 165 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_DOUBLE(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} double MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size){ if(array == 
# 165 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 165 "src/tools_t/tools_t.c"
) return 0; double mn =(double)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_DOUBLE(&mn,&array[i]) > 0) mn =(double)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size){ if(array == 
# 165 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 165 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_DOUBLE(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
long double MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size){ if(array == 
# 166 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 166 "src/tools_t/tools_t.c"
) return 0; long double mx =(long double)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_L_DOUBLE(&mx,&array[i]) < 0) mx =(long double)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size){ if(array == 
# 166 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 166 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_L_DOUBLE(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} long double MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size){ if(array == 
# 166 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 166 "src/tools_t/tools_t.c"
) return 0; long double mn =(long double)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_L_DOUBLE(&mn,&array[i]) > 0) mn =(long double)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size){ if(array == 
# 166 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 166 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_L_DOUBLE(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}
char* MAX_ARRAY_TYPE_STRING(const char* *array, size_t size){ if(array == 
# 167 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 167 "src/tools_t/tools_t.c"
) return 0; char* mx =(char*)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_STRING(&mx,&array[i]) < 0) mx =(char*)array[i]; return mx;} size_t ARG_MAX_ARRAY_TYPE_STRING(const char* *array, size_t size){ if(array == 
# 167 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 167 "src/tools_t/tools_t.c"
) return 0; size_t i_mx = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_STRING(&array[i_mx],&array[i]) < 0) i_mx = i; return i_mx;} char* MIN_ARRAY_TYPE_STRING(const char* *array, size_t size){ if(array == 
# 167 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 167 "src/tools_t/tools_t.c"
) return 0; char* mn =(char*)array[0]; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_STRING(&mn,&array[i]) > 0) mn =(char*)array[i]; return mn;} size_t ARG_MIN_ARRAY_TYPE_STRING(const char* *array, size_t size){ if(array == 
# 167 "src/tools_t/tools_t.c" 3 4
((void *)0)
# 167 "src/tools_t/tools_t.c"
) return 0; size_t i_mn = 0; for(size_t i = 0; i < size; ++i) if(COMPARE_N_TYPE_STRING(&array[i_mn],&array[i]) > 0) i_mn = i; return i_mn;}






double diff_timespec_seconds(struct timespec time_stop, struct timespec time_start){

  return (time_stop.tv_sec - time_start.tv_sec) + 1.0e-9 * (time_stop.tv_nsec - time_start.tv_nsec);
}

double diff_timespec_milliseconds(struct timespec time_stop, struct timespec time_start){

  return 1.0e3 * (time_stop.tv_sec - time_start.tv_sec) + 1.0e-6 * (time_stop.tv_nsec - time_start.tv_nsec);
}

long diff_timespec_nanoseconds(struct timespec time_stop, struct timespec time_start){

  return 1.0e9 * (time_stop.tv_sec - time_start.tv_sec) + (time_stop.tv_nsec - time_start.tv_nsec);
}
# 0 "src/permutation_t/permutation_t.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "src/permutation_t/permutation_t.c"
# 1 "./src/permutation_t/permutation_t.h" 1



# 1 "./src/tools_t/tools_t.h" 1



# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 52 "/usr/include/stdio.h" 3 4
typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 77 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 178 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 205 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 293 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 308 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 403 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));





# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 431 "/usr/include/stdio.h" 2 3 4



extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 786 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));
# 867 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4

# 5 "./src/tools_t/tools_t.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 59 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 144 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 654 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 828 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 848 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1013 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4

# 6 "./src/tools_t/tools_t.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 173 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 407 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 458 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
# 489 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 539 "/usr/include/string.h" 3 4

# 7 "./src/tools_t/tools_t.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdbool.h" 1 3 4
# 8 "./src/tools_t/tools_t.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 116 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 132 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 440 "/usr/include/time.h" 3 4

# 9 "./src/tools_t/tools_t.h" 2
# 40 "./src/tools_t/tools_t.h"

# 40 "./src/tools_t/tools_t.h"
void gotoxy(int x, int y);
# 95 "./src/tools_t/tools_t.h"
int COMPARE_N_TYPE_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_CHAR(char* dst, const char* src, size_t size); char MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); char MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); char* TYPE_CHAR_TO_STR(char var);
int COMPARE_N_TYPE_U_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_U_CHAR(unsigned char* dst, const unsigned char* src, size_t size); unsigned char MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); unsigned char MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); char* TYPE_U_CHAR_TO_STR(unsigned char var);
int COMPARE_N_TYPE_INT(const void *,const void*); void COPY_ARRAY_TYPE_INT(int* dst, const int* src, size_t size); int MAX_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_INT(const int *array, size_t size); int MIN_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_INT(const int *array, size_t size); char* TYPE_INT_TO_STR(int var);
int COMPARE_N_TYPE_U_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_INT(unsigned int* dst, const unsigned int* src, size_t size); unsigned int MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); unsigned int MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); char* TYPE_U_INT_TO_STR(unsigned int var);
int COMPARE_N_TYPE_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_L_INT(long int* dst, const long int* src, size_t size); long int MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); long int MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); char* TYPE_L_INT_TO_STR(long int var);
int COMPARE_N_TYPE_U_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_L_INT(unsigned long int* dst, const unsigned long int* src, size_t size); unsigned long int MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); unsigned long int MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); char* TYPE_U_L_INT_TO_STR(unsigned long int var);
int COMPARE_N_TYPE_SIZE_T(const void *,const void*); void COPY_ARRAY_TYPE_SIZE_T(size_t* dst, const size_t* src, size_t size); size_t MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); char* TYPE_SIZE_T_TO_STR(size_t var);
int COMPARE_N_TYPE_FLOAT(const void *,const void*); void COPY_ARRAY_TYPE_FLOAT(float* dst, const float* src, size_t size); float MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); float MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); char* TYPE_FLOAT_TO_STR(float var);
int COMPARE_N_TYPE_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_DOUBLE(double* dst, const double* src, size_t size); double MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); double MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); char* TYPE_DOUBLE_TO_STR(double var);
int COMPARE_N_TYPE_L_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_L_DOUBLE(long double* dst, const long double* src, size_t size); long double MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); long double MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); char* TYPE_L_DOUBLE_TO_STR(long double var);
int COMPARE_N_TYPE_STRING(const void *,const void*); void COPY_ARRAY_TYPE_STRING(char** dst, const char** src, size_t size); char* MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); char* MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); char* TYPE_STRING_TO_STR(char* var);





double diff_timespec_seconds(struct timespec time_stop, struct timespec time_start);

double diff_timespec_milliseconds(struct timespec time_stop, struct timespec time_start);

long diff_timespec_nanoseconds(struct timespec time_stop, struct timespec time_start);
# 5 "./src/permutation_t/permutation_t.h" 2
# 1 "./src/set_theoric_t/set_theoric_t.h" 1
# 17 "./src/set_theoric_t/set_theoric_t.h"
struct SET_THEORIC_TYPE_U_CHAR{ unsigned char id; unsigned char *set; }; typedef struct SET_THEORIC_TYPE_U_CHAR SET_THEORIC_TYPE_U_CHAR; SET_THEORIC_TYPE_U_CHAR * CREATE_SET_THEORIC_TYPE_U_CHAR(size_t id ); 
# 17 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 17 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_U_CHAR(SET_THEORIC_TYPE_U_CHAR *st);
struct SET_THEORIC_TYPE_U_INT{ unsigned int id; unsigned int *set; }; typedef struct SET_THEORIC_TYPE_U_INT SET_THEORIC_TYPE_U_INT; SET_THEORIC_TYPE_U_INT * CREATE_SET_THEORIC_TYPE_U_INT(size_t id ); 
# 18 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 18 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_U_INT(SET_THEORIC_TYPE_U_INT *st);
struct SET_THEORIC_TYPE_U_L_INT{ unsigned long int id; unsigned long int *set; }; typedef struct SET_THEORIC_TYPE_U_L_INT SET_THEORIC_TYPE_U_L_INT; SET_THEORIC_TYPE_U_L_INT * CREATE_SET_THEORIC_TYPE_U_L_INT(size_t id ); 
# 19 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 19 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_U_L_INT(SET_THEORIC_TYPE_U_L_INT *st);
struct SET_THEORIC_TYPE_SIZE_T{ size_t id; size_t *set; }; typedef struct SET_THEORIC_TYPE_SIZE_T SET_THEORIC_TYPE_SIZE_T; SET_THEORIC_TYPE_SIZE_T * CREATE_SET_THEORIC_TYPE_SIZE_T(size_t id ); 
# 20 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 20 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_SIZE_T(SET_THEORIC_TYPE_SIZE_T *st);
# 6 "./src/permutation_t/permutation_t.h" 2
# 23 "./src/permutation_t/permutation_t.h"
struct PERMUTATION_TYPE_SIZE_T{ size_t size; size_t * perm; }; typedef struct PERMUTATION_TYPE_SIZE_T PERMUTATION_TYPE_SIZE_T; PERMUTATION_TYPE_SIZE_T * CREATE_PERMUTATION_TYPE_SIZE_T(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_SIZE_T(const PERMUTATION_TYPE_SIZE_T *p );
struct PERMUTATION_TYPE_CHAR{ size_t size; char * perm; }; typedef struct PERMUTATION_TYPE_CHAR PERMUTATION_TYPE_CHAR; PERMUTATION_TYPE_CHAR * CREATE_PERMUTATION_TYPE_CHAR(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_CHAR(const PERMUTATION_TYPE_CHAR *p );
struct PERMUTATION_TYPE_U_CHAR{ size_t size; unsigned char * perm; }; typedef struct PERMUTATION_TYPE_U_CHAR PERMUTATION_TYPE_U_CHAR; PERMUTATION_TYPE_U_CHAR * CREATE_PERMUTATION_TYPE_U_CHAR(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_CHAR(const PERMUTATION_TYPE_U_CHAR *p );
struct PERMUTATION_TYPE_INT{ size_t size; int * perm; }; typedef struct PERMUTATION_TYPE_INT PERMUTATION_TYPE_INT; PERMUTATION_TYPE_INT * CREATE_PERMUTATION_TYPE_INT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_INT(const PERMUTATION_TYPE_INT *p );
struct PERMUTATION_TYPE_U_INT{ size_t size; unsigned int * perm; }; typedef struct PERMUTATION_TYPE_U_INT PERMUTATION_TYPE_U_INT; PERMUTATION_TYPE_U_INT * CREATE_PERMUTATION_TYPE_U_INT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_INT(const PERMUTATION_TYPE_U_INT *p );
struct PERMUTATION_TYPE_L_INT{ size_t size; long int * perm; }; typedef struct PERMUTATION_TYPE_L_INT PERMUTATION_TYPE_L_INT; PERMUTATION_TYPE_L_INT * CREATE_PERMUTATION_TYPE_L_INT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_L_INT(const PERMUTATION_TYPE_L_INT *p );
struct PERMUTATION_TYPE_U_L_INT{ size_t size; unsigned long int * perm; }; typedef struct PERMUTATION_TYPE_U_L_INT PERMUTATION_TYPE_U_L_INT; PERMUTATION_TYPE_U_L_INT * CREATE_PERMUTATION_TYPE_U_L_INT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_L_INT(const PERMUTATION_TYPE_U_L_INT *p );
struct PERMUTATION_TYPE_FLOAT{ size_t size; float * perm; }; typedef struct PERMUTATION_TYPE_FLOAT PERMUTATION_TYPE_FLOAT; PERMUTATION_TYPE_FLOAT * CREATE_PERMUTATION_TYPE_FLOAT(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_FLOAT(const PERMUTATION_TYPE_FLOAT *p );
struct PERMUTATION_TYPE_DOUBLE{ size_t size; double * perm; }; typedef struct PERMUTATION_TYPE_DOUBLE PERMUTATION_TYPE_DOUBLE; PERMUTATION_TYPE_DOUBLE * CREATE_PERMUTATION_TYPE_DOUBLE(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_DOUBLE(const PERMUTATION_TYPE_DOUBLE *p );
struct PERMUTATION_TYPE_L_DOUBLE{ size_t size; long double * perm; }; typedef struct PERMUTATION_TYPE_L_DOUBLE PERMUTATION_TYPE_L_DOUBLE; PERMUTATION_TYPE_L_DOUBLE * CREATE_PERMUTATION_TYPE_L_DOUBLE(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_L_DOUBLE(const PERMUTATION_TYPE_L_DOUBLE *p );
struct PERMUTATION_TYPE_STRING{ size_t size; char* * perm; }; typedef struct PERMUTATION_TYPE_STRING PERMUTATION_TYPE_STRING; PERMUTATION_TYPE_STRING * CREATE_PERMUTATION_TYPE_STRING(size_t size);PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_STRING(const PERMUTATION_TYPE_STRING *p );





# 38 "./src/permutation_t/permutation_t.h" 3 4
_Bool 
# 38 "./src/permutation_t/permutation_t.h"
IS_PERMUTATION_SET_THEORIC_TYPE_U_CHAR(const PERMUTATION_TYPE_U_CHAR *p);

# 39 "./src/permutation_t/permutation_t.h" 3 4
_Bool 
# 39 "./src/permutation_t/permutation_t.h"
IS_PERMUTATION_SET_THEORIC_TYPE_U_INT(const PERMUTATION_TYPE_U_INT *p);

# 40 "./src/permutation_t/permutation_t.h" 3 4
_Bool 
# 40 "./src/permutation_t/permutation_t.h"
IS_PERMUTATION_SET_THEORIC_TYPE_U_L_INT(const PERMUTATION_TYPE_U_L_INT *p);

# 41 "./src/permutation_t/permutation_t.h" 3 4
_Bool 
# 41 "./src/permutation_t/permutation_t.h"
IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(const PERMUTATION_TYPE_SIZE_T *p);
# 2 "src/permutation_t/permutation_t.c" 2
# 19 "src/permutation_t/permutation_t.c"

# 19 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 19 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_SET_THEORIC_TYPE_U_CHAR(const PERMUTATION_TYPE_U_CHAR *p){ if(p == 
# 19 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 19 "src/permutation_t/permutation_t.c"
) return 
# 19 "src/permutation_t/permutation_t.c" 3 4
0
# 19 "src/permutation_t/permutation_t.c"
; size_t size = p->size; unsigned char j; size_t *count_array_i = calloc(size, sizeof(size_t)); if(count_array_i == 
# 19 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 19 "src/permutation_t/permutation_t.c"
){ printf("can't alloc count_array_i\n"); return 
# 19 "src/permutation_t/permutation_t.c" 3 4
0
# 19 "src/permutation_t/permutation_t.c"
;} for(size_t i = 0; i < size; ++i){ j = p->perm[i]; if((COMPARE_N_TYPE_U_CHAR(&j, (unsigned char*)&size) >= 0) || count_array_i[j]){ free(count_array_i); return 
# 19 "src/permutation_t/permutation_t.c" 3 4
0
# 19 "src/permutation_t/permutation_t.c"
; } ++count_array_i[j];} free(count_array_i); return 
# 19 "src/permutation_t/permutation_t.c" 3 4
1
# 19 "src/permutation_t/permutation_t.c"
; }

# 20 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 20 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_SET_THEORIC_TYPE_U_INT(const PERMUTATION_TYPE_U_INT *p){ if(p == 
# 20 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 20 "src/permutation_t/permutation_t.c"
) return 
# 20 "src/permutation_t/permutation_t.c" 3 4
0
# 20 "src/permutation_t/permutation_t.c"
; size_t size = p->size; unsigned int j; size_t *count_array_i = calloc(size, sizeof(size_t)); if(count_array_i == 
# 20 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 20 "src/permutation_t/permutation_t.c"
){ printf("can't alloc count_array_i\n"); return 
# 20 "src/permutation_t/permutation_t.c" 3 4
0
# 20 "src/permutation_t/permutation_t.c"
;} for(size_t i = 0; i < size; ++i){ j = p->perm[i]; if((COMPARE_N_TYPE_U_INT(&j, (unsigned int*)&size) >= 0) || count_array_i[j]){ free(count_array_i); return 
# 20 "src/permutation_t/permutation_t.c" 3 4
0
# 20 "src/permutation_t/permutation_t.c"
; } ++count_array_i[j];} free(count_array_i); return 
# 20 "src/permutation_t/permutation_t.c" 3 4
1
# 20 "src/permutation_t/permutation_t.c"
; }

# 21 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 21 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_SET_THEORIC_TYPE_U_L_INT(const PERMUTATION_TYPE_U_L_INT *p){ if(p == 
# 21 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 21 "src/permutation_t/permutation_t.c"
) return 
# 21 "src/permutation_t/permutation_t.c" 3 4
0
# 21 "src/permutation_t/permutation_t.c"
; size_t size = p->size; unsigned long int j; size_t *count_array_i = calloc(size, sizeof(size_t)); if(count_array_i == 
# 21 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 21 "src/permutation_t/permutation_t.c"
){ printf("can't alloc count_array_i\n"); return 
# 21 "src/permutation_t/permutation_t.c" 3 4
0
# 21 "src/permutation_t/permutation_t.c"
;} for(size_t i = 0; i < size; ++i){ j = p->perm[i]; if((COMPARE_N_TYPE_U_L_INT(&j, (unsigned long int*)&size) >= 0) || count_array_i[j]){ free(count_array_i); return 
# 21 "src/permutation_t/permutation_t.c" 3 4
0
# 21 "src/permutation_t/permutation_t.c"
; } ++count_array_i[j];} free(count_array_i); return 
# 21 "src/permutation_t/permutation_t.c" 3 4
1
# 21 "src/permutation_t/permutation_t.c"
; }

# 22 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 22 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(const PERMUTATION_TYPE_SIZE_T *p){ if(p == 
# 22 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 22 "src/permutation_t/permutation_t.c"
) return 
# 22 "src/permutation_t/permutation_t.c" 3 4
0
# 22 "src/permutation_t/permutation_t.c"
; size_t size = p->size; size_t j; size_t *count_array_i = calloc(size, sizeof(size_t)); if(count_array_i == 
# 22 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 22 "src/permutation_t/permutation_t.c"
){ printf("can't alloc count_array_i\n"); return 
# 22 "src/permutation_t/permutation_t.c" 3 4
0
# 22 "src/permutation_t/permutation_t.c"
;} for(size_t i = 0; i < size; ++i){ j = p->perm[i]; if((COMPARE_N_TYPE_SIZE_T(&j, (size_t*)&size) >= 0) || count_array_i[j]){ free(count_array_i); return 
# 22 "src/permutation_t/permutation_t.c" 3 4
0
# 22 "src/permutation_t/permutation_t.c"
; } ++count_array_i[j];} free(count_array_i); return 
# 22 "src/permutation_t/permutation_t.c" 3 4
1
# 22 "src/permutation_t/permutation_t.c"
; }
# 73 "src/permutation_t/permutation_t.c"
PERMUTATION_TYPE_CHAR * CREATE_PERMUTATION_TYPE_CHAR(size_t size){ if (size == 0) return 
# 73 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 73 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_CHAR *p = malloc(sizeof(PERMUTATION_TYPE_CHAR)); p->size = size; p->perm = malloc(size * sizeof(char)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_CHAR(const PERMUTATION_TYPE_CHAR *p ){ if (p == 
# 73 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 73 "src/permutation_t/permutation_t.c"
) return 
# 73 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 73 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); char *sorted_perm = malloc(size * sizeof(char)); COPY_ARRAY_TYPE_CHAR(sorted_perm,(const char*)p->perm, size); qsort(sorted_perm, size, sizeof(char), COMPARE_N_TYPE_CHAR); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 73 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 73 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_CHAR(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 73 "src/permutation_t/permutation_t.c" 3 4
0
# 73 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 73 "src/permutation_t/permutation_t.c" 3 4
1
# 73 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 73 "src/permutation_t/permutation_t.c" 3 4
0
# 73 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 73 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 73 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_CHAR(const PERMUTATION_TYPE_CHAR *p){ if(p == 
# 73 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 73 "src/permutation_t/permutation_t.c"
) return 
# 73 "src/permutation_t/permutation_t.c" 3 4
0
# 73 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_CHAR(p); 
# 73 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 73 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_U_CHAR * CREATE_PERMUTATION_TYPE_U_CHAR(size_t size){ if (size == 0) return 
# 74 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 74 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_U_CHAR *p = malloc(sizeof(PERMUTATION_TYPE_U_CHAR)); p->size = size; p->perm = malloc(size * sizeof(unsigned char)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_CHAR(const PERMUTATION_TYPE_U_CHAR *p ){ if (p == 
# 74 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 74 "src/permutation_t/permutation_t.c"
) return 
# 74 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 74 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); unsigned char *sorted_perm = malloc(size * sizeof(unsigned char)); COPY_ARRAY_TYPE_U_CHAR(sorted_perm,(const unsigned char*)p->perm, size); qsort(sorted_perm, size, sizeof(unsigned char), COMPARE_N_TYPE_U_CHAR); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 74 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 74 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_U_CHAR(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 74 "src/permutation_t/permutation_t.c" 3 4
0
# 74 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 74 "src/permutation_t/permutation_t.c" 3 4
1
# 74 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 74 "src/permutation_t/permutation_t.c" 3 4
0
# 74 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 74 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 74 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_U_CHAR(const PERMUTATION_TYPE_U_CHAR *p){ if(p == 
# 74 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 74 "src/permutation_t/permutation_t.c"
) return 
# 74 "src/permutation_t/permutation_t.c" 3 4
0
# 74 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_CHAR(p); 
# 74 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 74 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_INT * CREATE_PERMUTATION_TYPE_INT(size_t size){ if (size == 0) return 
# 75 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 75 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_INT *p = malloc(sizeof(PERMUTATION_TYPE_INT)); p->size = size; p->perm = malloc(size * sizeof(int)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_INT(const PERMUTATION_TYPE_INT *p ){ if (p == 
# 75 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 75 "src/permutation_t/permutation_t.c"
) return 
# 75 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 75 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); int *sorted_perm = malloc(size * sizeof(int)); COPY_ARRAY_TYPE_INT(sorted_perm,(const int*)p->perm, size); qsort(sorted_perm, size, sizeof(int), COMPARE_N_TYPE_INT); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 75 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 75 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_INT(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 75 "src/permutation_t/permutation_t.c" 3 4
0
# 75 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 75 "src/permutation_t/permutation_t.c" 3 4
1
# 75 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 75 "src/permutation_t/permutation_t.c" 3 4
0
# 75 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 75 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 75 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_INT(const PERMUTATION_TYPE_INT *p){ if(p == 
# 75 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 75 "src/permutation_t/permutation_t.c"
) return 
# 75 "src/permutation_t/permutation_t.c" 3 4
0
# 75 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_INT(p); 
# 75 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 75 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_U_INT * CREATE_PERMUTATION_TYPE_U_INT(size_t size){ if (size == 0) return 
# 76 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 76 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_U_INT *p = malloc(sizeof(PERMUTATION_TYPE_U_INT)); p->size = size; p->perm = malloc(size * sizeof(unsigned int)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_INT(const PERMUTATION_TYPE_U_INT *p ){ if (p == 
# 76 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 76 "src/permutation_t/permutation_t.c"
) return 
# 76 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 76 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); unsigned int *sorted_perm = malloc(size * sizeof(unsigned int)); COPY_ARRAY_TYPE_U_INT(sorted_perm,(const unsigned int*)p->perm, size); qsort(sorted_perm, size, sizeof(unsigned int), COMPARE_N_TYPE_U_INT); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 76 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 76 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_U_INT(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 76 "src/permutation_t/permutation_t.c" 3 4
0
# 76 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 76 "src/permutation_t/permutation_t.c" 3 4
1
# 76 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 76 "src/permutation_t/permutation_t.c" 3 4
0
# 76 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 76 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 76 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_U_INT(const PERMUTATION_TYPE_U_INT *p){ if(p == 
# 76 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 76 "src/permutation_t/permutation_t.c"
) return 
# 76 "src/permutation_t/permutation_t.c" 3 4
0
# 76 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_INT(p); 
# 76 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 76 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_L_INT * CREATE_PERMUTATION_TYPE_L_INT(size_t size){ if (size == 0) return 
# 77 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 77 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_L_INT *p = malloc(sizeof(PERMUTATION_TYPE_L_INT)); p->size = size; p->perm = malloc(size * sizeof(long int)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_L_INT(const PERMUTATION_TYPE_L_INT *p ){ if (p == 
# 77 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 77 "src/permutation_t/permutation_t.c"
) return 
# 77 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 77 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); long int *sorted_perm = malloc(size * sizeof(long int)); COPY_ARRAY_TYPE_L_INT(sorted_perm,(const long int*)p->perm, size); qsort(sorted_perm, size, sizeof(long int), COMPARE_N_TYPE_L_INT); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 77 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 77 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_L_INT(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 77 "src/permutation_t/permutation_t.c" 3 4
0
# 77 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 77 "src/permutation_t/permutation_t.c" 3 4
1
# 77 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 77 "src/permutation_t/permutation_t.c" 3 4
0
# 77 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 77 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 77 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_L_INT(const PERMUTATION_TYPE_L_INT *p){ if(p == 
# 77 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 77 "src/permutation_t/permutation_t.c"
) return 
# 77 "src/permutation_t/permutation_t.c" 3 4
0
# 77 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_L_INT(p); 
# 77 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 77 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_U_L_INT * CREATE_PERMUTATION_TYPE_U_L_INT(size_t size){ if (size == 0) return 
# 78 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 78 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_U_L_INT *p = malloc(sizeof(PERMUTATION_TYPE_U_L_INT)); p->size = size; p->perm = malloc(size * sizeof(unsigned long int)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_L_INT(const PERMUTATION_TYPE_U_L_INT *p ){ if (p == 
# 78 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 78 "src/permutation_t/permutation_t.c"
) return 
# 78 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 78 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); unsigned long int *sorted_perm = malloc(size * sizeof(unsigned long int)); COPY_ARRAY_TYPE_U_L_INT(sorted_perm,(const unsigned long int*)p->perm, size); qsort(sorted_perm, size, sizeof(unsigned long int), COMPARE_N_TYPE_U_L_INT); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 78 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 78 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_U_L_INT(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 78 "src/permutation_t/permutation_t.c" 3 4
0
# 78 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 78 "src/permutation_t/permutation_t.c" 3 4
1
# 78 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 78 "src/permutation_t/permutation_t.c" 3 4
0
# 78 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 78 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 78 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_U_L_INT(const PERMUTATION_TYPE_U_L_INT *p){ if(p == 
# 78 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 78 "src/permutation_t/permutation_t.c"
) return 
# 78 "src/permutation_t/permutation_t.c" 3 4
0
# 78 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_U_L_INT(p); 
# 78 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 78 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_SIZE_T * CREATE_PERMUTATION_TYPE_SIZE_T(size_t size){ if (size == 0) return 
# 79 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 79 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); p->size = size; p->perm = malloc(size * sizeof(size_t)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_SIZE_T(const PERMUTATION_TYPE_SIZE_T *p ){ if (p == 
# 79 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 79 "src/permutation_t/permutation_t.c"
) return 
# 79 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 79 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); size_t *sorted_perm = malloc(size * sizeof(size_t)); COPY_ARRAY_TYPE_SIZE_T(sorted_perm,(const size_t*)p->perm, size); qsort(sorted_perm, size, sizeof(size_t), COMPARE_N_TYPE_SIZE_T); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 79 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 79 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_SIZE_T(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 79 "src/permutation_t/permutation_t.c" 3 4
0
# 79 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 79 "src/permutation_t/permutation_t.c" 3 4
1
# 79 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 79 "src/permutation_t/permutation_t.c" 3 4
0
# 79 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 79 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 79 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_SIZE_T(const PERMUTATION_TYPE_SIZE_T *p){ if(p == 
# 79 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 79 "src/permutation_t/permutation_t.c"
) return 
# 79 "src/permutation_t/permutation_t.c" 3 4
0
# 79 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_SIZE_T(p); 
# 79 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 79 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_FLOAT * CREATE_PERMUTATION_TYPE_FLOAT(size_t size){ if (size == 0) return 
# 80 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 80 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_FLOAT *p = malloc(sizeof(PERMUTATION_TYPE_FLOAT)); p->size = size; p->perm = malloc(size * sizeof(float)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_FLOAT(const PERMUTATION_TYPE_FLOAT *p ){ if (p == 
# 80 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 80 "src/permutation_t/permutation_t.c"
) return 
# 80 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 80 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); float *sorted_perm = malloc(size * sizeof(float)); COPY_ARRAY_TYPE_FLOAT(sorted_perm,(const float*)p->perm, size); qsort(sorted_perm, size, sizeof(float), COMPARE_N_TYPE_FLOAT); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 80 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 80 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_FLOAT(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 80 "src/permutation_t/permutation_t.c" 3 4
0
# 80 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 80 "src/permutation_t/permutation_t.c" 3 4
1
# 80 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 80 "src/permutation_t/permutation_t.c" 3 4
0
# 80 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 80 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 80 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_FLOAT(const PERMUTATION_TYPE_FLOAT *p){ if(p == 
# 80 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 80 "src/permutation_t/permutation_t.c"
) return 
# 80 "src/permutation_t/permutation_t.c" 3 4
0
# 80 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_FLOAT(p); 
# 80 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 80 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_DOUBLE * CREATE_PERMUTATION_TYPE_DOUBLE(size_t size){ if (size == 0) return 
# 81 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 81 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_DOUBLE *p = malloc(sizeof(PERMUTATION_TYPE_DOUBLE)); p->size = size; p->perm = malloc(size * sizeof(double)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_DOUBLE(const PERMUTATION_TYPE_DOUBLE *p ){ if (p == 
# 81 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 81 "src/permutation_t/permutation_t.c"
) return 
# 81 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 81 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); double *sorted_perm = malloc(size * sizeof(double)); COPY_ARRAY_TYPE_DOUBLE(sorted_perm,(const double*)p->perm, size); qsort(sorted_perm, size, sizeof(double), COMPARE_N_TYPE_DOUBLE); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 81 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 81 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_DOUBLE(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 81 "src/permutation_t/permutation_t.c" 3 4
0
# 81 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 81 "src/permutation_t/permutation_t.c" 3 4
1
# 81 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 81 "src/permutation_t/permutation_t.c" 3 4
0
# 81 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 81 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 81 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_DOUBLE(const PERMUTATION_TYPE_DOUBLE *p){ if(p == 
# 81 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 81 "src/permutation_t/permutation_t.c"
) return 
# 81 "src/permutation_t/permutation_t.c" 3 4
0
# 81 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_DOUBLE(p); 
# 81 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 81 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_L_DOUBLE * CREATE_PERMUTATION_TYPE_L_DOUBLE(size_t size){ if (size == 0) return 
# 82 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 82 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_L_DOUBLE *p = malloc(sizeof(PERMUTATION_TYPE_L_DOUBLE)); p->size = size; p->perm = malloc(size * sizeof(long double)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_L_DOUBLE(const PERMUTATION_TYPE_L_DOUBLE *p ){ if (p == 
# 82 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 82 "src/permutation_t/permutation_t.c"
) return 
# 82 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 82 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); long double *sorted_perm = malloc(size * sizeof(long double)); COPY_ARRAY_TYPE_L_DOUBLE(sorted_perm,(const long double*)p->perm, size); qsort(sorted_perm, size, sizeof(long double), COMPARE_N_TYPE_L_DOUBLE); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 82 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 82 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_L_DOUBLE(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 82 "src/permutation_t/permutation_t.c" 3 4
0
# 82 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 82 "src/permutation_t/permutation_t.c" 3 4
1
# 82 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 82 "src/permutation_t/permutation_t.c" 3 4
0
# 82 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 82 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 82 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_L_DOUBLE(const PERMUTATION_TYPE_L_DOUBLE *p){ if(p == 
# 82 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 82 "src/permutation_t/permutation_t.c"
) return 
# 82 "src/permutation_t/permutation_t.c" 3 4
0
# 82 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_L_DOUBLE(p); 
# 82 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 82 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
PERMUTATION_TYPE_STRING * CREATE_PERMUTATION_TYPE_STRING(size_t size){ if (size == 0) return 
# 83 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 83 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_STRING *p = malloc(sizeof(PERMUTATION_TYPE_STRING)); p->size = size; p->perm = malloc(size * sizeof(char*)); return p; } PERMUTATION_TYPE_SIZE_T * TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_STRING(const PERMUTATION_TYPE_STRING *p ){ if (p == 
# 83 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 83 "src/permutation_t/permutation_t.c"
) return 
# 83 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 83 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = malloc(sizeof(PERMUTATION_TYPE_SIZE_T)); size_t size = p->size; t_p->size = size; t_p->perm = malloc(size * sizeof(size_t)); char* *sorted_perm = malloc(size * sizeof(char*)); COPY_ARRAY_TYPE_STRING(sorted_perm,(const char**)p->perm, size); qsort(sorted_perm, size, sizeof(char*), COMPARE_N_TYPE_STRING); size_t *rec_index_visited = malloc(size * sizeof(size_t)); size_t cur_rec = 0; 
# 83 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 83 "src/permutation_t/permutation_t.c"
found_rec; for(size_t i = 0; i < size; ++i){ for(size_t j = 0; j < size; ++j){ if(COMPARE_N_TYPE_STRING(&(p->perm[j]), &(sorted_perm[i])) == 0){ found_rec = 
# 83 "src/permutation_t/permutation_t.c" 3 4
0
# 83 "src/permutation_t/permutation_t.c"
; for(size_t k = 0; k < cur_rec; ++k){ if(rec_index_visited[k] == j){ found_rec == 
# 83 "src/permutation_t/permutation_t.c" 3 4
1
# 83 "src/permutation_t/permutation_t.c"
; break; } } if(found_rec == 
# 83 "src/permutation_t/permutation_t.c" 3 4
0
# 83 "src/permutation_t/permutation_t.c"
){ t_p->perm[j] = i; rec_index_visited[cur_rec++] = j; break; } } } } free(rec_index_visited); free(sorted_perm); return t_p; } 
# 83 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 83 "src/permutation_t/permutation_t.c"
IS_PERMUTATION_TYPE_STRING(const PERMUTATION_TYPE_STRING *p){ if(p == 
# 83 "src/permutation_t/permutation_t.c" 3 4
((void *)0)
# 83 "src/permutation_t/permutation_t.c"
) return 
# 83 "src/permutation_t/permutation_t.c" 3 4
0
# 83 "src/permutation_t/permutation_t.c"
; PERMUTATION_TYPE_SIZE_T *t_p = TRANSLATE_TO_SET_THEORIC_SIZE_T_TYPE_STRING(p); 
# 83 "src/permutation_t/permutation_t.c" 3 4
_Bool 
# 83 "src/permutation_t/permutation_t.c"
ret = IS_PERMUTATION_SET_THEORIC_TYPE_SIZE_T(t_p); free(t_p); return ret; }
# 0 "src/set_theoric_t/set_theoric_t.c"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "src/set_theoric_t/set_theoric_t.c"

# 1 "./src/set_theoric_t/set_theoric_t.h" 1



# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 392 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 393 "/usr/include/features.h" 2 3 4
# 486 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 559 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 560 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 561 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 487 "/usr/include/features.h" 2 3 4
# 510 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 511 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4

# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 56 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 119 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 57 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 386 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 30 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 144 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 396 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 575 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 654 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 682 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 738 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 791 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 808 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 828 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 848 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
# 880 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__))
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1013 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1023 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1024 "/usr/include/stdlib.h" 2 3 4
# 1035 "/usr/include/stdlib.h" 3 4

# 5 "./src/set_theoric_t/set_theoric_t.h" 2

# 1 "./src/tools_t/tools_t.h" 1



# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4
# 52 "/usr/include/stdio.h" 3 4
typedef __gnuc_va_list va_list;
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4
# 143 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));
# 178 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);
# 188 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 205 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ , __leaf__)) ;




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 222 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 258 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 293 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 308 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) ;
# 328 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));
# 403 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 434 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 459 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));





extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 513 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 538 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 549 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 565 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__access__ (__write_only__, 1, 2)));
# 632 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 702 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 736 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 760 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 786 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;







extern void perror (const char *__s);




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 823 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream);





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) ;






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__))
  __attribute__ ((__access__ (__write_only__, 1)));
# 867 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 885 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 902 "/usr/include/stdio.h" 3 4

# 5 "./src/tools_t/tools_t.h" 2

# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 173 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 407 "/usr/include/string.h" 3 4
extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));
# 432 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 458 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4










extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));
# 489 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 539 "/usr/include/string.h" 3 4

# 7 "./src/tools_t/tools_t.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdbool.h" 1 3 4
# 8 "./src/tools_t/tools_t.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4




extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 116 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 132 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;
# 249 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));

extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));
# 262 "/usr/include/time.h" 3 4
extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 272 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));
# 311 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 326 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));
# 364 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 440 "/usr/include/time.h" 3 4

# 9 "./src/tools_t/tools_t.h" 2
# 40 "./src/tools_t/tools_t.h"

# 40 "./src/tools_t/tools_t.h"
void gotoxy(int x, int y);
# 95 "./src/tools_t/tools_t.h"
int COMPARE_N_TYPE_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_CHAR(char* dst, const char* src, size_t size); char MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_CHAR(const char *array, size_t size); char MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_CHAR(const char *array, size_t size); char* TYPE_CHAR_TO_STR(char var);
int COMPARE_N_TYPE_U_CHAR(const void *,const void*); void COPY_ARRAY_TYPE_U_CHAR(unsigned char* dst, const unsigned char* src, size_t size); unsigned char MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); unsigned char MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_CHAR(const unsigned char *array, size_t size); char* TYPE_U_CHAR_TO_STR(unsigned char var);
int COMPARE_N_TYPE_INT(const void *,const void*); void COPY_ARRAY_TYPE_INT(int* dst, const int* src, size_t size); int MAX_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_INT(const int *array, size_t size); int MIN_ARRAY_TYPE_INT(const int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_INT(const int *array, size_t size); char* TYPE_INT_TO_STR(int var);
int COMPARE_N_TYPE_U_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_INT(unsigned int* dst, const unsigned int* src, size_t size); unsigned int MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); unsigned int MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_INT(const unsigned int *array, size_t size); char* TYPE_U_INT_TO_STR(unsigned int var);
int COMPARE_N_TYPE_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_L_INT(long int* dst, const long int* src, size_t size); long int MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_INT(const long int *array, size_t size); long int MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_INT(const long int *array, size_t size); char* TYPE_L_INT_TO_STR(long int var);
int COMPARE_N_TYPE_U_L_INT(const void *,const void*); void COPY_ARRAY_TYPE_U_L_INT(unsigned long int* dst, const unsigned long int* src, size_t size); unsigned long int MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); unsigned long int MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_U_L_INT(const unsigned long int *array, size_t size); char* TYPE_U_L_INT_TO_STR(unsigned long int var);
int COMPARE_N_TYPE_SIZE_T(const void *,const void*); void COPY_ARRAY_TYPE_SIZE_T(size_t* dst, const size_t* src, size_t size); size_t MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_SIZE_T(const size_t *array, size_t size); char* TYPE_SIZE_T_TO_STR(size_t var);
int COMPARE_N_TYPE_FLOAT(const void *,const void*); void COPY_ARRAY_TYPE_FLOAT(float* dst, const float* src, size_t size); float MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_FLOAT(const float *array, size_t size); float MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_FLOAT(const float *array, size_t size); char* TYPE_FLOAT_TO_STR(float var);
int COMPARE_N_TYPE_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_DOUBLE(double* dst, const double* src, size_t size); double MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_DOUBLE(const double *array, size_t size); double MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_DOUBLE(const double *array, size_t size); char* TYPE_DOUBLE_TO_STR(double var);
int COMPARE_N_TYPE_L_DOUBLE(const void *,const void*); void COPY_ARRAY_TYPE_L_DOUBLE(long double* dst, const long double* src, size_t size); long double MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); long double MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_L_DOUBLE(const long double *array, size_t size); char* TYPE_L_DOUBLE_TO_STR(long double var);
int COMPARE_N_TYPE_STRING(const void *,const void*); void COPY_ARRAY_TYPE_STRING(char** dst, const char** src, size_t size); char* MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MAX_ARRAY_TYPE_STRING(const char* *array, size_t size); char* MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); size_t ARG_MIN_ARRAY_TYPE_STRING(const char* *array, size_t size); char* TYPE_STRING_TO_STR(char* var);





double diff_timespec_seconds(struct timespec time_stop, struct timespec time_start);

double diff_timespec_milliseconds(struct timespec time_stop, struct timespec time_start);

long diff_timespec_nanoseconds(struct timespec time_stop, struct timespec time_start);
# 7 "./src/set_theoric_t/set_theoric_t.h" 2
# 17 "./src/set_theoric_t/set_theoric_t.h"
struct SET_THEORIC_TYPE_U_CHAR{ unsigned char id; unsigned char *set; }; typedef struct SET_THEORIC_TYPE_U_CHAR SET_THEORIC_TYPE_U_CHAR; SET_THEORIC_TYPE_U_CHAR * CREATE_SET_THEORIC_TYPE_U_CHAR(size_t id ); 
# 17 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 17 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_U_CHAR(SET_THEORIC_TYPE_U_CHAR *st);
struct SET_THEORIC_TYPE_U_INT{ unsigned int id; unsigned int *set; }; typedef struct SET_THEORIC_TYPE_U_INT SET_THEORIC_TYPE_U_INT; SET_THEORIC_TYPE_U_INT * CREATE_SET_THEORIC_TYPE_U_INT(size_t id ); 
# 18 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 18 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_U_INT(SET_THEORIC_TYPE_U_INT *st);
struct SET_THEORIC_TYPE_U_L_INT{ unsigned long int id; unsigned long int *set; }; typedef struct SET_THEORIC_TYPE_U_L_INT SET_THEORIC_TYPE_U_L_INT; SET_THEORIC_TYPE_U_L_INT * CREATE_SET_THEORIC_TYPE_U_L_INT(size_t id ); 
# 19 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 19 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_U_L_INT(SET_THEORIC_TYPE_U_L_INT *st);
struct SET_THEORIC_TYPE_SIZE_T{ size_t id; size_t *set; }; typedef struct SET_THEORIC_TYPE_SIZE_T SET_THEORIC_TYPE_SIZE_T; SET_THEORIC_TYPE_SIZE_T * CREATE_SET_THEORIC_TYPE_SIZE_T(size_t id ); 
# 20 "./src/set_theoric_t/set_theoric_t.h" 3 4
_Bool 
# 20 "./src/set_theoric_t/set_theoric_t.h"
IS_SET_THEORIC_TYPE_SIZE_T(SET_THEORIC_TYPE_SIZE_T *st);
# 3 "src/set_theoric_t/set_theoric_t.c" 2
# 21 "src/set_theoric_t/set_theoric_t.c"
SET_THEORIC_TYPE_U_CHAR * CREATE_SET_THEORIC_TYPE_U_CHAR(size_t id){ if(id == 0) return 
# 21 "src/set_theoric_t/set_theoric_t.c" 3 4
((void *)0)
# 21 "src/set_theoric_t/set_theoric_t.c"
; SET_THEORIC_TYPE_U_CHAR *ret_set = malloc(sizeof(SET_THEORIC_TYPE_U_CHAR)); ret_set->id = id; ret_set->set = malloc(id*sizeof(unsigned char)); for(unsigned char i = 0; i < id; ++i) ret_set->set[i]=i; return ret_set; } 
# 21 "src/set_theoric_t/set_theoric_t.c" 3 4
_Bool 
# 21 "src/set_theoric_t/set_theoric_t.c"
IS_SET_THEORIC_TYPE_U_CHAR(SET_THEORIC_TYPE_U_CHAR *st){ for(unsigned char i = 0; i < st->id; ++i){ if(st->set[i] != i) return 
# 21 "src/set_theoric_t/set_theoric_t.c" 3 4
0
# 21 "src/set_theoric_t/set_theoric_t.c"
; return 
# 21 "src/set_theoric_t/set_theoric_t.c" 3 4
1
# 21 "src/set_theoric_t/set_theoric_t.c"
; } }
SET_THEORIC_TYPE_U_INT * CREATE_SET_THEORIC_TYPE_U_INT(size_t id){ if(id == 0) return 
# 22 "src/set_theoric_t/set_theoric_t.c" 3 4
((void *)0)
# 22 "src/set_theoric_t/set_theoric_t.c"
; SET_THEORIC_TYPE_U_INT *ret_set = malloc(sizeof(SET_THEORIC_TYPE_U_INT)); ret_set->id = id; ret_set->set = malloc(id*sizeof(unsigned int)); for(unsigned int i = 0; i < id; ++i) ret_set->set[i]=i; return ret_set; } 
# 22 "src/set_theoric_t/set_theoric_t.c" 3 4
_Bool 
# 22 "src/set_theoric_t/set_theoric_t.c"
IS_SET_THEORIC_TYPE_U_INT(SET_THEORIC_TYPE_U_INT *st){ for(unsigned int i = 0; i < st->id; ++i){ if(st->set[i] != i) return 
# 22 "src/set_theoric_t/set_theoric_t.c" 3 4
0
# 22 "src/set_theoric_t/set_theoric_t.c"
; return 
# 22 "src/set_theoric_t/set_theoric_t.c" 3 4
1
# 22 "src/set_theoric_t/set_theoric_t.c"
; } }
SET_THEORIC_TYPE_U_L_INT * CREATE_SET_THEORIC_TYPE_U_L_INT(size_t id){ if(id == 0) return 
# 23 "src/set_theoric_t/set_theoric_t.c" 3 4
((void *)0)
# 23 "src/set_theoric_t/set_theoric_t.c"
; SET_THEORIC_TYPE_U_L_INT *ret_set = malloc(sizeof(SET_THEORIC_TYPE_U_L_INT)); ret_set->id = id; ret_set->set = malloc(id*sizeof(unsigned long int)); for(unsigned long int i = 0; i < id; ++i) ret_set->set[i]=i; return ret_set; } 
# 23 "src/set_theoric_t/set_theoric_t.c" 3 4
_Bool 
# 23 "src/set_theoric_t/set_theoric_t.c"
IS_SET_THEORIC_TYPE_U_L_INT(SET_THEORIC_TYPE_U_L_INT *st){ for(unsigned long int i = 0; i < st->id; ++i){ if(st->set[i] != i) return 
# 23 "src/set_theoric_t/set_theoric_t.c" 3 4
0
# 23 "src/set_theoric_t/set_theoric_t.c"
; return 
# 23 "src/set_theoric_t/set_theoric_t.c" 3 4
1
# 23 "src/set_theoric_t/set_theoric_t.c"
; } }
SET_THEORIC_TYPE_SIZE_T * CREATE_SET_THEORIC_TYPE_SIZE_T(size_t id){ if(id == 0) return 
# 24 "src/set_theoric_t/set_theoric_t.c" 3 4
((void *)0)
# 24 "src/set_theoric_t/set_theoric_t.c"
; SET_THEORIC_TYPE_SIZE_T *ret_set = malloc(sizeof(SET_THEORIC_TYPE_SIZE_T)); ret_set->id = id; ret_set->set = malloc(id*sizeof(size_t)); for(size_t i = 0; i < id; ++i) ret_set->set[i]=i; return ret_set; } 
# 24 "src/set_theoric_t/set_theoric_t.c" 3 4
_Bool 
# 24 "src/set_theoric_t/set_theoric_t.c"
IS_SET_THEORIC_TYPE_SIZE_T(SET_THEORIC_TYPE_SIZE_T *st){ for(size_t i = 0; i < st->id; ++i){ if(st->set[i] != i) return 
# 24 "src/set_theoric_t/set_theoric_t.c" 3 4
0
# 24 "src/set_theoric_t/set_theoric_t.c"
; return 
# 24 "src/set_theoric_t/set_theoric_t.c" 3 4
1
# 24 "src/set_theoric_t/set_theoric_t.c"
; } }
